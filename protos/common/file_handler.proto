syntax = "proto3";

package cloud.lazycat.apis.common;


option go_package = "gitee.com/linakesi/lzc-sdk/lang/go/common";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service FileHandler {
  rpc query(QueryRequest) returns (QueryReply) {}
  rpc open(OpenRequest) returns (OpenReply) {}
  rpc openFileManager(OpenFileManagerRequest) returns (google.protobuf.Empty) {}
  // 列出目录结构
  rpc walkDir(WalkDirRequest) returns (stream WalkDirReply) {}
  rpc walkDirDuplex(stream WalkDirRequest) returns (stream WalkDirReply) {}
  rpc createDir(stream CreateDirRequest) returns (google.protobuf.Empty) {}
  rpc stat(StatRequest) returns (StatReply) {}
  // 同步文件夹, 让target_path的内容和device_path内容一致.  device_path = target_path
  //  sync A→B 的話
  //  B=A
  rpc syncFolder(SyncFolderRequest) returns (stream TaskProgressInfo) {}
  // 备份文件夹, 让server_path的内容和设备上的某个文件夹保持一致.
  //    copy A→B 的話
  //      B=A+B 原有檔案
  rpc copyFolder(CopyFolderRequest) returns (stream TaskProgressInfo) {}
}

message WalkDirRequest {
  // 目录路径
  string path = 1;
  // 过滤条件
  optional string pattern = 2;
  // 遍历深度，只支持0或1。0表示无限制递归，1表示仅返回一层文件夹
  optional int32 depth = 4;
}

message WalkDirReply {
  // 全路径 /home/lnks/hello.txt
  string path = 1;
  // 文件名 hello.txt
  string base = 2;
  // 文件大小
  int64 size = 3;
  // 是否为目录
  bool isDir = 4;
  // 文件修改时间
  google.protobuf.Timestamp mtime = 5;
}

message CreateDirRequest {
  string path = 1;
}

message OpenFileManagerRequest{
  // 文件(夹)绝对路径
  // 1. window 下面的必须以盘符开头，如 C:\Users\lnks\Desktop
  // 2. unix   下面的必须以 / 开头，如 /home/lnks/Desktop
  string path = 1;
}

enum IntentAction{
  // 未知
  UN_KNOWN = 0;
  // 打开
  OPEN = 1;
  // 分享
  SHARE = 2;
}

message OpenRequest {
  // 应用id
  string app_id = 1;
  // 文件路径
  string path = 2;

  IntentAction intent_action = 4;
}


message OpenReply {
  // 打开应用的地址
  optional string url = 1;
}

message QueryRequest {
  // 文件mime类型
  string mime = 1;
  // 文件路径(可选 android下面使用path查询，体验更好 ）
  optional string path = 2;
  // 期望的 app icon 尺寸(宽高一致）
  optional int32 icon_size = 3;
}
message QueryReply {
  repeated AppShortcut app_list = 1;
}

message AppShortcut{
  string app_id = 1;
  string title = 2;
  string icon = 3;
  IntentAction intent_action = 4;
}

message StatRequest{
  string path = 1;
}

// StatReply 和 golang fs.FileInfo 中字段保持一致
message StatReply{
  string name = 1;
  int64 size = 2;
  uint32 mode = 3;
  google.protobuf.Timestamp modTime = 4;
  bool isDir = 5;
}

// 同步文件夹请求
message SyncFolderRequest{
  // 服务器地址
  string webdav_addr = 1;
  // 服务器用户名
  string username = 2;
  // 服务器密码
  string password = 3;
  // 设备文件夹路径
  string device_path = 4;
  string target_path = 5;
}

// 复制文件夹请求
message CopyFolderRequest{
  // 服务器地址
  string webdav_addr = 1;
  // 服务器用户名
  string username = 2;
  // 服务器密码
  string password = 3;
  // 设备文件夹路径
  string device_path = 4;
  string target_path = 5;
}

// 文件进度信息
message FileProgress {
  // 当前文件名
  string file_name = 1;
  // 当前文件同步进度
  string progress = 2;
  // 当前文件已经传输的体积
  string transferred_file_size = 3;
  // 当前文件同步的进度
  string speed = 4;
}

//  整体的进度信息
message TaskProgressInfo {
  // 当code = 1, 任务完成。其他为异常退出
  int32 code = 1;
  // 错误信息。
  string msg = 2;
  // 需要需要同步/备份的文件数量
  int32 total_file_count = 3;
  // 需要需要同步/备份的体积
  string total_file_size = 4;
  // 已经传输的文件的文件数量
  int32 transferred_file_count = 5;
  // 已经传输的文件体积
  string transferred_file_size = 6;
  repeated FileProgress file_sync_progress = 7;
  // 所有文件的速度
  string total_file_sync_speed = 8;
  // 正在检测的文件数量信息, 当有这个信息的时候，正在检测文件。
  string checks = 9;
}