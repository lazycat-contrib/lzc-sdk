syntax = "proto3";

package cloud.lazycat.apis.sys;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "gitee.com/linakesi/lzc-sdk/lang/go/sys/portal-server";

service HPortalSys {
  // 用auth-token反向查询登陆的设备以及UID
  rpc QueryLogin(AuthToken) returns (LoginInfo) {}

  // 根据UID返回所有的设备列表
  rpc ListDevices(ListDeviceRequest) returns (ListDeviceReply) {}


  rpc QueryDeviceByID(DeviceID) returns (Device) {}

  rpc QueryBoxInfo(google.protobuf.Empty) returns (BoxInfo) {}

  rpc SetBoxStatus(BoxStatus) returns (google.protobuf.Empty) {}

  // 获取盒子所属域名下或下一级域名的https证书。
  // 注意不是所有ACME服务器都支持泛域名。
  rpc GetDomainCert(DomainCertRequest) returns (DomainCertReply) {}


  // 在部署具体app前，调用此接口获取app证书
  // APP证书格式为:
  //   Issuer: O = $BOX.ORIGIN, CN = $BOX.DOMAIN, serialNumber = $BOX.ID
  //   Subject: O = $BOX.ORIGIN, CN = $APP.DOMAIN, serialNumber = '$UID@$APP.ID || $APP.ID'
  // Issuer为box.crt，通过QueryBoxInfo查询到BoxInfo.BoxCrt。并且box.crt的公钥与box.id是一一对应关系。
  //
  // 盒子内部组件可以直接通过QueryBoxInfo来验证信任链是否合法，盒子外部系统需要通过其他机制比如libp2p.identify去验证box.crt的合法性。
  //
  rpc GetAppCert(AppCertRequest) returns (AppCertReply) {}

  // 申请额外的外部可访问的IP,并配置对应访问域名
  rpc AllocVirtualExternalIP(AllocVEIPRequest) returns (AllocVEIPReply) {}
  // 释放虚拟IP
  rpc FreeVirtualExternalIP(FreeVEIPRequest)  returns (FreeVEIPReply) {}

  rpc PairDevices(PairDevicesRequest) returns (stream google.protobuf.Empty) {}

  //  查询所有UID
  rpc ListUsers(google.protobuf.Empty) returns (ListUsersReply) {}

  //  根据用户uid查询用户信息
  rpc QueryRole(UserID) returns (QueryRoleReply) {}
  //  修改指定uid的用户角色
  rpc ChangeRole(ChangeRoleReqeust) returns(google.protobuf.Empty){}
  //  通过验证旧密码修改新的密码
  rpc ResetPassword(ResetPasswordRequest) returns(google.protobuf.Empty){}
  //  删除用户信息
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty){}
  //  创建用户信息
  rpc CreateUser(CreateUserRequest) returns (google.protobuf.Empty){}
  //  强制重置用户密码
  rpc ForceResetPassword(ForceResetPasswordRequest) returns (google.protobuf.Empty){}

  // 生成用户注册token,以便上层实现各类用户注册机制
  rpc GenUserInvitation(GenUserInvitationRequest) returns (UserInvitation) {}

  // 注销当前用户指定设备，同时将连接断开
  rpc Logout(LogoutRequest)returns(google.protobuf.Empty){}

  //校验用户密码是否正确
  rpc CheckPassword(CheckPasswordRequest) returns (google.protobuf.Empty){}
}

message GenUserInvitationRequest {
  // 仅限注册此uid
  optional string limit_uid = 1;

  // 在此时间前有效
  optional google.protobuf.Timestamp not_after = 2;

  // 此邀请最多使用多少次
  optional int32 limit_usage_count = 3;

  // 自动设置role为此字段，默认为NORMAL
  optional Role limit_role = 4;
}

message UserInvitation {
  string token = 1;
}

message ListUsersReply {
  repeated string uids = 1;
}

message PairDevicesRequest {
  string src_id = 1;
  repeated string other_ids = 2;
}

message AllocVEIPRequest {
  // 简短说明使用原因，方便后续管理
  string usage = 1;

  // 关联的子域名。hserver会自动将$subdomain.$boxdomain的AAAA/A记录关联到对应的IP上
  // 1. 外部系统需要自行确保subdomain不会冲突
  string subdomain = 2;
}
message AllocVEIPReply {
  string ip = 1;
}

message FreeVEIPRequest {
  string ip = 1;

  // 释放VEIP时为了避免DNS cache的问题，会在删除对应DNS record后等待一定时间后再真实的释放对应VEIP
  // 不指定则默认为10分钟
  int32 wait_second = 2;
}
message FreeVEIPReply {
}

message AppCertRequest {
  string appid = 1;

  // 单实例则为空，多实例为APP所部署时的UID
  string uid = 2;

  // 证书有效时间，单位s
  int32 valid_seconds = 3;
}

message AppCertReply {
  // PEM格式的APP证书
  string cert = 1;

  // PEM格式的APP私钥
  string private_key = 2;

  // 盒子证书，同一盒子内所有app的box_cert都是相同的，
  // 可以作为CA证书的角色来使用
  string box_cert = 3;
}


message AuthToken {
  // 登陆时服务器返回的token
  string token = 1;

  // 若设置了此地址，则在未检测到auth-token时，
  // 可以使用返回信息中的autologin_token_request_url进行自动查找auth-token
  // 此地址一般时ingress等组件上提供的服务。
  // 会通过html post form形式调用，附带token和redirect两个字段
  // token为自动搜索到的token，redirect为AuthToken.autologin_redirect_url的值。
  // 若token为空表示自动搜索token失败。
  string autologin_token_post_url = 2;

  // 若token_type = HTTPBasicAuth或使用autologin机制，
  // 则必须包含此字段，以便hportal可以分析出正确的登陆设备
  string access_ip = 3;

  string autologin_redirect_url = 4;

  enum TokenType {
    Raw = 0;       // token return by hportal-server login method
    HTTPBasicAuth = 1; // QWxhZGRpbjpvcGVuIHNlc2FtZQ==
  }
  TokenType token_type = 5;
}

message LoginInfo {
  string uid = 1;

  string device_id = 2;

  google.protobuf.Timestamp when = 3;

  // 若uid为空, ingress应该返回此html内容给浏览器进行自动登陆。
  // 此html片段会尝试与hclient通讯获取auth-token后post到AuthToken.autologin_token_post_url上
  string autologin_token_request_content = 4;
}


message DeviceID {
  string id = 1;
}

message BoxInfo {
  // 中心化服务器地址, 默认为origin.lazycat.cloud
  string origin_server = 1;

  // fc03:1136:38/40地址
  string virtual_ip = 2;

  // p2p节点id
  string box_id = 3;

  // 注册到origin-server内的名称
  string box_name = 4;

  // 从origin-server获取到的域名
  string box_domain = 5;

  // 证书管理器已经就续
  bool cert_ready = 6;


  // PEM格式的盒子证书, 作为盒子系统其他app cert的CA证书。
  string box_cert = 7;
}

message BoxStatus {
  enum Status {
    OK = 0;
    Error = 1;
  }
  Status status = 1;
}

message DomainCertRequest {
  string domain = 1;
}
message DomainCertReply {
  string cert = 1;
  string key = 2;

  bytes ocsp = 3;
}


message Device {
  string udid = 7;
  // TODO 待删除
  string peer_id = 1;

  bool is_online = 2;

  // 因为device api的监听端口可能会变化，所以此url有效性不会太长
  string device_api_url = 3;
  // 设备名称
  string name = 4;
  // 设备型号
  string model = 5;
  // 设备绑定时间
  google.protobuf.Timestamp binding_time = 6;
}

message ListDeviceRequest {
  string uid = 1;
}

message ListDeviceReply {
  repeated Device devices = 1;
}

message UserID {
  string uid = 1;
}

enum Role {
  NORMAL = 0;
  ADMIN = 1;
}

message ChangeRoleReqeust{
  string uid = 1;
  Role role = 2;
}

message QueryRoleReply {
  string uid = 1;
  Role role = 2;
}


message ResetPasswordRequest{
  string uid = 1;
  string old_password = 2;
  string new_password = 3;
}

message DeleteUserRequest {
  string uid = 1;
}

message CreateUserRequest{
  string uid = 1;
  string password = 2;
  Role role = 3;
}

message ForceResetPasswordRequest{
  string uid = 1;
  string new_password = 2;
}


message LogoutRequest{
  string uid = 1;
  // 设备唯一id
  string udid = 2;
  // 注销原因
  Reason reason = 3;

  enum Reason {
    LogoutByDeleting = 0;
    LogoutByUser = 1;
  }
}

message CheckPasswordRequest{
  string uid = 1;
  string password = 2;
}
