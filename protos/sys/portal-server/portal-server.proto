syntax = "proto3";

package cloud.lazycat.apis.sys;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "gitee.com/linakesi/lzc-sdk/lang/go/sys/portal-server";

service HPortalSys {
  rpc QueryBoxInfo(google.protobuf.Empty) returns (BoxInfo) {}

  // 获取盒子所属域名下或下一级域名的https证书。
  // 注意不是所有ACME服务器都支持泛域名。
  rpc GetDomainCert(DomainCertRequest) returns (DomainCertReply) {}

  // 申请额外的外部可访问的IP,并配置对应访问域名
  rpc AllocVirtualExternalIP(AllocVEIPRequest) returns (AllocVEIPReply) {}
  // 释放虚拟IP
  rpc FreeVirtualExternalIP(FreeVEIPRequest)  returns (FreeVEIPReply) {}

  //  查询所有UID
  rpc ListUsers(google.protobuf.Empty) returns (ListUsersReply) {}
  //  创建用户信息
  rpc CreateUser(CreateUserRequest) returns (google.protobuf.Empty){}
  //  删除用户信息
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty){}
  //  修改新的密码
  rpc ResetPassword(ResetPasswordRequest) returns(google.protobuf.Empty){}
  //  校验用户密码是否正确
  rpc CheckPassword(CheckPasswordRequest) returns (google.protobuf.Empty) {}
  //  根据用户uid查询用户信息
  rpc QueryRole(UserID) returns (QueryRoleReply) {}
  //  修改指定uid的用户角色
  rpc ChangeRole(ChangeRoleReqeust) returns(google.protobuf.Empty){}
  //  添加或删除受信任设备
  rpc ChangeTrustEndDevice(ChangeTrustEndDeviceRequest) returns (ChangeTrustEndDeviceReply) {}
  // 根据UID返回所有的设备列表
  rpc ListDevices(ListDeviceRequest) returns (ListDeviceReply) {}
  rpc QueryDeviceByID(DeviceID) returns (Device) {}

  // 获取remotesocks服务器地址
  rpc RemoteSocks(RemoteSocksRequest) returns (RemoteSocksReply) {}

  // hserver重启后默认设置BoxSystem为booting状态
  // 实际的BoxSystem需要定期(建议两到三秒)设置其实际状态，避免hserver被手动或自动重启后设置的盒子系统状态错误
  rpc UpdateBoxSystemStatus(UpdateBoxSystemStatusRequest) returns (UpdateBoxSystemStatusResponse) {}

  // 仅在盒子未初始化时，可以被调用。
  rpc SetupHServer(SetupHServerRequest) returns (SetupHServerReply);

  // 重置盒子
  // 1. 向Origin请求释放盒子名下的所有域名
  // 2. 清除本地的box.name
  // 3. 进入为初始化状态
  rpc ResetHServer(ResetHServerRequest) returns (ResetHServerReply);

  // 注册盒子服务
  // 任何原因导致此调用结束时，都会使此服务注销。(比如hportal重启)
  // 调用者需要自行重新注册
  rpc RegisterBoxService(RegisterBoxServiceRequest) returns (stream RegisterBoxServiceReply);

  rpc BoxServiceChanged(BoxServiceChangedRequest) returns (google.protobuf.Empty);

  rpc LookupBoxServiceDialer(LookupBoxServiceDialerRequest) returns (LookupBoxServiceDialerResponse);

  // ----------------------------- 以下为准备废弃的接口 --------------------------------------
  rpc GetDomainSelfCert(DomainCertRequest) returns (DomainCertReply) {option deprecated=true;}

  // 会话相关接口应该由lzc-runtime/userm自行处理
  //
  // 删除登陆的会话状态
  rpc ClearLoginSession(ClearLoginSessionRequest) returns (ClearLoginSessionReply) {}
}

enum DialerRole {
  GUEST_USER = 0; // 未登录也可以调用
  NORMAL_USER = 1; // 登录的普通用户可以调用
  ADMIN_USER = 2; // 登录的管理员可以调用
}

message RegisterBoxServiceRequest {
  // 服务名称，建议使用 xx.yy.zz.nn 这种形式
  // 如果此服务处于注册中，则后续请求会直接失败结束
  string service_name = 1;

  string service_network = 2; //tcp、udp
  string service_address = 3; // $ip:$port

  // 服务提供的额外信息，此信息会原封不动的传递给hclient端，
  // service可以基于此机制进行进一步的安全认证等作用
  string extra_info = 6;

  // 需要调用者的身份
  DialerRole require_dialer_role = 7;

  // 只有客户端是受信任设备时可以调用
  bool require_trust_dev = 8;

  // 是否需要客户端登陆
  bool login_require = 4 [deprecated=true];
  // 是否需要登陆的用户为管理员
  bool admin_require = 5 [deprecated=true];
}
message RegisterBoxServiceReply {}

message BoxServiceChangedRequest {
  string service_name = 1;
}

message LookupBoxServiceDialerRequest {
  string remote_addr = 1;
  string local_addr = 2;
  string protocol = 3;
}
message LookupBoxServiceDialerResponse {
  // 若客户端未登录，则是SRP认证的UID，否则是登录的UID
  string uid = 1;
  string device_id = 2;
  string device_version = 3;
  string virtual_ip = 4;
  string peer_id = 5;
  bool is_logined = 6;
  bool is_trust_dev = 7;
}

message RemoteSocksRequest {
  enum LocationType {
    Unkonwn = 0;

    //在当前hserver所处的物理网络协议栈上提供socks服务
    Local = 1;

    //在指定的的hclient所处的物理网络协议栈上提供socks服务
    Remote = 2;
  }

  LocationType location_type = 1;

  string target = 2; //若Type为Remote则，填写节点的peer.ID
}

message RemoteSocksReply {
  string server_url = 1; //返回的socks5服务器地址
}

message ListUsersReply {
  repeated string uids = 1;
}

message AllocVEIPRequest {
  // 简短说明使用原因，方便后续管理
  string usage = 1;

  // 关联的子域名。hserver会自动将$subdomain.$boxdomain的AAAA/A记录关联到对应的IP上
  // 1. 外部系统需要自行确保subdomain不会冲突
  string subdomain = 2;
}
message AllocVEIPReply {
  string ip = 1;
}

message FreeVEIPRequest {
  string ip = 1;

  // 释放VEIP时为了避免DNS cache的问题，会在删除对应DNS record后等待一定时间后再真实的释放对应VEIP
  // 不指定则默认为10分钟
  int32 wait_second = 2;
}
message FreeVEIPReply {}

message AuthToken {
  // 登陆时服务器返回的token
  string token = 1;

  // 若token_type = HTTPBasicAuth
  // 则必须包含此字段，以便hportal可以分析出正确的登陆设备
  // 若仅仅是为了验证帐号密码是否正确，直接调用CheckPassword接口
  string access_ip = 3;

  enum TokenType {
    Raw = 0;       // token return by hportal-server login method
    HTTPBasicAuth = 1; // QWxhZGRpbjpvcGVuIHNlc2FtZQ==
  }
  TokenType token_type = 5;


  // 若设置了此地址，则在未检测到auth-token时，
  // 可以使用返回信息中的autologin_token_request_url进行自动查找auth-token
  // 此地址一般是ingress等组件上提供的服务。
  // 会通过html post form形式调用，附带token和redirect两个字段
  // token为自动搜索到的token，redirect为AuthToken.autologin_redirect_url的值。
  // 若token为空表示自动搜索token失败。
  string autologin_token_post_url = 2 [deprecated=true];
  string autologin_redirect_url = 4 [deprecated=true];
}

message LoginInfo {
  string uid = 1;

  string device_id = 2;

  // 最近登陆时间，因为针对弱网优化因此不一定等于本次登陆时间
  // 只有hserver重启或调用了ClearLoginSession后，才会真属于退出状态
  google.protobuf.Timestamp when = 3;

  // 若uid为空, ingress应该返回此html内容给浏览器进行自动登陆。
  // 此html片段会尝试与hclient通讯获取auth-token后post到AuthToken.autologin_token_post_url上
  string autologin_token_request_content = 4 [deprecated=true];

  // 当前登陆设备的版本信息
  string device_version = 5;

  // 登陆时服务器返回的token
  string token = 6;
}


message DeviceID {
  string id = 1;
}

message BoxInfo {
  // 中心化服务器地址, 默认为origin.lazycat.cloud
  string origin_server = 1;

  // fc03:1136:38/40地址
  string virtual_ip = 2;

  // p2p节点id
  string box_id = 3;

  // 注册到origin-server内的名称
  string box_name = 4;

  // 从origin-server获取到的域名
  string box_domain = 5;

  // 证书管理器已经就续
  bool cert_ready = 6;

  // PEM格式的盒子证书, 作为盒子系统其他app cert的CA证书。
  string box_cert = 7;
}

message DomainCertRequest {
  string domain = 1;
}
message DomainCertReply {
  string cert = 1;
  string key = 2;

  bytes ocsp = 3;
}


message Device {
  // 设备的唯一ID
  string udid = 7;

  // 此设备当前是否连接到盒子
  bool is_online = 2;

  // 因为device api的监听端口可能会变化，所以此url有效性不会太长
  string device_api_url = 3;

  // 设备名称
  string name = 4;

  // 设备型号
  string model = 5;

  // 设备绑定时间
  google.protobuf.Timestamp binding_time = 6;


  // TODO 待删除, 上层不应该感知peer_id
  string peer_id = 1 [deprecated=true];

  // 设备是否是移动平台
  // 此字段应该由上层代码自行分析
  bool is_mobile = 8 [deprecated=true];
}

message ListDeviceRequest {
  string uid = 1;
}

message ListDeviceReply {
  repeated Device devices = 1;
}

message UserID {
  string uid = 1;
}

enum Role {
  NORMAL = 0;
  ADMIN = 1;
}

message ChangeRoleReqeust{
  string uid = 1;
  Role role = 2;
}

message QueryRoleReply {
  string uid = 1;
  Role role = 2;
}


message ResetPasswordRequest{
  string uid = 1;
  reserved 2;
  string new_password = 3;
}

message DeleteUserRequest {
  string uid = 1;
}

message CreateUserRequest{
  string uid = 1;
  string password = 2;
  Role role = 3;
}


message CheckPasswordRequest{
  string uid = 1;
  string password = 2;
}

message ClearLoginSessionRequest {
  // 对此UID下的所有设备进行处理
  string uid = 1;

  // 但不对以下设备进行操作
  repeated string exclude_devices = 2;
}
message ClearLoginSessionReply {}

message ChangeTrustEndDeviceRequest{
  string uid = 1;

  string cid = 2; //如果是Add,则此字段内容应该为合法的PeerID，若为Del则应该是device_id

  enum Action {
    Add = 0;
    Del = 1;
  }
  Action action = 3;
}
message ChangeTrustEndDeviceReply{}


// 此message的字段需要和hportal/apis/boxapi/common.proto中的BoxSystemStatus保持同步
message UpdateBoxSystemStatusRequest {
  enum SysStatus {
    // 系统正在启动中
    Booting = 0;

    // 处于正常可用状态
    // 一般此状态下service_url应该设置为https://$boxdomain
    // proxy_the_service_url和only_admin_can_access_service_url都设置为false
    Normal = 1;

    // 处于异常状态，具体原因可读取ExceptionReason
    // 一般此状态下service_url需要特殊设置且
    // proxy_the_service_url和only_admin_can_access_service_url都设置为true
    Exception = 2;
  }

  enum ExceptionReason {
    // 其他原因
    Unknown = 0;

    // 等待加密数据盘被解密
    WaitDataDiskDecryption = 1;

    // 磁盘未初始化
    DataDiskNotInit = 2;
  }

  SysStatus status = 1;

  string service_url = 2;

  optional ExceptionReason exception_reason = 3;

  // 若为true, 在hclient侧生成一个临时的[fc03:1136:3800::1]:$x地址提供给客户端访问.
  // 具体会体现在shellapi.proto:BoxInfo.BoxHomeUrl上
  bool proxy_the_service_url = 4;

  // 在proxy_the_service_url=true时，支持设置是否仅管理员用户可以访问service_url
  // 此处的权限管控仅是网络传输层面,service_url本身需要做基本的网络隔离，比如使用unix socket协议
  bool only_admin_can_access_service_url = 5;
}

message UpdateBoxSystemStatusResponse{}

message SetupHServerRequest {
  string origin_server = 1;
  string box_name = 2;
  string username = 3;
  string password = 4;
}
message SetupHServerReply {
  bool ok = 1;
  string reason = 2;
}

message ResetHServerRequest {
  string origin_server = 1;
}
message ResetHServerReply {
}
