syntax = "proto3";

package cloud.lazycat.apis.sys;
import "google/protobuf/empty.proto";

option go_package = "/sys";

service OSUpgradeService {
  // 获取当前系统的版本状态
  rpc Local(google.protobuf.Empty) returns (LocalSystemVersionInfo) {}

  // 获取远程系统的版本状态
  rpc Remote(google.protobuf.Empty) returns (RemoteSystemVersionInfo) {}

  // 开始下载某个版本（非阻塞）
  rpc Download(SystemVersion) returns (google.protobuf.Empty) {}

  // 获取下载进度
  rpc Progress(google.protobuf.Empty) returns (UpgradeProgressInfo) {}

  // 切换到某个版本（需要重启生效）
  rpc Switch(SystemVersion) returns (google.protobuf.Empty) {}

  // 重启
  rpc Reboot(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

message LocalSystemVersionInfo {
  // 当前正在运行的系统版本与下一次重启的系统版本，两者通常是一样的
  //    更新之后，会改变 rebootVersion 的值从而两者不一样，表示需要重启才能生效
  string currentVersion = 1;
  string rebootVersion = 2;

  // 当前磁盘中所有版本列表（由于产品设计上只允许切换到最新版本，该字段仅供调试）
  repeated string versions = 3;
}

message RemoteSystemVersionInfo {
  // 最新版本
  //     需要对比该字段与当前运行的版本是否一致来确定当前系统是否是最新的
  string latestVersion = 1;

  // 线上可下载的所有版本列表，按顺序最新版本在前（由于产品设计上只下载最新版本，该字段仅暂时保留）
  repeated string versions = 3;
}

message UpgradeProgressInfo {
  // 正在下载的系统版本，（为空表示没有正在下载的进度，后面所有字段都没有意义）
  string version = 1;

  // 已下载的大小（字节）
  int64 complete = 2;

  // 总需要下载的大小（字节）
  int64 total = 3;

  // 是否已下载完成（若发生错误，则该值永远不可能为 true）
  //     在实际使用时需要不停地轮循请求检查 completed 和 error 这两个字段
  bool completed = 4;

  // 错误信息（在没有错误时该值为空）
  string error = 5;
}

message SystemVersion {
  string version = 1;
}
