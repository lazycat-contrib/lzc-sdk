syntax = "proto3";

package cloud.lazycat.apis.sys;

import "google/protobuf/empty.proto";

option go_package = "gitee.com/linakesi/lzc-sdk/lang/go/sys";

service OSSnapshotService {

    // 添加快照备份池（必须是已存在的 ZFS 池）
    rpc BackupPoolAdd(SnapshotBackupPoolRequest) returns (google.protobuf.Empty) {}

    // 移除快照备份池（对应 ZFS 池不会被删除）
    rpc BackupPoolDel(SnapshotBackupPoolRequest) returns (google.protobuf.Empty) {}

    // 列举已注册的快照备份池
    rpc BackupPoolList(google.protobuf.Empty) returns (SnapshotBackupPoolListResponse) {}

    // 创建数据集并挂载到指定路径（若已存在，不会重复创建）
    rpc DatasetAdd(SnapshotDatasetRequest) returns (google.protobuf.Empty) {}

    // 删除数据集（及其所有快照）
    rpc DatasetDel(SnapshotDatasetRequest) returns (google.protobuf.Empty) {}

    // 列举所有数据集
    rpc DatasetList(google.protobuf.Empty) returns (SnapshotDatasetListResponse) {}

    // 删除备份池中指定数据集（及其所有快照）
    rpc DatasetBackupDel(SnapshotDatasetBackupRequest) returns (google.protobuf.Empty) {}

    // 列举指定备份池中的所有数据集
    rpc DatasetBackupList(SnapshotBackupPoolRequest) returns (SnapshotDatasetListResponse) {}

    // 为指定数据集创建快照（同一个数据集下的快照名称不能重复）
    rpc SnapshotAdd(SnapshotRequest) returns (google.protobuf.Empty) {}

    // 根据名称删除指定数据集中的一个快照
    rpc SnapshotDel(SnapshotRequest) returns (google.protobuf.Empty) {}

    // 列举指定数据集下所有快照
    rpc SnapshotList(SnapshotDatasetRequest) returns (SnapshotListResponse) {}

    // 将数据集回滚到指定快照的状态（数据集中较新的快照会被丢弃）
    rpc SnapshotRestore(SnapshotRequest) returns (google.protobuf.Empty) {}

    // 备份快照到已注册的备份池（若对应数据集不存在，则会自动创建）
    rpc SnapshotBackupAdd(SnapshotBackupTransferRequest) returns (SnapshotBackupTransferResponse) {}

    // 将指定数据集快照从备份池中移除
    rpc SnapshotBackupDel(SnapshotBackupRequest) returns (google.protobuf.Empty) {}

    // 列举指定备份池中某个数据集的快照
    rpc SnapshotBackupList(SnapshotBackupListRequest) returns (SnapshotListResponse) {}

    // 将某个快照备份还原
    rpc SnapshotBackupRestore(SnapshotBackupTransferRequest) returns (SnapshotBackupTransferResponse) {}

    // 获取当前运行状态
    rpc GetStatus(google.protobuf.Empty) returns (SnapshotStatusResponse) {}

    // 停止当前正在进行的传输任务
    rpc StopTransfer(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

enum SnapshotManagerStatus {
    Stopped = 0;
    Running = 1;
}

enum SnapshotTransferMode {
    Normal = 0;
    // 若存在可恢复的传输任务，是否不尝试恢复，重新传输
    NoResume = 1;
    // 不进行传输，只预估传输的数据量
    DryRun = 2;
}

message SnapshotBackupPoolRequest {
    // 用于备份的 ZFS 池的名称
    string PoolName = 1;
}

message SnapshotBackupPoolListResponse {
    repeated string PoolNameList = 1;
}

message SnapshotDatasetRequest {
    // 数据集挂载点的绝对路径。
    // 对应的数据集名称会根据路径自动生成，无需客户端关注
    string DatasetPath = 1;
}

message SnapshotDatasetBackupRequest {
    string PoolName = 1;
    string DatasetPath = 2;
}

message SnapshotDatasetDesc {
    string Path = 1;
    // 数据集自身占用的存储空间大小
    uint64 BytesUsed = 2;
    // 数据集的快照占用的存储空间大小
    uint64 SnapshotBytesUsed = 3;
    uint64 CreatedAt = 4;
}

message SnapshotDatasetListResponse {
    repeated SnapshotDatasetDesc DatasetList = 1;
}

message SnapshotRequest {
    string DatasetPath = 1;
    // 快照名称（"@" 之后的部分）
    string SnapshotName = 2;
}

message SnapshotDesc {
    string Name = 1;
    uint64 BytesUsed = 2;
    uint64 CreatedAt = 3;
} 

message SnapshotListResponse {
    repeated SnapshotDesc SnapshotList = 1;
}

message SnapshotBackupRequest {
    string PoolName = 1;
    string DatasetPath = 2;
    string SnapshotName = 3;
}

message SnapshotBackupTransferRequest {
    string PoolName = 1;
    string DatasetPath = 2;
    string SnapshotName = 3;
    SnapshotTransferMode TransferMode = 4;
}

message SnapshotBackupTransferResponse {
    // 若存在可恢复的传输任务，则为已传输的数据量
    // 当 TransferMode 为 NoResume 时，忽略该字段
    uint64 BytesSent = 1;
    uint64 BytesTotal = 2;
}

message SnapshotBackupListRequest {
    string PoolName = 1;
    string DatasetPath = 2;
}

message SnapshotStatusResponse {
    SnapshotManagerStatus Status = 1;
    // 最近一次传输任务中，已传输的数据量
    uint64 BytesSent = 2;
    // 最近一次传输任务中，预估的总数据量。
    // 实际需要传输的数据量一般会略小于该数值。判断传输任务是否完成，以 Status 字段为准
    uint64 BytesTotal = 3;
}
