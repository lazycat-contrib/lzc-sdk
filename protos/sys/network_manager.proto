syntax = "proto3";

package cloud.lazycat.apis.sys;

import "google/protobuf/empty.proto";

option go_package = "gitee.com/linakesi/lzc-sdk/lang/go/sys";


service NetworkManager {
  // 获取网络设备的状态（是否已连接，连接了哪个）
  rpc Status(google.protobuf.Empty) returns (NetworkDeviceStatusInfo) {}

  // Scan 扫描附近wifi热点信息，扫描结果在内部缓存里（阻塞，可能耗费数秒）
  rpc WifiScan(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // List 列出内部缓存中的 wifi 列表
  rpc WifiList(google.protobuf.Empty) returns (AccessPointInfoList) {}

  // 连接一个 wifi 热点
  //   连接成功后会把其它配置设为非自动连接，把自己设为自动
  //   连接失败会删除已保存的配置
  rpc WifiConnect(WifiConnectInfo) returns (WifiConnectReply) {}

  // 手动添加和连接一个 wifi 热点配置（用于连接隐藏网络）
  rpc WifiConfigAdd(WifiConfigInfo) returns (WifiConnectReply) {}
}

message AccessPointInfo {
  // 热点的网卡 mac 地址（由于 ssid 可能重复，所以将此字段作为整个列表的 index）
  string bssid = 1;

  // 热点的 ssid
  string ssid = 2;

  // 信号强度（范围 0 <= signal <= 100）
  int32 signal = 3;

  // 是否需要密码
  bool security = 4;

  // 是否已连接
  bool connected = 5;

  // 是否已保存密码
  bool saved = 6;

  // 是否自动连接
  bool auto_connected = 7;
}

message AccessPointInfoList {
  repeated AccessPointInfo list = 1;
}

message NetworkDeviceStatusInfo {
  // 已假设只有一块 wifi 网卡

  // 是否已连接
  bool connected = 1;

  // 若已连接，则该字段表示已连接的 wifi 的信息
  AccessPointInfo info = 2;
}

message WifiConnectInfo {
  // bssid 和 ssid 指定其一即可
  string bssid = 1;
  string ssid = 2;

  string password = 3;
}

enum KeyMgmt {
  None = 0;
  WEP = 1;  // WEP  （最老的协议了，目前几乎没人用）
  WPA_PSK = 2;  // WPA/WPA2-Personal  （一般大概率都是这个，应当作为默认值）
  SAE = 3;  // WPA3-Personal  （新一代协议，用的人比较少）
}

message WifiConfigInfo {
  string ssid = 1;
  string password = 2;
  KeyMgmt key_mgmt = 3;
}

enum WifiConnectResult {
  Success = 0;
  NoSuchBssid = 1;
  WrongPassword = 2;
  UnknownError = 3;
}

message WifiConnectReply {
    WifiConnectResult result = 1;
}
