syntax = "proto3";

package cloud.lazycat.apis.sys;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "gitee.com/linakesi/lzc-sdk/lang/go/sys";

// 在 lzc-hal 中实现

// 重新设计这个

service HalService {
  // 目前只用到了这两个
  rpc SetPLed(PLedState) returns (google.protobuf.Empty) {}
  rpc GetPLed(google.protobuf.Empty) returns (PLedState) {}
  // 续命 Button 监测，续命到 当前时间+30s
  rpc ActivateButtonMonitor(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  // 得到最近 Button 事件队列，最近 30s 内
  rpc GetButtonEventQueue(google.protobuf.Empty) returns (ButtonEventQueue) {}
}

message PLedState {
  bool enabled = 1;
}

message ButtonEventQueue {
  enum ButtonEventKind {
    // 按钮被按下
    BUTTON_DOWN = 0;

    // 按钮被松开
    BUTTON_UP = 1;

    // 按钮被点击（按下后被快速松开，两次点击间隔不超过 500 毫秒）
    // 当按钮被点击时，会先产生 BUTTON_DOWN 事件，然后产生 BUTTON_UP 事件，最后产生 BUTTON_CLICK 事件
    // 如果只需要监听按钮被点击事件，可以忽略 BUTTON_DOWN 和 BUTTON_UP 事件
    // 如果需要判断按钮是单击还是双击，需要自行等待 500 毫秒，如果没有收到 BUTTON_DOUBLE_CLICK 事件，则表示是单击
    BUTTON_CLICK = 2;

    // 按钮被双击（两次点击间隔不超过 500 毫秒）
    // 当按钮被双击时，会产生两次 BUTTON_CLICK 事件后才产生 BUTTON_DOUBLE_CLICK 事件
    // 如果只需要监听按钮被双击事件，可以忽略 BUTTON_CLICK、BUTTON_DOWN、BUTTON_UP 事件
    BUTTON_DOUBLE_CLICK = 3;

    // 按钮被长按（按下时间超过 2 秒还未松开）
    // 按钮被长按的事件过程：会先产生 BUTTON_DOWN 事件，然后产生 BUTTON_LONG_PRESS 事件，等到按钮被松开时，会产生 BUTTON_UP 事件
    BUTTON_LONG_PRESS = 4;

    // 按钮被长按（按下时间超过 10 秒还未松开）
    // 按钮被长按超过10秒的事件过程，会先产生 BUTTON_DOWN 事件，然后2秒后产生 BUTTON_LONG_PRESS 事件，然后8秒后产生 BUTTON_LONG_PRESS_10S 事件，等到按钮被松开时，会产生 BUTTON_UP 事件
    BUTTON_LONG_PRESS_10S = 5;
  }
  message ButtonEvent {
    ButtonEventKind kind = 1;
    google.protobuf.Timestamp timestamp = 2;
  }
  repeated ButtonEvent queue = 1;
}
