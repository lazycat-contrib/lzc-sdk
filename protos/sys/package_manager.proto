syntax = "proto3";

package cloud.lazycat.apis.sys;

import "google/protobuf/empty.proto";
import "common/security_context.proto";

option go_package = "gitee.com/linakesi/lzc-sdk/lang/go/sys";

/*
  - pkg代表一个静态的lpk文件
  - app代表一个安装后的应用(正在运行或没有运行)，是由某个pkg进行部署后产生的
  - 除了app外，系统插件、系统服务等也会以pkg的形式进行传播、部署
*/

service PackageManager {
  // 根据 URL 和 校验码（可选），安装应用
  rpc Install(InstallRequest) returns (google.protobuf.Empty) {
    option (cloud.lazycat.apis.common.scontext).require_permissions = INSTALL_PACKAGE;
  }

  // 根据 AppId 卸载应用
  rpc Uninstall(UninstallRequest) returns (google.protobuf.Empty) {
    option (cloud.lazycat.apis.common.scontext).require_permissions = INSTALL_PACKAGE;
  }

  // 休眠应用
  rpc Pause(AppInstance) returns (google.protobuf.Empty) {}

  // 恢复应用
  rpc Resume(AppInstance) returns (google.protobuf.Empty) {}

  // 根据 AppId 清除缓存
  rpc ClearCache(Appid) returns (google.protobuf.Empty) {}

  // 查询用户安装的特定应用的详情
  rpc QueryApplication(QueryApplicationRequest) returns (QueryApplicationResponse) {}

  // 获取应用占用的存储空间详情
  rpc QueryAppStorageUsage(QueryAppStorageUsageRequest) returns (AppStorageUsage) {}

  // 设置某个用户是否可以安装应用
  rpc SetUserPermissions(UserPermission) returns (google.protobuf.Empty) {
    option (cloud.lazycat.apis.common.scontext).require_user_class = ADMIN_USER;
  }

  // 获取某个用户安装应用的权限
  rpc GetUserPermissions(GetUserPermissionsRequest) returns (UserPermission) {
    option (cloud.lazycat.apis.common.scontext).require_user_class = ADMIN_USER;
  }

  // 暂停下载特定应用
  rpc PauseAppDownload(Appid) returns (google.protobuf.Empty) {
    option (cloud.lazycat.apis.common.scontext).require_permissions = INSTALL_PACKAGE;
  }

  // 获取用某个应用打开某个文件的链接
  rpc GetActionURL(GetActionURLRequest) returns (GetActionURLResponse) {}

  // 列出可以打开指定 MIME 类型的应用
  rpc ListFileHandler(ListFileHandlerRequest) returns (ListFileHandlerResponse) {}
}

message PkgURL {
  // 内部地址
  //     http://pkgm.api-server.lzcapp/tmp/xxxx-0.2.1.lpk
  // 或外网地址
  //     https://repo.lazycat.cloud/a/c/accc-0.2.1.lpk
  string url = 1;

  // pkg对应的sha256值，若不为空，
  // 1. 本地有对应包的缓存，则会直接使用缓存
  // 2. 本地若没有缓存，则会从 url 下载包，并校验包的 sha256 值
  string sha256 = 2;
}

message InstallRequest {
  // 应用的 appid
  string appid = 1;

  // 内部地址
  //     http://pkgm.api-server.lzcapp/tmp/xxxx-0.2.1.lpk
  // 或外网地址
  //     https://repo.lazycat.cloud/a/c/accc-0.2.1.lpk
  string url = 2;

  // pkg对应的sha256值，若不为空，
  // 1. 本地有对应包的缓存，则会直接使用缓存
  // 2. 本地若没有缓存，则会从 url 下载包，并校验包的 sha256 值
  string sha256 = 3;

  optional string subdomain = 4;
}

message UninstallRequest {
  string appid = 1;

  // 卸载后是否清空 data 目录 (/lzcapp/var)
  bool clear_data = 2;
}

enum AppStatus {
  NotInstalled = 0;
  Downloading = 1;
  Paused = 2;
  Installing = 3;
  Installed = 4;
  Failed = 5;
}

message AppDownloadProgress {
  // 当前下载了的字节
  uint64 current = 1;
  // LPK文件大小总字节
  uint64 total = 2;
}

message AppInfo {
  string appid = 1;

  // 应用当前的状态
  AppStatus status = 2;

  optional string version = 3;

  optional string title = 4;

  optional string description = 5;

  // 应用图标所在的 url，如 https://$boxdomain/sys/icons/$appid.png
  // 若应用无图标，则为空
  optional string icon = 6;

  // 应用所在的域名，如 app.box.heiyu.space
  optional string domain = 7;

  // 应用下载的进度（如果不是正在下载应用，则为空）
  optional AppDownloadProgress download_progress = 8;

  // 应用是否是预装应用（预装应用不可卸载）
  optional bool builtin = 9;

  // 如果应用状态为安装失败，失败的原因（如果状态不是失败则为空）
  optional string error_reason = 10;
}

message QueryApplicationRequest {
  // 需要查询的 AppId 的列表，如果列表为空，则查询所有的应用
  repeated string appid_list = 1;
}

message QueryApplicationResponse {
  repeated AppInfo info_list = 1;
}

message QueryAppStorageUsageRequest {
  string appid = 1;

  bool need_pkg = 2;
  bool need_data = 3;
  bool need_cache = 4;
  bool need_tmp = 5;

  bool need_userdata = 6;

  bool need_image = 7;
}

message AppStorageUsage {
  // 应用本身占用的大小 (/lzcapp/pkg)
  uint64 pkg = 1;

  // 应用数据的大小 (所有用户产生的应用数据大小) (/lzcapp/var)
  uint64 data = 2;

  // 应用缓存的大小 (/lzcapp/cache)
  uint64 cache = 3;

  // 应用临时文件的大小 (/tmp)
  uint64 tmp = 4;

  // 各个用户产生的应用数据大小 (/lzcapp/var/userdata/$uid)
  map<string, uint64> userdata = 5;

  uint64 image = 6;
}

message UserPermission {
  // 用户的 uid
  string uid = 1;

  // 是否允许 uid 安装应用
  bool allow_install_app = 2;
}

message GetUserPermissionsRequest {
  // 用户的 uid
  string uid = 1;
}

message Appid {
  string appid = 1;
}

enum Action {
  Open = 0;
  New = 1;
  Download = 2;
}

message GetActionURLRequest {
  string path = 1;
  string appid = 2;
  Action action = 3;
}

message GetActionURLResponse {
  string url = 1;
}

message ListFileHandlerRequest {
  string mimetype = 1;
}

message FileHandlerInfo {
  string appid = 1;
  string title = 2;
  string icon = 3;
}

message ListFileHandlerResponse {
  repeated FileHandlerInfo info_list = 1;
}

message AppInstance {
  string appid = 1;
  string uid = 2;
}
