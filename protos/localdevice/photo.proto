syntax = "proto3";

package cloud.lazycat.apis.localdevice;

option go_package = "/localdevice";

import "google/protobuf/timestamp.proto";

service PhotoLibrary {
  // 列举所有的系统相册
  rpc ListAlbums(ListAlbumsRequest) returns (ListAlbumsReply) {}

  // 存储一张图片到某个相册中
  rpc PutPhoto(PutPhotoRequest) returns (PutPhotoReply) {}

  rpc DeletePhoto(DeletePhotoRequest) returns (DeletePhotoReply) {}

  // 枚举具体相册中的图片元信息
  rpc ListPhotoMetas(ListPhotoMetasRequest) returns (stream PhotoMeta) {}

  rpc QueryPhoto(QueryPhotoRequest) returns (PhotoMeta) {}

  // PhotoHashSet的大小是不固定的，可能超出protobuf但message的限制(4MB)，因此以stream
  // 的形式返回。
  // 目前有两个使用场景
  // 1. 浏览器访问此接口获取某个图片是否在本地存在
  // 2. 服务端获取此集合并与服务器中存在的图片进行对比，获取未同步到服务器中的图片ID集合
  rpc QueryPhotoHash(QueryPhotoHashRequest) returns (stream PhotoHashSet) {}
}

message QueryPhotoHashRequest {
  // changed_after语义为: changed_after之后的新增文件都会加入返回的集合里,
  // 与文件本身的modify time无关。
  google.protobuf.Timestamp changed_after = 1;
}

message PhotoHashSet {
  // hash --> id
  map<string, string> entry = 1;
}


message QueryPhotoRequest {
  string id = 1;
}

message PutPhotoReply {
  // 新添加图片的id
  string id = 1;
}

message DeletePhotoReply {
  // 删除失败的图片id
  repeated string failed_id = 1;
}

message DeletePhotoRequest {
  repeated string id = 1;
}

message ListPhotoMetasRequest {
  // 相册ID, 若为空，则表示返回所有相册中的图片
  repeated string album_ids = 1;

  int32 thumbnail_width = 2;
  int32 thumbnail_height = 3;

  bool need_file_name = 4;
  bool need_album_ids = 5;
}

message PhotoMeta {
  string id = 1;
  string photo_url = 2; //浏览器直接可以使用的url, 可能是device domain下的一个文件或是一个data url
  string thumbnail_url = 3;
  string width = 4;
  string height = 5;
  repeated string album_ids = 6;
  int64    size = 7;
  string mime = 8;
  string hash = 9;

  optional string file_name = 10;
  optional google.protobuf.Timestamp creation_date = 11;
  optional float latitude = 12;
  optional float longitude = 13;
  optional google.protobuf.Timestamp taken_date = 14;

}

message Album {
  string id = 1;
  string title = 2;
  int32 image_count = 3;
  int32 video_count = 4;
  string cover_image_url = 5;
}

message ListAlbumsRequest {
   optional int32 thumbnail_width = 1;
   optional int32 thumbnail_height = 2;
   optional int32 thumbnail_choose_way = 3;
}
message ListAlbumsReply {
  repeated Album albums = 1;
}

message PutPhotoRequest {
  string album_id = 1;

  // 图片路径, 支持dataurl
  string url = 2;

  optional string file_name = 3;
}

message PhotoMetas {
  repeated PhotoMeta photoMetas = 1;
}