// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sys/OS_upgrader.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Cloud_Lazycat_Apis_Sys_DownloaderStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case ready // = 0
  case downloading // = 1
  case paused // = 2
  case completed // = 3
  case error // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .ready
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ready
    case 1: self = .downloading
    case 2: self = .paused
    case 3: self = .completed
    case 4: self = .error
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ready: return 0
    case .downloading: return 1
    case .paused: return 2
    case .completed: return 3
    case .error: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Lazycat_Apis_Sys_DownloaderStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Sys_DownloaderStatus] = [
    .ready,
    .downloading,
    .paused,
    .completed,
    .error,
  ]
}

#endif  // swift(>=4.2)

public struct Cloud_Lazycat_Apis_Sys_LocalSystemVersionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 当前正在运行的系统版本与下一次重启的系统版本，两者通常是一样的
  ///    更新之后，会改变 rebootVersion 的值从而两者不一样，表示需要重启才能生效
  public var currentVersion: String = String()

  public var rebootVersion: String = String()

  /// 当前磁盘中所有版本列表（由于产品设计上只允许切换到最新版本，该字段仅供调试）
  public var versions: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Sys_RemoteSystemVersionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 最新版本
  ///     需要对比该字段与当前运行的版本是否一致来确定当前系统是否是最新的
  public var latestVersion: String = String()

  /// 线上可下载的所有版本列表，按顺序最新版本在前（由于产品设计上只下载最新版本，该字段仅暂时保留）
  public var versions: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Sys_UpgradeProgressInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 正在下载的系统版本，（为空表示没有正在下载的进度，后面所有字段都没有意义）
  public var version: String = String()

  public var status: Cloud_Lazycat_Apis_Sys_DownloaderStatus = .ready

  /// 已下载的大小（字节）
  public var complete: Int64 = 0

  /// 总需要下载的大小（字节）
  public var total: Int64 = 0

  /// 错误信息（在没有错误时该值为空）
  public var error: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Sys_SystemVersion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Lazycat_Apis_Sys_DownloaderStatus: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Sys_LocalSystemVersionInfo: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Sys_RemoteSystemVersionInfo: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Sys_UpgradeProgressInfo: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Sys_SystemVersion: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.lazycat.apis.sys"

extension Cloud_Lazycat_Apis_Sys_DownloaderStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ready"),
    1: .same(proto: "downloading"),
    2: .same(proto: "paused"),
    3: .same(proto: "completed"),
    4: .same(proto: "error"),
  ]
}

extension Cloud_Lazycat_Apis_Sys_LocalSystemVersionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LocalSystemVersionInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "currentVersion"),
    2: .same(proto: "rebootVersion"),
    3: .same(proto: "versions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.currentVersion) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.rebootVersion) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.versions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.currentVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.currentVersion, fieldNumber: 1)
    }
    if !self.rebootVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.rebootVersion, fieldNumber: 2)
    }
    if !self.versions.isEmpty {
      try visitor.visitRepeatedStringField(value: self.versions, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Sys_LocalSystemVersionInfo, rhs: Cloud_Lazycat_Apis_Sys_LocalSystemVersionInfo) -> Bool {
    if lhs.currentVersion != rhs.currentVersion {return false}
    if lhs.rebootVersion != rhs.rebootVersion {return false}
    if lhs.versions != rhs.versions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Sys_RemoteSystemVersionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoteSystemVersionInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latestVersion"),
    3: .same(proto: "versions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.latestVersion) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.versions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.latestVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.latestVersion, fieldNumber: 1)
    }
    if !self.versions.isEmpty {
      try visitor.visitRepeatedStringField(value: self.versions, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Sys_RemoteSystemVersionInfo, rhs: Cloud_Lazycat_Apis_Sys_RemoteSystemVersionInfo) -> Bool {
    if lhs.latestVersion != rhs.latestVersion {return false}
    if lhs.versions != rhs.versions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Sys_UpgradeProgressInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpgradeProgressInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "status"),
    3: .same(proto: "complete"),
    4: .same(proto: "total"),
    5: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.complete) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.total) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
    }
    if self.status != .ready {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.complete != 0 {
      try visitor.visitSingularInt64Field(value: self.complete, fieldNumber: 3)
    }
    if self.total != 0 {
      try visitor.visitSingularInt64Field(value: self.total, fieldNumber: 4)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Sys_UpgradeProgressInfo, rhs: Cloud_Lazycat_Apis_Sys_UpgradeProgressInfo) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.status != rhs.status {return false}
    if lhs.complete != rhs.complete {return false}
    if lhs.total != rhs.total {return false}
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Sys_SystemVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SystemVersion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.version) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Sys_SystemVersion, rhs: Cloud_Lazycat_Apis_Sys_SystemVersion) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
