// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sys/snapd.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Cloud_Lazycat_Apis_Sys_SnapdAutoStrategy: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 修改该配置项时，此值表示不改变当前配置值
  case `default` // = 0

  /// 不自动快照（但超过生命周期的历史快照仍会被清理）
  case disabled // = 1

  /// 自动快照，但不自动备份
  case snapOnly // = 2

  /// 自动快照并备份
  case snapAndBackup // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .default
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .default
    case 1: self = .disabled
    case 2: self = .snapOnly
    case 3: self = .snapAndBackup
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .default: return 0
    case .disabled: return 1
    case .snapOnly: return 2
    case .snapAndBackup: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Lazycat_Apis_Sys_SnapdAutoStrategy: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Sys_SnapdAutoStrategy] = [
    .default,
    .disabled,
    .snapOnly,
    .snapAndBackup,
  ]
}

#endif  // swift(>=4.2)

public struct Cloud_Lazycat_Apis_Sys_SnapdEnableRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var targetID: String = String()

  /// 需要启用备份的路径列表
  public var pathList: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Sys_SnapdTargetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var targetID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Sys_SnapdConf {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 自动快照策略
  public var autoStrategy: Cloud_Lazycat_Apis_Sys_SnapdAutoStrategy = .default

  /// 自动快照的时间间隔，单位为分钟
  public var autoSnapInterval: UInt32 = 0

  /// 自动快照保留的时长，单位为分钟。超出的快照会被自动删除
  public var autoSnapLifetime: UInt32 = 0

  /// 自动备份快照保留的时长，单位为分钟。当单个备份池中的备份超过该数量时，旧备份将自动被删除
  public var autoBackupLifetime: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Sys_SnapdConfSetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var targetID: String = String()

  public var config: Cloud_Lazycat_Apis_Sys_SnapdConf {
    get {return _config ?? Cloud_Lazycat_Apis_Sys_SnapdConf()}
    set {_config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  public var hasConfig: Bool {return self._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  public mutating func clearConfig() {self._config = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _config: Cloud_Lazycat_Apis_Sys_SnapdConf? = nil
}

public struct Cloud_Lazycat_Apis_Sys_SnapdListSnapRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var targetID: String = String()

  /// 为空则查看盒子数据盘上快照，否则查看指定备份池中快照
  public var backupPool: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Sys_SnapdListSnapResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var snapshotList: [Cloud_Lazycat_Apis_Sys_SnapshotDesc] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Sys_SnapdSnapRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var targetID: String = String()

  /// SnapdTakeSnap: 不为空，则同时将快照备份到指定备份池
  /// SnapdDelSnap: 为空则删除盒子内快照，否则删除备份池中快照
  /// SnapdRestoreSnap：为空则回滚盒子内快照，否则从备份池中读取快照并还原
  public var backupPool: String = String()

  public var snapName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Lazycat_Apis_Sys_SnapdAutoStrategy: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Sys_SnapdEnableRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Sys_SnapdTargetRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Sys_SnapdConf: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Sys_SnapdConfSetRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Sys_SnapdListSnapRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Sys_SnapdListSnapResponse: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Sys_SnapdSnapRequest: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.lazycat.apis.sys"

extension Cloud_Lazycat_Apis_Sys_SnapdAutoStrategy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Default"),
    1: .same(proto: "Disabled"),
    2: .same(proto: "SnapOnly"),
    3: .same(proto: "SnapAndBackup"),
  ]
}

extension Cloud_Lazycat_Apis_Sys_SnapdEnableRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SnapdEnableRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TargetId"),
    2: .same(proto: "PathList"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.targetID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.pathList) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 1)
    }
    if !self.pathList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.pathList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Sys_SnapdEnableRequest, rhs: Cloud_Lazycat_Apis_Sys_SnapdEnableRequest) -> Bool {
    if lhs.targetID != rhs.targetID {return false}
    if lhs.pathList != rhs.pathList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Sys_SnapdTargetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SnapdTargetRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TargetId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.targetID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Sys_SnapdTargetRequest, rhs: Cloud_Lazycat_Apis_Sys_SnapdTargetRequest) -> Bool {
    if lhs.targetID != rhs.targetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Sys_SnapdConf: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SnapdConf"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AutoStrategy"),
    2: .same(proto: "AutoSnapInterval"),
    3: .same(proto: "AutoSnapLifetime"),
    4: .same(proto: "AutoBackupLifetime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.autoStrategy) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.autoSnapInterval) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.autoSnapLifetime) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.autoBackupLifetime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.autoStrategy != .default {
      try visitor.visitSingularEnumField(value: self.autoStrategy, fieldNumber: 1)
    }
    if self.autoSnapInterval != 0 {
      try visitor.visitSingularUInt32Field(value: self.autoSnapInterval, fieldNumber: 2)
    }
    if self.autoSnapLifetime != 0 {
      try visitor.visitSingularUInt32Field(value: self.autoSnapLifetime, fieldNumber: 3)
    }
    if self.autoBackupLifetime != 0 {
      try visitor.visitSingularUInt32Field(value: self.autoBackupLifetime, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Sys_SnapdConf, rhs: Cloud_Lazycat_Apis_Sys_SnapdConf) -> Bool {
    if lhs.autoStrategy != rhs.autoStrategy {return false}
    if lhs.autoSnapInterval != rhs.autoSnapInterval {return false}
    if lhs.autoSnapLifetime != rhs.autoSnapLifetime {return false}
    if lhs.autoBackupLifetime != rhs.autoBackupLifetime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Sys_SnapdConfSetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SnapdConfSetRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TargetId"),
    2: .same(proto: "Config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.targetID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 1)
    }
    try { if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Sys_SnapdConfSetRequest, rhs: Cloud_Lazycat_Apis_Sys_SnapdConfSetRequest) -> Bool {
    if lhs.targetID != rhs.targetID {return false}
    if lhs._config != rhs._config {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Sys_SnapdListSnapRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SnapdListSnapRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TargetId"),
    2: .same(proto: "BackupPool"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.targetID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.backupPool) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 1)
    }
    if !self.backupPool.isEmpty {
      try visitor.visitSingularStringField(value: self.backupPool, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Sys_SnapdListSnapRequest, rhs: Cloud_Lazycat_Apis_Sys_SnapdListSnapRequest) -> Bool {
    if lhs.targetID != rhs.targetID {return false}
    if lhs.backupPool != rhs.backupPool {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Sys_SnapdListSnapResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SnapdListSnapResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "SnapshotList"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.snapshotList) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.snapshotList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.snapshotList, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Sys_SnapdListSnapResponse, rhs: Cloud_Lazycat_Apis_Sys_SnapdListSnapResponse) -> Bool {
    if lhs.snapshotList != rhs.snapshotList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Sys_SnapdSnapRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SnapdSnapRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TargetId"),
    2: .same(proto: "BackupPool"),
    3: .same(proto: "SnapName"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.targetID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.backupPool) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.snapName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 1)
    }
    if !self.backupPool.isEmpty {
      try visitor.visitSingularStringField(value: self.backupPool, fieldNumber: 2)
    }
    if !self.snapName.isEmpty {
      try visitor.visitSingularStringField(value: self.snapName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Sys_SnapdSnapRequest, rhs: Cloud_Lazycat_Apis_Sys_SnapdSnapRequest) -> Bool {
    if lhs.targetID != rhs.targetID {return false}
    if lhs.backupPool != rhs.backupPool {return false}
    if lhs.snapName != rhs.snapName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
