// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: localdevice/photo.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 查询照片信息的排序方式
public enum Cloud_Lazycat_Apis_Localdevice_PhotoMetasSortType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 创建时间降序
  case createDateDesc // = 0

  /// 拍照时间降序
  case takenDateDesc // = 1

  /// 创建时间升序
  case createDateAsc // = 2

  /// 拍摄时间升序
  case takenDateAsc // = 3

  /// 创建时间,拍摄时间降序
  case createTakenDesc // = 4

  /// 创建时间,拍摄时间升序
  case createTakenAsc // = 5

  /// 拍摄时间，创建时间 降序
  case tokenCreateDesc // = 6

  /// 拍摄时间，创建时间升序
  case tokenCreateAsc // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .createDateDesc
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .createDateDesc
    case 1: self = .takenDateDesc
    case 2: self = .createDateAsc
    case 3: self = .takenDateAsc
    case 4: self = .createTakenDesc
    case 5: self = .createTakenAsc
    case 6: self = .tokenCreateDesc
    case 7: self = .tokenCreateAsc
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .createDateDesc: return 0
    case .takenDateDesc: return 1
    case .createDateAsc: return 2
    case .takenDateAsc: return 3
    case .createTakenDesc: return 4
    case .createTakenAsc: return 5
    case .tokenCreateDesc: return 6
    case .tokenCreateAsc: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Lazycat_Apis_Localdevice_PhotoMetasSortType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Localdevice_PhotoMetasSortType] = [
    .createDateDesc,
    .takenDateDesc,
    .createDateAsc,
    .takenDateAsc,
    .createTakenDesc,
    .createTakenAsc,
    .tokenCreateDesc,
    .tokenCreateAsc,
  ]
}

#endif  // swift(>=4.2)

public struct Cloud_Lazycat_Apis_Localdevice_QueryPhotoHashRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// changed_after语义为: changed_after之后的新增文件都会加入返回的集合里,
  /// 与文件本身的modify time无关。
  public var changedAfter: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _changedAfter ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_changedAfter = newValue}
  }
  /// Returns true if `changedAfter` has been explicitly set.
  public var hasChangedAfter: Bool {return self._changedAfter != nil}
  /// Clears the value of `changedAfter`. Subsequent reads from it will return its default value.
  public mutating func clearChangedAfter() {self._changedAfter = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _changedAfter: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Cloud_Lazycat_Apis_Localdevice_PhotoHashSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// hash --> id
  public var entry: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Localdevice_QueryPhotoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Localdevice_PutPhotoReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 新添加图片的id
  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Localdevice_DeletePhotoReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 删除失败的图片id
  public var failedID: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Localdevice_DeletePhotoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Localdevice_ListPhotoMetasRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 相册ID, 若为空，则表示返回所有相册中的图片
  public var albumIds: [String] = []

  public var thumbnailWidth: Int32 = 0

  public var thumbnailHeight: Int32 = 0

  public var needFileName: Bool = false

  public var needAlbumIds: Bool = false

  /// 不填写默认按照创建时间降序排序
  public var stype: Cloud_Lazycat_Apis_Localdevice_PhotoMetasSortType {
    get {return _stype ?? .createDateDesc}
    set {_stype = newValue}
  }
  /// Returns true if `stype` has been explicitly set.
  public var hasStype: Bool {return self._stype != nil}
  /// Clears the value of `stype`. Subsequent reads from it will return its default value.
  public mutating func clearStype() {self._stype = nil}

  /// 查询第几页(不填写默认为第一页)
  public var pageNum: UInt32 {
    get {return _pageNum ?? 0}
    set {_pageNum = newValue}
  }
  /// Returns true if `pageNum` has been explicitly set.
  public var hasPageNum: Bool {return self._pageNum != nil}
  /// Clears the value of `pageNum`. Subsequent reads from it will return its default value.
  public mutating func clearPageNum() {self._pageNum = nil}

  /// （每页返回的数据条数，不填写将返回所有数据）
  public var pageSize: UInt32 {
    get {return _pageSize ?? 0}
    set {_pageSize = newValue}
  }
  /// Returns true if `pageSize` has been explicitly set.
  public var hasPageSize: Bool {return self._pageSize != nil}
  /// Clears the value of `pageSize`. Subsequent reads from it will return its default value.
  public mutating func clearPageSize() {self._pageSize = nil}

  /// 是否过滤视频 （默认false,照片和视频信息一起返回)
  public var isFilterVideo: Bool {
    get {return _isFilterVideo ?? false}
    set {_isFilterVideo = newValue}
  }
  /// Returns true if `isFilterVideo` has been explicitly set.
  public var hasIsFilterVideo: Bool {return self._isFilterVideo != nil}
  /// Clears the value of `isFilterVideo`. Subsequent reads from it will return its default value.
  public mutating func clearIsFilterVideo() {self._isFilterVideo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _stype: Cloud_Lazycat_Apis_Localdevice_PhotoMetasSortType? = nil
  fileprivate var _pageNum: UInt32? = nil
  fileprivate var _pageSize: UInt32? = nil
  fileprivate var _isFilterVideo: Bool? = nil
}

public struct Cloud_Lazycat_Apis_Localdevice_PhotoMeta {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  ///浏览器直接可以使用的url, 可能是device domain下的一个文件或是一个data url
  public var photoURL: String = String()

  public var thumbnailURL: String = String()

  public var width: String = String()

  public var height: String = String()

  public var albumIds: [String] = []

  public var size: Int64 = 0

  public var mime: String = String()

  public var hash: String = String()

  public var fileName: String {
    get {return _fileName ?? String()}
    set {_fileName = newValue}
  }
  /// Returns true if `fileName` has been explicitly set.
  public var hasFileName: Bool {return self._fileName != nil}
  /// Clears the value of `fileName`. Subsequent reads from it will return its default value.
  public mutating func clearFileName() {self._fileName = nil}

  public var creationDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _creationDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_creationDate = newValue}
  }
  /// Returns true if `creationDate` has been explicitly set.
  public var hasCreationDate: Bool {return self._creationDate != nil}
  /// Clears the value of `creationDate`. Subsequent reads from it will return its default value.
  public mutating func clearCreationDate() {self._creationDate = nil}

  public var latitude: Float {
    get {return _latitude ?? 0}
    set {_latitude = newValue}
  }
  /// Returns true if `latitude` has been explicitly set.
  public var hasLatitude: Bool {return self._latitude != nil}
  /// Clears the value of `latitude`. Subsequent reads from it will return its default value.
  public mutating func clearLatitude() {self._latitude = nil}

  public var longitude: Float {
    get {return _longitude ?? 0}
    set {_longitude = newValue}
  }
  /// Returns true if `longitude` has been explicitly set.
  public var hasLongitude: Bool {return self._longitude != nil}
  /// Clears the value of `longitude`. Subsequent reads from it will return its default value.
  public mutating func clearLongitude() {self._longitude = nil}

  public var takenDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _takenDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_takenDate = newValue}
  }
  /// Returns true if `takenDate` has been explicitly set.
  public var hasTakenDate: Bool {return self._takenDate != nil}
  /// Clears the value of `takenDate`. Subsequent reads from it will return its default value.
  public mutating func clearTakenDate() {self._takenDate = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _fileName: String? = nil
  fileprivate var _creationDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _latitude: Float? = nil
  fileprivate var _longitude: Float? = nil
  fileprivate var _takenDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Cloud_Lazycat_Apis_Localdevice_Album {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var title: String = String()

  public var imageCount: Int32 = 0

  public var videoCount: Int32 = 0

  public var coverImageURL: String = String()

  /// 封面文件(图）id
  public var coverImageID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Localdevice_ListAlbumsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var thumbnailWidth: Int32 {
    get {return _thumbnailWidth ?? 0}
    set {_thumbnailWidth = newValue}
  }
  /// Returns true if `thumbnailWidth` has been explicitly set.
  public var hasThumbnailWidth: Bool {return self._thumbnailWidth != nil}
  /// Clears the value of `thumbnailWidth`. Subsequent reads from it will return its default value.
  public mutating func clearThumbnailWidth() {self._thumbnailWidth = nil}

  public var thumbnailHeight: Int32 {
    get {return _thumbnailHeight ?? 0}
    set {_thumbnailHeight = newValue}
  }
  /// Returns true if `thumbnailHeight` has been explicitly set.
  public var hasThumbnailHeight: Bool {return self._thumbnailHeight != nil}
  /// Clears the value of `thumbnailHeight`. Subsequent reads from it will return its default value.
  public mutating func clearThumbnailHeight() {self._thumbnailHeight = nil}

  public var thumbnailChooseWay: Int32 {
    get {return _thumbnailChooseWay ?? 0}
    set {_thumbnailChooseWay = newValue}
  }
  /// Returns true if `thumbnailChooseWay` has been explicitly set.
  public var hasThumbnailChooseWay: Bool {return self._thumbnailChooseWay != nil}
  /// Clears the value of `thumbnailChooseWay`. Subsequent reads from it will return its default value.
  public mutating func clearThumbnailChooseWay() {self._thumbnailChooseWay = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _thumbnailWidth: Int32? = nil
  fileprivate var _thumbnailHeight: Int32? = nil
  fileprivate var _thumbnailChooseWay: Int32? = nil
}

public struct Cloud_Lazycat_Apis_Localdevice_ListAlbumsReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var albums: [Cloud_Lazycat_Apis_Localdevice_Album] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Localdevice_PutPhotoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var albumID: String = String()

  /// 图片路径, 支持dataurl
  public var url: String = String()

  public var fileName: String {
    get {return _fileName ?? String()}
    set {_fileName = newValue}
  }
  /// Returns true if `fileName` has been explicitly set.
  public var hasFileName: Bool {return self._fileName != nil}
  /// Clears the value of `fileName`. Subsequent reads from it will return its default value.
  public mutating func clearFileName() {self._fileName = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _fileName: String? = nil
}

public struct Cloud_Lazycat_Apis_Localdevice_PhotoMetas {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var photoMetas: [Cloud_Lazycat_Apis_Localdevice_PhotoMeta] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Lazycat_Apis_Localdevice_PhotoMetasSortType: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_QueryPhotoHashRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_PhotoHashSet: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_QueryPhotoRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_PutPhotoReply: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_DeletePhotoReply: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_DeletePhotoRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_ListPhotoMetasRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_PhotoMeta: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_Album: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_ListAlbumsRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_ListAlbumsReply: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_PutPhotoRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_PhotoMetas: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.lazycat.apis.localdevice"

extension Cloud_Lazycat_Apis_Localdevice_PhotoMetasSortType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CREATE_DATE_DESC"),
    1: .same(proto: "TAKEN_DATE_DESC"),
    2: .same(proto: "CREATE_DATE_ASC"),
    3: .same(proto: "TAKEN_DATE_ASC"),
    4: .same(proto: "CREATE_TAKEN_DESC"),
    5: .same(proto: "CREATE_TAKEN_ASC"),
    6: .same(proto: "TOKEN_CREATE_DESC"),
    7: .same(proto: "TOKEN_CREATE_ASC"),
  ]
}

extension Cloud_Lazycat_Apis_Localdevice_QueryPhotoHashRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueryPhotoHashRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "changed_after"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._changedAfter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._changedAfter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_QueryPhotoHashRequest, rhs: Cloud_Lazycat_Apis_Localdevice_QueryPhotoHashRequest) -> Bool {
    if lhs._changedAfter != rhs._changedAfter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_PhotoHashSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PhotoHashSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entry"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.entry) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entry.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.entry, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_PhotoHashSet, rhs: Cloud_Lazycat_Apis_Localdevice_PhotoHashSet) -> Bool {
    if lhs.entry != rhs.entry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_QueryPhotoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueryPhotoRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_QueryPhotoRequest, rhs: Cloud_Lazycat_Apis_Localdevice_QueryPhotoRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_PutPhotoReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PutPhotoReply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_PutPhotoReply, rhs: Cloud_Lazycat_Apis_Localdevice_PutPhotoReply) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_DeletePhotoReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeletePhotoReply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "failed_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.failedID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.failedID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.failedID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_DeletePhotoReply, rhs: Cloud_Lazycat_Apis_Localdevice_DeletePhotoReply) -> Bool {
    if lhs.failedID != rhs.failedID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_DeletePhotoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeletePhotoRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitRepeatedStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_DeletePhotoRequest, rhs: Cloud_Lazycat_Apis_Localdevice_DeletePhotoRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_ListPhotoMetasRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListPhotoMetasRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "album_ids"),
    2: .standard(proto: "thumbnail_width"),
    3: .standard(proto: "thumbnail_height"),
    4: .standard(proto: "need_file_name"),
    5: .standard(proto: "need_album_ids"),
    6: .same(proto: "stype"),
    7: .standard(proto: "page_num"),
    8: .standard(proto: "page_size"),
    9: .standard(proto: "is_filter_video"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.albumIds) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.thumbnailWidth) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.thumbnailHeight) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.needFileName) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.needAlbumIds) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self._stype) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._pageNum) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self._pageSize) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self._isFilterVideo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.albumIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.albumIds, fieldNumber: 1)
    }
    if self.thumbnailWidth != 0 {
      try visitor.visitSingularInt32Field(value: self.thumbnailWidth, fieldNumber: 2)
    }
    if self.thumbnailHeight != 0 {
      try visitor.visitSingularInt32Field(value: self.thumbnailHeight, fieldNumber: 3)
    }
    if self.needFileName != false {
      try visitor.visitSingularBoolField(value: self.needFileName, fieldNumber: 4)
    }
    if self.needAlbumIds != false {
      try visitor.visitSingularBoolField(value: self.needAlbumIds, fieldNumber: 5)
    }
    try { if let v = self._stype {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._pageNum {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._pageSize {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._isFilterVideo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_ListPhotoMetasRequest, rhs: Cloud_Lazycat_Apis_Localdevice_ListPhotoMetasRequest) -> Bool {
    if lhs.albumIds != rhs.albumIds {return false}
    if lhs.thumbnailWidth != rhs.thumbnailWidth {return false}
    if lhs.thumbnailHeight != rhs.thumbnailHeight {return false}
    if lhs.needFileName != rhs.needFileName {return false}
    if lhs.needAlbumIds != rhs.needAlbumIds {return false}
    if lhs._stype != rhs._stype {return false}
    if lhs._pageNum != rhs._pageNum {return false}
    if lhs._pageSize != rhs._pageSize {return false}
    if lhs._isFilterVideo != rhs._isFilterVideo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_PhotoMeta: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PhotoMeta"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "photo_url"),
    3: .standard(proto: "thumbnail_url"),
    4: .same(proto: "width"),
    5: .same(proto: "height"),
    6: .standard(proto: "album_ids"),
    7: .same(proto: "size"),
    8: .same(proto: "mime"),
    9: .same(proto: "hash"),
    10: .standard(proto: "file_name"),
    11: .standard(proto: "creation_date"),
    12: .same(proto: "latitude"),
    13: .same(proto: "longitude"),
    14: .standard(proto: "taken_date"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.photoURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.thumbnailURL) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.width) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.height) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.albumIds) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.size) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.mime) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._fileName) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._creationDate) }()
      case 12: try { try decoder.decodeSingularFloatField(value: &self._latitude) }()
      case 13: try { try decoder.decodeSingularFloatField(value: &self._longitude) }()
      case 14: try { try decoder.decodeSingularMessageField(value: &self._takenDate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.photoURL.isEmpty {
      try visitor.visitSingularStringField(value: self.photoURL, fieldNumber: 2)
    }
    if !self.thumbnailURL.isEmpty {
      try visitor.visitSingularStringField(value: self.thumbnailURL, fieldNumber: 3)
    }
    if !self.width.isEmpty {
      try visitor.visitSingularStringField(value: self.width, fieldNumber: 4)
    }
    if !self.height.isEmpty {
      try visitor.visitSingularStringField(value: self.height, fieldNumber: 5)
    }
    if !self.albumIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.albumIds, fieldNumber: 6)
    }
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 7)
    }
    if !self.mime.isEmpty {
      try visitor.visitSingularStringField(value: self.mime, fieldNumber: 8)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 9)
    }
    try { if let v = self._fileName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._creationDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._latitude {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._longitude {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._takenDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_PhotoMeta, rhs: Cloud_Lazycat_Apis_Localdevice_PhotoMeta) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.photoURL != rhs.photoURL {return false}
    if lhs.thumbnailURL != rhs.thumbnailURL {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.albumIds != rhs.albumIds {return false}
    if lhs.size != rhs.size {return false}
    if lhs.mime != rhs.mime {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs._fileName != rhs._fileName {return false}
    if lhs._creationDate != rhs._creationDate {return false}
    if lhs._latitude != rhs._latitude {return false}
    if lhs._longitude != rhs._longitude {return false}
    if lhs._takenDate != rhs._takenDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_Album: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Album"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .standard(proto: "image_count"),
    4: .standard(proto: "video_count"),
    5: .standard(proto: "cover_image_url"),
    6: .standard(proto: "cover_image_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.imageCount) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.videoCount) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.coverImageURL) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.coverImageID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.imageCount != 0 {
      try visitor.visitSingularInt32Field(value: self.imageCount, fieldNumber: 3)
    }
    if self.videoCount != 0 {
      try visitor.visitSingularInt32Field(value: self.videoCount, fieldNumber: 4)
    }
    if !self.coverImageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.coverImageURL, fieldNumber: 5)
    }
    if !self.coverImageID.isEmpty {
      try visitor.visitSingularStringField(value: self.coverImageID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_Album, rhs: Cloud_Lazycat_Apis_Localdevice_Album) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.imageCount != rhs.imageCount {return false}
    if lhs.videoCount != rhs.videoCount {return false}
    if lhs.coverImageURL != rhs.coverImageURL {return false}
    if lhs.coverImageID != rhs.coverImageID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_ListAlbumsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAlbumsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "thumbnail_width"),
    2: .standard(proto: "thumbnail_height"),
    3: .standard(proto: "thumbnail_choose_way"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._thumbnailWidth) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._thumbnailHeight) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._thumbnailChooseWay) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._thumbnailWidth {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._thumbnailHeight {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._thumbnailChooseWay {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_ListAlbumsRequest, rhs: Cloud_Lazycat_Apis_Localdevice_ListAlbumsRequest) -> Bool {
    if lhs._thumbnailWidth != rhs._thumbnailWidth {return false}
    if lhs._thumbnailHeight != rhs._thumbnailHeight {return false}
    if lhs._thumbnailChooseWay != rhs._thumbnailChooseWay {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_ListAlbumsReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAlbumsReply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "albums"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.albums) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.albums.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.albums, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_ListAlbumsReply, rhs: Cloud_Lazycat_Apis_Localdevice_ListAlbumsReply) -> Bool {
    if lhs.albums != rhs.albums {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_PutPhotoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PutPhotoRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "album_id"),
    2: .same(proto: "url"),
    3: .standard(proto: "file_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.albumID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._fileName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.albumID.isEmpty {
      try visitor.visitSingularStringField(value: self.albumID, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    try { if let v = self._fileName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_PutPhotoRequest, rhs: Cloud_Lazycat_Apis_Localdevice_PutPhotoRequest) -> Bool {
    if lhs.albumID != rhs.albumID {return false}
    if lhs.url != rhs.url {return false}
    if lhs._fileName != rhs._fileName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_PhotoMetas: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PhotoMetas"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "photoMetas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.photoMetas) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.photoMetas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.photoMetas, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_PhotoMetas, rhs: Cloud_Lazycat_Apis_Localdevice_PhotoMetas) -> Bool {
    if lhs.photoMetas != rhs.photoMetas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
