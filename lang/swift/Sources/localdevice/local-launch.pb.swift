// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: localdevice/local-launch.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Cloud_Lazycat_Apis_Localdevice_PinAppRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var url: String = String()

  public var appName: String = String()

  /// icon地址允许是http类型或者base64类型,如果为空将尝试获取网站的favicon.ico
  public var iconURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Localdevice_PinAppReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Localdevice_UnPinAppRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var url: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Localdevice_UnPinAppReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Localdevice_OpenAppRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var url: String = String()

  public var isFullScreen: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Localdevice_OpenAppReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Localdevice_OpenUnsafeAppRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// control-view的地址
  public var url: String = String()

  /// control-view的位置
  public var position: Cloud_Lazycat_Apis_Localdevice_OpenUnsafeAppRequest.Position = .left

  /// control-view的高度(当control-view 在左右的时候表示宽度， 上下表示高度）
  public var height: String = String()

  ///
  ///此外control-view会接收以下特殊事件, 所有事件均统一以post-message形式发送， msg格式为`{ type: string, msg: string }`
  ///control-view需要自行调用addEventListener('message'), 并过滤type==lzc_control_api类型的message.
  ///
  ///1. OnURLChange(new_url)
  ///2. OnNewLinkClick(url)
  ///3. OnDownloadLinkRequest(url)
  ///4. OnNewResourceLink(url) 将所有的content-view请求的url通知给control-view
  ///5. OnContentMessage(msg string) //在content-view中调用post-message发送的任何消息
  public var features: [Cloud_Lazycat_Apis_Localdevice_OpenUnsafeAppRequest.Feature] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Position: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case left // = 0
    case right // = 1
    case top // = 2
    case bottom // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .left
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .left
      case 1: self = .right
      case 2: self = .top
      case 3: self = .bottom
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .left: return 0
      case .right: return 1
      case .top: return 2
      case .bottom: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// 所有的功能都通过 window.lzc_control_api对象注入. (后面以$API代指)
  public enum Feature: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    ///$API.InjectContentJS(jscontent,callback)  content-view 执行的jscontent, 如果有结果，会将结果通过callback(result:Boolean): 通知给control-view
    case injectJs // = 0

    ///$API.ReadCookie(domain) -> string  读取content-view cookie
    case readCookie // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .injectJs
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .injectJs
      case 1: self = .readCookie
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .injectJs: return 0
      case .readCookie: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Cloud_Lazycat_Apis_Localdevice_OpenUnsafeAppRequest.Position: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Localdevice_OpenUnsafeAppRequest.Position] = [
    .left,
    .right,
    .top,
    .bottom,
  ]
}

extension Cloud_Lazycat_Apis_Localdevice_OpenUnsafeAppRequest.Feature: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Localdevice_OpenUnsafeAppRequest.Feature] = [
    .injectJs,
    .readCookie,
  ]
}

#endif  // swift(>=4.2)

public struct Cloud_Lazycat_Apis_Localdevice_OpenAppWayRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Localdevice_OpenAppWayReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 当前设备支持的应用打开方式
  public var support: Cloud_Lazycat_Apis_Localdevice_OpenAppWayReply.Mode = .all

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Mode: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case all // = 0
    case allNot // = 1
    case browser // = 2
    case client // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .all
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .all
      case 1: self = .allNot
      case 2: self = .browser
      case 3: self = .client
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .all: return 0
      case .allNot: return 1
      case .browser: return 2
      case .client: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Cloud_Lazycat_Apis_Localdevice_OpenAppWayReply.Mode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Localdevice_OpenAppWayReply.Mode] = [
    .all,
    .allNot,
    .browser,
    .client,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Lazycat_Apis_Localdevice_PinAppRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_PinAppReply: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_UnPinAppRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_UnPinAppReply: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_OpenAppRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_OpenAppReply: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_OpenUnsafeAppRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_OpenUnsafeAppRequest.Position: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_OpenUnsafeAppRequest.Feature: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_OpenAppWayRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_OpenAppWayReply: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_OpenAppWayReply.Mode: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.lazycat.apis.localdevice"

extension Cloud_Lazycat_Apis_Localdevice_PinAppRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PinAppRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "appName"),
    3: .same(proto: "iconUrl"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.appName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.iconURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.appName.isEmpty {
      try visitor.visitSingularStringField(value: self.appName, fieldNumber: 2)
    }
    if !self.iconURL.isEmpty {
      try visitor.visitSingularStringField(value: self.iconURL, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_PinAppRequest, rhs: Cloud_Lazycat_Apis_Localdevice_PinAppRequest) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.appName != rhs.appName {return false}
    if lhs.iconURL != rhs.iconURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_PinAppReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PinAppReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_PinAppReply, rhs: Cloud_Lazycat_Apis_Localdevice_PinAppReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_UnPinAppRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnPinAppRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_UnPinAppRequest, rhs: Cloud_Lazycat_Apis_Localdevice_UnPinAppRequest) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_UnPinAppReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnPinAppReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_UnPinAppReply, rhs: Cloud_Lazycat_Apis_Localdevice_UnPinAppReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_OpenAppRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenAppRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "isFullScreen"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isFullScreen) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if self.isFullScreen != false {
      try visitor.visitSingularBoolField(value: self.isFullScreen, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_OpenAppRequest, rhs: Cloud_Lazycat_Apis_Localdevice_OpenAppRequest) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.isFullScreen != rhs.isFullScreen {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_OpenAppReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenAppReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_OpenAppReply, rhs: Cloud_Lazycat_Apis_Localdevice_OpenAppReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_OpenUnsafeAppRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenUnsafeAppRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "position"),
    3: .same(proto: "height"),
    4: .same(proto: "features"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.position) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.height) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &self.features) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if self.position != .left {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 2)
    }
    if !self.height.isEmpty {
      try visitor.visitSingularStringField(value: self.height, fieldNumber: 3)
    }
    if !self.features.isEmpty {
      try visitor.visitPackedEnumField(value: self.features, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_OpenUnsafeAppRequest, rhs: Cloud_Lazycat_Apis_Localdevice_OpenUnsafeAppRequest) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.position != rhs.position {return false}
    if lhs.height != rhs.height {return false}
    if lhs.features != rhs.features {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_OpenUnsafeAppRequest.Position: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Left"),
    1: .same(proto: "Right"),
    2: .same(proto: "Top"),
    3: .same(proto: "Bottom"),
  ]
}

extension Cloud_Lazycat_Apis_Localdevice_OpenUnsafeAppRequest.Feature: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "InjectJS"),
    1: .same(proto: "ReadCookie"),
  ]
}

extension Cloud_Lazycat_Apis_Localdevice_OpenAppWayRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenAppWayRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_OpenAppWayRequest, rhs: Cloud_Lazycat_Apis_Localdevice_OpenAppWayRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_OpenAppWayReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenAppWayReply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "support"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.support) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.support != .all {
      try visitor.visitSingularEnumField(value: self.support, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_OpenAppWayReply, rhs: Cloud_Lazycat_Apis_Localdevice_OpenAppWayReply) -> Bool {
    if lhs.support != rhs.support {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Localdevice_OpenAppWayReply.Mode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "All"),
    1: .same(proto: "AllNot"),
    2: .same(proto: "Browser"),
    3: .same(proto: "Client"),
  ]
}
