// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: localdevice/network.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Cloud_Lazycat_Apis_Localdevice_ConnectionType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case cellNone // = 1
  case ethernet // = 2
  case wifi // = 3
  case cell // = 4
  case cell2G // = 5
  case cell3G // = 6
  case cell4G // = 7
  case cell5G // = 8
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .cellNone
    case 2: self = .ethernet
    case 3: self = .wifi
    case 4: self = .cell
    case 5: self = .cell2G
    case 6: self = .cell3G
    case 7: self = .cell4G
    case 8: self = .cell5G
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .cellNone: return 1
    case .ethernet: return 2
    case .wifi: return 3
    case .cell: return 4
    case .cell2G: return 5
    case .cell3G: return 6
    case .cell4G: return 7
    case .cell5G: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Lazycat_Apis_Localdevice_ConnectionType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Localdevice_ConnectionType] = [
    .unknown,
    .cellNone,
    .ethernet,
    .wifi,
    .cell,
    .cell2G,
    .cell3G,
    .cell4G,
    .cell5G,
  ]
}

#endif  // swift(>=4.2)

public struct Cloud_Lazycat_Apis_Localdevice_NetworkInformation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ctype: Cloud_Lazycat_Apis_Localdevice_ConnectionType = .unknown

  public var isOnline: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Lazycat_Apis_Localdevice_ConnectionType: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Localdevice_NetworkInformation: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.lazycat.apis.localdevice"

extension Cloud_Lazycat_Apis_Localdevice_ConnectionType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Unknown"),
    1: .same(proto: "CELL_NONE"),
    2: .same(proto: "ETHERNET"),
    3: .same(proto: "WIFI"),
    4: .same(proto: "CELL"),
    5: .same(proto: "CELL_2G"),
    6: .same(proto: "CELL_3G"),
    7: .same(proto: "CELL_4G"),
    8: .same(proto: "CELL_5G"),
  ]
}

extension Cloud_Lazycat_Apis_Localdevice_NetworkInformation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NetworkInformation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ctype"),
    2: .same(proto: "IsOnline"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.ctype) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isOnline) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ctype != .unknown {
      try visitor.visitSingularEnumField(value: self.ctype, fieldNumber: 1)
    }
    if self.isOnline != false {
      try visitor.visitSingularBoolField(value: self.isOnline, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Localdevice_NetworkInformation, rhs: Cloud_Lazycat_Apis_Localdevice_NetworkInformation) -> Bool {
    if lhs.ctype != rhs.ctype {return false}
    if lhs.isOnline != rhs.isOnline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
