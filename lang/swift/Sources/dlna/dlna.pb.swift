// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dlna/dlna.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Lzc_Dlna_GetPositionInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playerUuid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lzc_Dlna_GetPositionInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var track: String = String()

  public var trackDuration: String = String()

  public var trackMetadata: String = String()

  public var trackUri: String = String()

  public var relTime: String = String()

  public var absTime: String = String()

  public var relCount: Int32 = 0

  public var absCount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lzc_Dlna_DoActionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playerUuid: String = String()

  public var action: Lzc_Dlna_DoActionRequest.Action = .unknown

  public var mediaFile: String {
    get {return _mediaFile ?? String()}
    set {_mediaFile = newValue}
  }
  /// Returns true if `mediaFile` has been explicitly set.
  public var hasMediaFile: Bool {return self._mediaFile != nil}
  /// Clears the value of `mediaFile`. Subsequent reads from it will return its default value.
  public mutating func clearMediaFile() {self._mediaFile = nil}

  public var mediaSubtitle: String {
    get {return _mediaSubtitle ?? String()}
    set {_mediaSubtitle = newValue}
  }
  /// Returns true if `mediaSubtitle` has been explicitly set.
  public var hasMediaSubtitle: Bool {return self._mediaSubtitle != nil}
  /// Clears the value of `mediaSubtitle`. Subsequent reads from it will return its default value.
  public mutating func clearMediaSubtitle() {self._mediaSubtitle = nil}

  public var seekTarget: String {
    get {return _seekTarget ?? String()}
    set {_seekTarget = newValue}
  }
  /// Returns true if `seekTarget` has been explicitly set.
  public var hasSeekTarget: Bool {return self._seekTarget != nil}
  /// Clears the value of `seekTarget`. Subsequent reads from it will return its default value.
  public mutating func clearSeekTarget() {self._seekTarget = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Action: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0

    /// 需要在mediaFile中设置对应的媒体路径，
    /// 支持http://类型或/开头的本地资源路径(相当于当前用户目录)
    case play // = 1
    case pause // = 2

    /// 若当前是paused状态，则恢复播放，否则不做任何处理，返回成功。
    case `continue` // = 3

    /// 停止对此instance上的任何操作，后续操作需要重新调用play开始
    case stop // = 4
    case seek // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .play
      case 2: self = .pause
      case 3: self = .continue
      case 4: self = .stop
      case 5: self = .seek
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .play: return 1
      case .pause: return 2
      case .continue: return 3
      case .stop: return 4
      case .seek: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _mediaFile: String? = nil
  fileprivate var _mediaSubtitle: String? = nil
  fileprivate var _seekTarget: String? = nil
}

#if swift(>=4.2)

extension Lzc_Dlna_DoActionRequest.Action: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Lzc_Dlna_DoActionRequest.Action] = [
    .unknown,
    .play,
    .pause,
    .continue,
    .stop,
    .seek,
  ]
}

#endif  // swift(>=4.2)

public struct Lzc_Dlna_RMPStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Lzc_Dlna_RMPStatus.Status = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case playing // = 1
    case paused // = 2
    case stopped // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .playing
      case 2: self = .paused
      case 3: self = .stopped
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .playing: return 1
      case .paused: return 2
      case .stopped: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Lzc_Dlna_RMPStatus.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Lzc_Dlna_RMPStatus.Status] = [
    .unknown,
    .playing,
    .paused,
    .stopped,
  ]
}

#endif  // swift(>=4.2)

public struct Lzc_Dlna_ScanRMPResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var remoteMediaPlayers: [Lzc_Dlna_RemoteMediaPlayer] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lzc_Dlna_SubscribeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playerUuid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lzc_Dlna_RemoteMediaPlayer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uuid: String = String()

  public var name: String = String()

  public var iconData: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Lzc_Dlna_GetPositionInfoRequest: @unchecked Sendable {}
extension Lzc_Dlna_GetPositionInfoResponse: @unchecked Sendable {}
extension Lzc_Dlna_DoActionRequest: @unchecked Sendable {}
extension Lzc_Dlna_DoActionRequest.Action: @unchecked Sendable {}
extension Lzc_Dlna_RMPStatus: @unchecked Sendable {}
extension Lzc_Dlna_RMPStatus.Status: @unchecked Sendable {}
extension Lzc_Dlna_ScanRMPResponse: @unchecked Sendable {}
extension Lzc_Dlna_SubscribeRequest: @unchecked Sendable {}
extension Lzc_Dlna_RemoteMediaPlayer: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "lzc.dlna"

extension Lzc_Dlna_GetPositionInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPositionInfoRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_uuid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.playerUuid) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playerUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.playerUuid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lzc_Dlna_GetPositionInfoRequest, rhs: Lzc_Dlna_GetPositionInfoRequest) -> Bool {
    if lhs.playerUuid != rhs.playerUuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lzc_Dlna_GetPositionInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPositionInfoResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "track"),
    2: .standard(proto: "track_duration"),
    3: .standard(proto: "track_metadata"),
    4: .standard(proto: "track_uri"),
    5: .standard(proto: "rel_time"),
    6: .standard(proto: "abs_time"),
    7: .standard(proto: "rel_count"),
    8: .standard(proto: "abs_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.track) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.trackDuration) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.trackMetadata) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.trackUri) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.relTime) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.absTime) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.relCount) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.absCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.track.isEmpty {
      try visitor.visitSingularStringField(value: self.track, fieldNumber: 1)
    }
    if !self.trackDuration.isEmpty {
      try visitor.visitSingularStringField(value: self.trackDuration, fieldNumber: 2)
    }
    if !self.trackMetadata.isEmpty {
      try visitor.visitSingularStringField(value: self.trackMetadata, fieldNumber: 3)
    }
    if !self.trackUri.isEmpty {
      try visitor.visitSingularStringField(value: self.trackUri, fieldNumber: 4)
    }
    if !self.relTime.isEmpty {
      try visitor.visitSingularStringField(value: self.relTime, fieldNumber: 5)
    }
    if !self.absTime.isEmpty {
      try visitor.visitSingularStringField(value: self.absTime, fieldNumber: 6)
    }
    if self.relCount != 0 {
      try visitor.visitSingularInt32Field(value: self.relCount, fieldNumber: 7)
    }
    if self.absCount != 0 {
      try visitor.visitSingularInt32Field(value: self.absCount, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lzc_Dlna_GetPositionInfoResponse, rhs: Lzc_Dlna_GetPositionInfoResponse) -> Bool {
    if lhs.track != rhs.track {return false}
    if lhs.trackDuration != rhs.trackDuration {return false}
    if lhs.trackMetadata != rhs.trackMetadata {return false}
    if lhs.trackUri != rhs.trackUri {return false}
    if lhs.relTime != rhs.relTime {return false}
    if lhs.absTime != rhs.absTime {return false}
    if lhs.relCount != rhs.relCount {return false}
    if lhs.absCount != rhs.absCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lzc_Dlna_DoActionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DoActionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_uuid"),
    2: .same(proto: "action"),
    3: .standard(proto: "media_file"),
    4: .standard(proto: "media_subtitle"),
    5: .standard(proto: "seek_target"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.playerUuid) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._mediaFile) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._mediaSubtitle) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._seekTarget) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.playerUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.playerUuid, fieldNumber: 1)
    }
    if self.action != .unknown {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 2)
    }
    try { if let v = self._mediaFile {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._mediaSubtitle {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._seekTarget {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lzc_Dlna_DoActionRequest, rhs: Lzc_Dlna_DoActionRequest) -> Bool {
    if lhs.playerUuid != rhs.playerUuid {return false}
    if lhs.action != rhs.action {return false}
    if lhs._mediaFile != rhs._mediaFile {return false}
    if lhs._mediaSubtitle != rhs._mediaSubtitle {return false}
    if lhs._seekTarget != rhs._seekTarget {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lzc_Dlna_DoActionRequest.Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Unknown"),
    1: .same(proto: "Play"),
    2: .same(proto: "Pause"),
    3: .same(proto: "Continue"),
    4: .same(proto: "Stop"),
    5: .same(proto: "Seek"),
  ]
}

extension Lzc_Dlna_RMPStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RMPStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lzc_Dlna_RMPStatus, rhs: Lzc_Dlna_RMPStatus) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lzc_Dlna_RMPStatus.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Unknown"),
    1: .same(proto: "Playing"),
    2: .same(proto: "Paused"),
    3: .same(proto: "Stopped"),
  ]
}

extension Lzc_Dlna_ScanRMPResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ScanRMPResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "remote_media_players"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.remoteMediaPlayers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.remoteMediaPlayers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.remoteMediaPlayers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lzc_Dlna_ScanRMPResponse, rhs: Lzc_Dlna_ScanRMPResponse) -> Bool {
    if lhs.remoteMediaPlayers != rhs.remoteMediaPlayers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lzc_Dlna_SubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscribeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_uuid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.playerUuid) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playerUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.playerUuid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lzc_Dlna_SubscribeRequest, rhs: Lzc_Dlna_SubscribeRequest) -> Bool {
    if lhs.playerUuid != rhs.playerUuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lzc_Dlna_RemoteMediaPlayer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoteMediaPlayer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "name"),
    3: .standard(proto: "icon_data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.iconData) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.iconData.isEmpty {
      try visitor.visitSingularStringField(value: self.iconData, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lzc_Dlna_RemoteMediaPlayer, rhs: Lzc_Dlna_RemoteMediaPlayer) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.name != rhs.name {return false}
    if lhs.iconData != rhs.iconData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
