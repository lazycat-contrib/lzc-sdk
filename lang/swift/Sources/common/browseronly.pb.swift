// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common/browseronly.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Cloud_Lazycat_Apis_Common_APIServerInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var frontendVersion: String = String()

  public var backendVersion: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Common_SessionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 当前登陆用户
  public var uid: String = String()

  /// 当前登陆设备
  public var deviceID: String = String()

  public var when: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _when ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_when = newValue}
  }
  /// Returns true if `when` has been explicitly set.
  public var hasWhen: Bool {return self._when != nil}
  /// Clears the value of `when`. Subsequent reads from it will return its default value.
  public mutating func clearWhen() {self._when = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _when: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Cloud_Lazycat_Apis_Common_AppInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var boxID: String = String()

  public var appID: String = String()

  public var appDomain: String = String()

  /// APIGateway对所有而http service服务强制要求设置http header类型的
  /// AuthInfo. 但有些场景无法使用XHR去设置自定义的http header，导致访问
  /// 这些服务很困难，因此由/usr/bin/lzcapp统一提供一个代理服务来设置这个
  /// header. 此字段即是对应代理出来的URL前缀。默认为"/_lzc"，可以通过启动
  /// 参数调整。
  public var httpApiProxyPath: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Lazycat_Apis_Common_APIServerInfo: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_SessionInfo: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_AppInfo: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.lazycat.apis.common"

extension Cloud_Lazycat_Apis_Common_APIServerInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".APIServerInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "frontend_version"),
    2: .standard(proto: "backend_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.frontendVersion) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.backendVersion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.frontendVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.frontendVersion, fieldNumber: 1)
    }
    if !self.backendVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.backendVersion, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_APIServerInfo, rhs: Cloud_Lazycat_Apis_Common_APIServerInfo) -> Bool {
    if lhs.frontendVersion != rhs.frontendVersion {return false}
    if lhs.backendVersion != rhs.backendVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_SessionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SessionInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .standard(proto: "device_id"),
    3: .same(proto: "when"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._when) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 1)
    }
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 2)
    }
    try { if let v = self._when {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_SessionInfo, rhs: Cloud_Lazycat_Apis_Common_SessionInfo) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs._when != rhs._when {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_AppInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AppInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "box_id"),
    2: .standard(proto: "app_id"),
    3: .standard(proto: "app_domain"),
    4: .standard(proto: "http_api_proxy_path"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.boxID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.appID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.appDomain) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.httpApiProxyPath) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.boxID.isEmpty {
      try visitor.visitSingularStringField(value: self.boxID, fieldNumber: 1)
    }
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 2)
    }
    if !self.appDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.appDomain, fieldNumber: 3)
    }
    if !self.httpApiProxyPath.isEmpty {
      try visitor.visitSingularStringField(value: self.httpApiProxyPath, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_AppInfo, rhs: Cloud_Lazycat_Apis_Common_AppInfo) -> Bool {
    if lhs.boxID != rhs.boxID {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.appDomain != rhs.appDomain {return false}
    if lhs.httpApiProxyPath != rhs.httpApiProxyPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
