// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common/security_context.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Cloud_Lazycat_Apis_Common_Permission: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 是否允许挂载用户文档数据
  case userDocument // = 0

  /// 是否允许安装软件
  case installPackage // = 1

  /// 是否允许挂载可移动存储设备
  case accessRemoveableStoreage // = 2

  /// 是否允许生成访问EndDevice的访问凭证, EndDevice会进行具体API的权限验证
  case accessEnddevice // = 1000
  case enddeviceClipboard // = 1001
  case enddeviceNetworkInfo // = 1002
  case enddevicePhotolibrary // = 1003
  case UNRECOGNIZED(Int)

  public init() {
    self = .userDocument
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .userDocument
    case 1: self = .installPackage
    case 2: self = .accessRemoveableStoreage
    case 1000: self = .accessEnddevice
    case 1001: self = .enddeviceClipboard
    case 1002: self = .enddeviceNetworkInfo
    case 1003: self = .enddevicePhotolibrary
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .userDocument: return 0
    case .installPackage: return 1
    case .accessRemoveableStoreage: return 2
    case .accessEnddevice: return 1000
    case .enddeviceClipboard: return 1001
    case .enddeviceNetworkInfo: return 1002
    case .enddevicePhotolibrary: return 1003
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Lazycat_Apis_Common_Permission: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Common_Permission] = [
    .userDocument,
    .installPackage,
    .accessRemoveableStoreage,
    .accessEnddevice,
    .enddeviceClipboard,
    .enddeviceNetworkInfo,
    .enddevicePhotolibrary,
  ]
}

#endif  // swift(>=4.2)

public enum Cloud_Lazycat_Apis_Common_UserClass: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///可以没有用户(比如一个纯后端app)或任何有效用户
  case anyUser // = 0

  ///任何有效的用户
  case normalUser // = 1

  ///必须是管理员用户
  case adminUser // = 2

  ///请求者必须是资源所有者对应的用户，比如"设置密码"每个用户都有权设置，但仅能设置自身的
  ///具体的TARGET_USER通过input message中的target_uid_field option进行标记
  case targetUser // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .anyUser
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .anyUser
    case 1: self = .normalUser
    case 2: self = .adminUser
    case 3: self = .targetUser
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .anyUser: return 0
    case .normalUser: return 1
    case .adminUser: return 2
    case .targetUser: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Lazycat_Apis_Common_UserClass: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Common_UserClass] = [
    .anyUser,
    .normalUser,
    .adminUser,
    .targetUser,
  ]
}

#endif  // swift(>=4.2)

public enum Cloud_Lazycat_Apis_Common_SecurityContextMetaKey: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case metaKeyXLzcapiAppid // = 0
  case metaKeyXLzcapiRealuid // = 1
  case metaKeyXLzcapiUid // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .metaKeyXLzcapiAppid
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .metaKeyXLzcapiAppid
    case 1: self = .metaKeyXLzcapiRealuid
    case 2: self = .metaKeyXLzcapiUid
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .metaKeyXLzcapiAppid: return 0
    case .metaKeyXLzcapiRealuid: return 1
    case .metaKeyXLzcapiUid: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Lazycat_Apis_Common_SecurityContextMetaKey: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Common_SecurityContextMetaKey] = [
    .metaKeyXLzcapiAppid,
    .metaKeyXLzcapiRealuid,
    .metaKeyXLzcapiUid,
  ]
}

#endif  // swift(>=4.2)

/// APIGateway在进行完权限检测放行后，转发给API Services时会通过metadata附带以下信息
public struct Cloud_Lazycat_Apis_Common_SecurityContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 请求来源的真实appid，一定是合法有效的
  public var appid: String = String()

  /// 请求来源的真实uid,一定是合法有效的
  public var realUid: String = String()

  /// 请求来源期望的uid，注意此值可以被app server篡改
  /// 若uid != real_uid且对应SecurityContextRequire.disable_behalf_of_uid == true
  /// 则此请求会被APIGATEWAY阻止转发
  /// 若app server没有篡改此值，则此值与real_uid相同
  public var uid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 以下权限要求通过option的方式声明在proto文件内
/// 并由APIGateway进行验证
public struct Cloud_Lazycat_Apis_Common_SecurityContextRequire {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var requirePermissions: [Cloud_Lazycat_Apis_Common_Permission] = []

  public var requireUserClass: Cloud_Lazycat_Apis_Common_UserClass = .anyUser

  /// 请求必须直接通过app server发起，而非serverless端发起
  public var requireFromBackend: Bool = false

  /// 禁止app server伪造uid
  public var disableBehalfOfUid: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Common_PermissionDesc {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 申请权限的原因说明
  public var reason: String = String()

  /// 权限列表
  public var permissions: [Cloud_Lazycat_Apis_Common_Permission] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 后续调用lzc-apis时，需要带上此token
public struct Cloud_Lazycat_Apis_Common_PermissionToken {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Common_PermissionStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Common_HasPermissionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var perm: Cloud_Lazycat_Apis_Common_Permission = .userDocument

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Lazycat_Apis_Common_Permission: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_UserClass: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_SecurityContextMetaKey: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_SecurityContext: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_SecurityContextRequire: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_PermissionDesc: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_PermissionToken: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_PermissionStatus: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_HasPermissionRequest: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Extension support defined in security_context.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_MessageOptions {

  public var Cloud_Lazycat_Apis_Common_targetUidField: Int32 {
    get {return getExtensionValue(ext: Cloud_Lazycat_Apis_Common_Extensions_target_uid_field) ?? 0}
    set {setExtensionValue(ext: Cloud_Lazycat_Apis_Common_Extensions_target_uid_field, value: newValue)}
  }
  /// Returns true if extension `Cloud_Lazycat_Apis_Common_Extensions_target_uid_field`
  /// has been explicitly set.
  public var hasCloud_Lazycat_Apis_Common_targetUidField: Bool {
    return hasExtensionValue(ext: Cloud_Lazycat_Apis_Common_Extensions_target_uid_field)
  }
  /// Clears the value of extension `Cloud_Lazycat_Apis_Common_Extensions_target_uid_field`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearCloud_Lazycat_Apis_Common_targetUidField() {
    clearExtensionValue(ext: Cloud_Lazycat_Apis_Common_Extensions_target_uid_field)
  }
}

extension SwiftProtobuf.Google_Protobuf_MethodOptions {

  public var Cloud_Lazycat_Apis_Common_scontext: Cloud_Lazycat_Apis_Common_SecurityContextRequire {
    get {return getExtensionValue(ext: Cloud_Lazycat_Apis_Common_Extensions_scontext) ?? Cloud_Lazycat_Apis_Common_SecurityContextRequire()}
    set {setExtensionValue(ext: Cloud_Lazycat_Apis_Common_Extensions_scontext, value: newValue)}
  }
  /// Returns true if extension `Cloud_Lazycat_Apis_Common_Extensions_scontext`
  /// has been explicitly set.
  public var hasCloud_Lazycat_Apis_Common_scontext: Bool {
    return hasExtensionValue(ext: Cloud_Lazycat_Apis_Common_Extensions_scontext)
  }
  /// Clears the value of extension `Cloud_Lazycat_Apis_Common_Extensions_scontext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearCloud_Lazycat_Apis_Common_scontext() {
    clearExtensionValue(ext: Cloud_Lazycat_Apis_Common_Extensions_scontext)
  }

}

// MARK: - File's ExtensionMap: Cloud_Lazycat_Apis_Common_SecurityContext_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
public let Cloud_Lazycat_Apis_Common_SecurityContext_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Cloud_Lazycat_Apis_Common_Extensions_scontext,
  Cloud_Lazycat_Apis_Common_Extensions_target_uid_field
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

public let Cloud_Lazycat_Apis_Common_Extensions_scontext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Cloud_Lazycat_Apis_Common_SecurityContextRequire>, SwiftProtobuf.Google_Protobuf_MethodOptions>(
  _protobuf_fieldNumber: 70000,
  fieldName: "cloud.lazycat.apis.common.scontext"
)

public let Cloud_Lazycat_Apis_Common_Extensions_target_uid_field = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftProtobuf.Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 70001,
  fieldName: "cloud.lazycat.apis.common.target_uid_field"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.lazycat.apis.common"

extension Cloud_Lazycat_Apis_Common_Permission: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "USER_DOCUMENT"),
    1: .same(proto: "INSTALL_PACKAGE"),
    2: .same(proto: "ACCESS_REMOVEABLE_STOREAGE"),
    1000: .same(proto: "ACCESS_ENDDEVICE"),
    1001: .same(proto: "ENDDEVICE_CLIPBOARD"),
    1002: .same(proto: "ENDDEVICE_NETWORK_INFO"),
    1003: .same(proto: "ENDDEVICE_PHOTOLIBRARY"),
  ]
}

extension Cloud_Lazycat_Apis_Common_UserClass: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ANY_USER"),
    1: .same(proto: "NORMAL_USER"),
    2: .same(proto: "ADMIN_USER"),
    3: .same(proto: "TARGET_USER"),
  ]
}

extension Cloud_Lazycat_Apis_Common_SecurityContextMetaKey: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "META_KEY_X_LZCAPI_APPID"),
    1: .same(proto: "META_KEY_X_LZCAPI_REALUID"),
    2: .same(proto: "META_KEY_X_LZCAPI_UID"),
  ]
}

extension Cloud_Lazycat_Apis_Common_SecurityContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SecurityContext"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appid"),
    2: .standard(proto: "real_uid"),
    3: .same(proto: "uid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.realUid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uid) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appid.isEmpty {
      try visitor.visitSingularStringField(value: self.appid, fieldNumber: 1)
    }
    if !self.realUid.isEmpty {
      try visitor.visitSingularStringField(value: self.realUid, fieldNumber: 2)
    }
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_SecurityContext, rhs: Cloud_Lazycat_Apis_Common_SecurityContext) -> Bool {
    if lhs.appid != rhs.appid {return false}
    if lhs.realUid != rhs.realUid {return false}
    if lhs.uid != rhs.uid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_SecurityContextRequire: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SecurityContextRequire"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "require_permissions"),
    2: .standard(proto: "require_user_class"),
    3: .standard(proto: "require_from_backend"),
    4: .standard(proto: "disable_behalf_of_uid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.requirePermissions) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.requireUserClass) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.requireFromBackend) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.disableBehalfOfUid) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requirePermissions.isEmpty {
      try visitor.visitPackedEnumField(value: self.requirePermissions, fieldNumber: 1)
    }
    if self.requireUserClass != .anyUser {
      try visitor.visitSingularEnumField(value: self.requireUserClass, fieldNumber: 2)
    }
    if self.requireFromBackend != false {
      try visitor.visitSingularBoolField(value: self.requireFromBackend, fieldNumber: 3)
    }
    if self.disableBehalfOfUid != false {
      try visitor.visitSingularBoolField(value: self.disableBehalfOfUid, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_SecurityContextRequire, rhs: Cloud_Lazycat_Apis_Common_SecurityContextRequire) -> Bool {
    if lhs.requirePermissions != rhs.requirePermissions {return false}
    if lhs.requireUserClass != rhs.requireUserClass {return false}
    if lhs.requireFromBackend != rhs.requireFromBackend {return false}
    if lhs.disableBehalfOfUid != rhs.disableBehalfOfUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_PermissionDesc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PermissionDesc"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reason"),
    2: .same(proto: "permissions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.reason) }()
      case 2: try { try decoder.decodeRepeatedEnumField(value: &self.permissions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 1)
    }
    if !self.permissions.isEmpty {
      try visitor.visitPackedEnumField(value: self.permissions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_PermissionDesc, rhs: Cloud_Lazycat_Apis_Common_PermissionDesc) -> Bool {
    if lhs.reason != rhs.reason {return false}
    if lhs.permissions != rhs.permissions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_PermissionToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PermissionToken"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.token) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_PermissionToken, rhs: Cloud_Lazycat_Apis_Common_PermissionToken) -> Bool {
    if lhs.token != rhs.token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_PermissionStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PermissionStatus"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_PermissionStatus, rhs: Cloud_Lazycat_Apis_Common_PermissionStatus) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_HasPermissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HasPermissionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "perm"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.perm) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.perm != .userDocument {
      try visitor.visitSingularEnumField(value: self.perm, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_HasPermissionRequest, rhs: Cloud_Lazycat_Apis_Common_HasPermissionRequest) -> Bool {
    if lhs.perm != rhs.perm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
