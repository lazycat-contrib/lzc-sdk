// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common/filetrans.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Task 所有状态
public enum Cloud_Lazycat_Apis_Common_TaskStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 等待下载
  case pending // = 0

  /// 正在下载
  case transmitting // = 1

  /// 暂停
  case paused // = 2

  /// 已完成
  case finished // = 3

  /// 下载失败
  case failed // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .pending
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .pending
    case 1: self = .transmitting
    case 2: self = .paused
    case 3: self = .finished
    case 4: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .pending: return 0
    case .transmitting: return 1
    case .paused: return 2
    case .finished: return 3
    case .failed: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Lazycat_Apis_Common_TaskStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Common_TaskStatus] = [
    .pending,
    .transmitting,
    .paused,
    .finished,
    .failed,
  ]
}

#endif  // swift(>=4.2)

public enum Cloud_Lazycat_Apis_Common_QueueStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 等待下载
  case running // = 0

  /// 已完成
  case suspend // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .running
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .running
    case 1: self = .suspend
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .running: return 0
    case .suspend: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Lazycat_Apis_Common_QueueStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Common_QueueStatus] = [
    .running,
    .suspend,
  ]
}

#endif  // swift(>=4.2)

public enum Cloud_Lazycat_Apis_Common_MsgAction: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case add // = 0
  case del // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .add
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .add
    case 1: self = .del
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .add: return 0
    case .del: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Lazycat_Apis_Common_MsgAction: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Common_MsgAction] = [
    .add,
    .del,
  ]
}

#endif  // swift(>=4.2)

public struct Cloud_Lazycat_Apis_Common_FileLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var locationType: Cloud_Lazycat_Apis_Common_FileLocation.FileLocationType = .url

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum FileLocationType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case url // = 0
    case local // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .url
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .url
      case 2: self = .local
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .url: return 0
      case .local: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Cloud_Lazycat_Apis_Common_FileLocation.FileLocationType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Common_FileLocation.FileLocationType] = [
    .url,
    .local,
  ]
}

#endif  // swift(>=4.2)

/// Task创建请求
public struct Cloud_Lazycat_Apis_Common_TaskCreateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// src任意http url
  /// https://7e-febf-6026-f14a-a3ec-0.d.heiyu.space:4443/s/files/home/abc.mp4
  public var src: Cloud_Lazycat_Apis_Common_FileLocation {
    get {return _src ?? Cloud_Lazycat_Apis_Common_FileLocation()}
    set {_src = newValue}
  }
  /// Returns true if `src` has been explicitly set.
  public var hasSrc: Bool {return self._src != nil}
  /// Clears the value of `src`. Subsequent reads from it will return its default value.
  public mutating func clearSrc() {self._src = nil}

  /// app的files相对路径或具备PUT的webdav地址
  /// /home/abc.mp4 or
  /// https://apis.snyht4.heiyu.space/s/files/home/video/abc.mp4
  public var dst: Cloud_Lazycat_Apis_Common_FileLocation {
    get {return _dst ?? Cloud_Lazycat_Apis_Common_FileLocation()}
    set {_dst = newValue}
  }
  /// Returns true if `dst` has been explicitly set.
  public var hasDst: Bool {return self._dst != nil}
  /// Clears the value of `dst`. Subsequent reads from it will return its default value.
  public mutating func clearDst() {self._dst = nil}

  /// abc.mp4
  public var name: String = String()

  ///若queue 需提前创建，（固定前缀id）
  public var queueID: Cloud_Lazycat_Apis_Common_TaskQueueID {
    get {return _queueID ?? Cloud_Lazycat_Apis_Common_TaskQueueID()}
    set {_queueID = newValue}
  }
  /// Returns true if `queueID` has been explicitly set.
  public var hasQueueID: Bool {return self._queueID != nil}
  /// Clears the value of `queueID`. Subsequent reads from it will return its default value.
  public mutating func clearQueueID() {self._queueID = nil}

  public var status: Cloud_Lazycat_Apis_Common_TaskStatus {
    get {return _status ?? .pending}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _src: Cloud_Lazycat_Apis_Common_FileLocation? = nil
  fileprivate var _dst: Cloud_Lazycat_Apis_Common_FileLocation? = nil
  fileprivate var _queueID: Cloud_Lazycat_Apis_Common_TaskQueueID? = nil
  fileprivate var _status: Cloud_Lazycat_Apis_Common_TaskStatus? = nil
}

/// Task结构体
public struct Cloud_Lazycat_Apis_Common_TaskID {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Common_TransmitInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 总大小， 单位为 Byte
  public var total: Int64 = 0

  /// 已传输大小， 单位为 Byte
  public var transmitted: Int64 = 0

  /// 当前速度， 单位为 Byte/s
  public var speed: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Common_Task {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Cloud_Lazycat_Apis_Common_TaskID {
    get {return _id ?? Cloud_Lazycat_Apis_Common_TaskID()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var src: Cloud_Lazycat_Apis_Common_FileLocation {
    get {return _src ?? Cloud_Lazycat_Apis_Common_FileLocation()}
    set {_src = newValue}
  }
  /// Returns true if `src` has been explicitly set.
  public var hasSrc: Bool {return self._src != nil}
  /// Clears the value of `src`. Subsequent reads from it will return its default value.
  public mutating func clearSrc() {self._src = nil}

  public var dst: Cloud_Lazycat_Apis_Common_FileLocation {
    get {return _dst ?? Cloud_Lazycat_Apis_Common_FileLocation()}
    set {_dst = newValue}
  }
  /// Returns true if `dst` has been explicitly set.
  public var hasDst: Bool {return self._dst != nil}
  /// Clears the value of `dst`. Subsequent reads from it will return its default value.
  public mutating func clearDst() {self._dst = nil}

  public var fileName: String = String()

  public var mimeType: String = String()

  public var status: Cloud_Lazycat_Apis_Common_TaskStatus = .pending

  /// 前端请求可以没有大小，返回需要有
  public var size: Int64 {
    get {return _size ?? 0}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  public var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  public mutating func clearSize() {self._size = nil}

  public var info: Cloud_Lazycat_Apis_Common_TransmitInfo {
    get {return _info ?? Cloud_Lazycat_Apis_Common_TransmitInfo()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  public var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  public mutating func clearInfo() {self._info = nil}

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {self._updatedAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: Cloud_Lazycat_Apis_Common_TaskID? = nil
  fileprivate var _src: Cloud_Lazycat_Apis_Common_FileLocation? = nil
  fileprivate var _dst: Cloud_Lazycat_Apis_Common_FileLocation? = nil
  fileprivate var _size: Int64? = nil
  fileprivate var _info: Cloud_Lazycat_Apis_Common_TransmitInfo? = nil
  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

///
/// 任务队列TaskQueue设计
public struct Cloud_Lazycat_Apis_Common_TaskQueueConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var maxParallel: Int64 = 0

  public var maxRatePerFile: Int64 = 0

  public var maxRate: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Common_TaskQueueID {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Common_TaskQueueConfigReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Cloud_Lazycat_Apis_Common_TaskQueueID {
    get {return _id ?? Cloud_Lazycat_Apis_Common_TaskQueueID()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var config: Cloud_Lazycat_Apis_Common_TaskQueueConfig {
    get {return _config ?? Cloud_Lazycat_Apis_Common_TaskQueueConfig()}
    set {_config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  public var hasConfig: Bool {return self._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  public mutating func clearConfig() {self._config = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: Cloud_Lazycat_Apis_Common_TaskQueueID? = nil
  fileprivate var _config: Cloud_Lazycat_Apis_Common_TaskQueueConfig? = nil
}

/// TODO 考虑暂停状态问题
public struct Cloud_Lazycat_Apis_Common_TaskQueue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Cloud_Lazycat_Apis_Common_TaskQueueID {
    get {return _id ?? Cloud_Lazycat_Apis_Common_TaskQueueID()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var status: Cloud_Lazycat_Apis_Common_QueueStatus = .running

  public var tasks: [Cloud_Lazycat_Apis_Common_Task] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: Cloud_Lazycat_Apis_Common_TaskQueueID? = nil
}

public struct Cloud_Lazycat_Apis_Common_FileTaskQueueResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Cloud_Lazycat_Apis_Common_TaskQueueID {
    get {return _id ?? Cloud_Lazycat_Apis_Common_TaskQueueID()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var status: Cloud_Lazycat_Apis_Common_QueueStatus = .running

  public var tasks: [Cloud_Lazycat_Apis_Common_Task] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: Cloud_Lazycat_Apis_Common_TaskQueueID? = nil
}

public struct Cloud_Lazycat_Apis_Common_TaskQueueQueryReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Cloud_Lazycat_Apis_Common_TaskQueueID {
    get {return _id ?? Cloud_Lazycat_Apis_Common_TaskQueueID()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var status: [Cloud_Lazycat_Apis_Common_TaskStatus] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: Cloud_Lazycat_Apis_Common_TaskQueueID? = nil
}

public struct Cloud_Lazycat_Apis_Common_QueueMessageResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Cloud_Lazycat_Apis_Common_TaskID {
    get {return _storage._id ?? Cloud_Lazycat_Apis_Common_TaskID()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var task: Cloud_Lazycat_Apis_Common_Task {
    get {return _storage._task ?? Cloud_Lazycat_Apis_Common_Task()}
    set {_uniqueStorage()._task = newValue}
  }
  /// Returns true if `task` has been explicitly set.
  public var hasTask: Bool {return _storage._task != nil}
  /// Clears the value of `task`. Subsequent reads from it will return its default value.
  public mutating func clearTask() {_uniqueStorage()._task = nil}

  public var action: Cloud_Lazycat_Apis_Common_MsgAction {
    get {return _storage._action}
    set {_uniqueStorage()._action = newValue}
  }

  public var status: Cloud_Lazycat_Apis_Common_TaskStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var errorMessage: String {
    get {return _storage._errorMessage ?? String()}
    set {_uniqueStorage()._errorMessage = newValue}
  }
  /// Returns true if `errorMessage` has been explicitly set.
  public var hasErrorMessage: Bool {return _storage._errorMessage != nil}
  /// Clears the value of `errorMessage`. Subsequent reads from it will return its default value.
  public mutating func clearErrorMessage() {_uniqueStorage()._errorMessage = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Cloud_Lazycat_Apis_Common_TaskQueueListResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ids: [Cloud_Lazycat_Apis_Common_TaskQueueID] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Lazycat_Apis_Common_TaskStatus: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_QueueStatus: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_MsgAction: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_FileLocation: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_FileLocation.FileLocationType: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_TaskCreateRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_TaskID: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_TransmitInfo: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_Task: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_TaskQueueConfig: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_TaskQueueID: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_TaskQueueConfigReq: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_TaskQueue: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_FileTaskQueueResp: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_TaskQueueQueryReq: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_QueueMessageResp: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_TaskQueueListResp: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.lazycat.apis.common"

extension Cloud_Lazycat_Apis_Common_TaskStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Pending"),
    1: .same(proto: "Transmitting"),
    2: .same(proto: "Paused"),
    3: .same(proto: "Finished"),
    4: .same(proto: "Failed"),
  ]
}

extension Cloud_Lazycat_Apis_Common_QueueStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Running"),
    1: .same(proto: "Suspend"),
  ]
}

extension Cloud_Lazycat_Apis_Common_MsgAction: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Add"),
    1: .same(proto: "Del"),
  ]
}

extension Cloud_Lazycat_Apis_Common_FileLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FileLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "location_type"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.locationType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.locationType != .url {
      try visitor.visitSingularEnumField(value: self.locationType, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_FileLocation, rhs: Cloud_Lazycat_Apis_Common_FileLocation) -> Bool {
    if lhs.locationType != rhs.locationType {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_FileLocation.FileLocationType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Url"),
    2: .same(proto: "Local"),
  ]
}

extension Cloud_Lazycat_Apis_Common_TaskCreateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TaskCreateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "src"),
    2: .same(proto: "dst"),
    3: .same(proto: "name"),
    4: .standard(proto: "queue_id"),
    5: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._src) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._dst) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._queueID) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._src {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._dst {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try { if let v = self._queueID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_TaskCreateRequest, rhs: Cloud_Lazycat_Apis_Common_TaskCreateRequest) -> Bool {
    if lhs._src != rhs._src {return false}
    if lhs._dst != rhs._dst {return false}
    if lhs.name != rhs.name {return false}
    if lhs._queueID != rhs._queueID {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_TaskID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TaskID"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_TaskID, rhs: Cloud_Lazycat_Apis_Common_TaskID) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_TransmitInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransmitInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
    2: .same(proto: "transmitted"),
    3: .same(proto: "speed"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.total) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.transmitted) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.speed) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularInt64Field(value: self.total, fieldNumber: 1)
    }
    if self.transmitted != 0 {
      try visitor.visitSingularInt64Field(value: self.transmitted, fieldNumber: 2)
    }
    if self.speed != 0 {
      try visitor.visitSingularInt64Field(value: self.speed, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_TransmitInfo, rhs: Cloud_Lazycat_Apis_Common_TransmitInfo) -> Bool {
    if lhs.total != rhs.total {return false}
    if lhs.transmitted != rhs.transmitted {return false}
    if lhs.speed != rhs.speed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_Task: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Task"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "src"),
    3: .same(proto: "dst"),
    4: .standard(proto: "file_name"),
    5: .standard(proto: "mime_type"),
    6: .same(proto: "status"),
    7: .same(proto: "size"),
    8: .same(proto: "info"),
    9: .standard(proto: "created_at"),
    10: .standard(proto: "updated_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._src) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._dst) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.fileName) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.mimeType) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self._size) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._src {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._dst {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.fileName.isEmpty {
      try visitor.visitSingularStringField(value: self.fileName, fieldNumber: 4)
    }
    if !self.mimeType.isEmpty {
      try visitor.visitSingularStringField(value: self.mimeType, fieldNumber: 5)
    }
    if self.status != .pending {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 6)
    }
    try { if let v = self._size {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_Task, rhs: Cloud_Lazycat_Apis_Common_Task) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._src != rhs._src {return false}
    if lhs._dst != rhs._dst {return false}
    if lhs.fileName != rhs.fileName {return false}
    if lhs.mimeType != rhs.mimeType {return false}
    if lhs.status != rhs.status {return false}
    if lhs._size != rhs._size {return false}
    if lhs._info != rhs._info {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_TaskQueueConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TaskQueueConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_parallel"),
    2: .standard(proto: "max_rate_per_file"),
    3: .standard(proto: "max_rate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.maxParallel) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.maxRatePerFile) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.maxRate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.maxParallel != 0 {
      try visitor.visitSingularInt64Field(value: self.maxParallel, fieldNumber: 1)
    }
    if self.maxRatePerFile != 0 {
      try visitor.visitSingularInt64Field(value: self.maxRatePerFile, fieldNumber: 2)
    }
    if self.maxRate != 0 {
      try visitor.visitSingularInt64Field(value: self.maxRate, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_TaskQueueConfig, rhs: Cloud_Lazycat_Apis_Common_TaskQueueConfig) -> Bool {
    if lhs.maxParallel != rhs.maxParallel {return false}
    if lhs.maxRatePerFile != rhs.maxRatePerFile {return false}
    if lhs.maxRate != rhs.maxRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_TaskQueueID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TaskQueueID"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_TaskQueueID, rhs: Cloud_Lazycat_Apis_Common_TaskQueueID) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_TaskQueueConfigReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TaskQueueConfigReq"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_TaskQueueConfigReq, rhs: Cloud_Lazycat_Apis_Common_TaskQueueConfigReq) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._config != rhs._config {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_TaskQueue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TaskQueue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "status"),
    3: .same(proto: "tasks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.tasks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.status != .running {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if !self.tasks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tasks, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_TaskQueue, rhs: Cloud_Lazycat_Apis_Common_TaskQueue) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.status != rhs.status {return false}
    if lhs.tasks != rhs.tasks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_FileTaskQueueResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FileTaskQueueResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "status"),
    3: .same(proto: "tasks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.tasks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.status != .running {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if !self.tasks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tasks, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_FileTaskQueueResp, rhs: Cloud_Lazycat_Apis_Common_FileTaskQueueResp) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.status != rhs.status {return false}
    if lhs.tasks != rhs.tasks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_TaskQueueQueryReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TaskQueueQueryReq"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 2: try { try decoder.decodeRepeatedEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.status.isEmpty {
      try visitor.visitPackedEnumField(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_TaskQueueQueryReq, rhs: Cloud_Lazycat_Apis_Common_TaskQueueQueryReq) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_QueueMessageResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueueMessageResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "task"),
    3: .same(proto: "action"),
    4: .same(proto: "status"),
    5: .standard(proto: "error_message"),
  ]

  fileprivate class _StorageClass {
    var _id: Cloud_Lazycat_Apis_Common_TaskID? = nil
    var _task: Cloud_Lazycat_Apis_Common_Task? = nil
    var _action: Cloud_Lazycat_Apis_Common_MsgAction = .add
    var _status: Cloud_Lazycat_Apis_Common_TaskStatus = .pending
    var _errorMessage: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _task = source._task
      _action = source._action
      _status = source._status
      _errorMessage = source._errorMessage
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._task) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._action) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._errorMessage) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._task {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if _storage._action != .add {
        try visitor.visitSingularEnumField(value: _storage._action, fieldNumber: 3)
      }
      if _storage._status != .pending {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 4)
      }
      try { if let v = _storage._errorMessage {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_QueueMessageResp, rhs: Cloud_Lazycat_Apis_Common_QueueMessageResp) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._task != rhs_storage._task {return false}
        if _storage._action != rhs_storage._action {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._errorMessage != rhs_storage._errorMessage {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_TaskQueueListResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TaskQueueListResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_TaskQueueListResp, rhs: Cloud_Lazycat_Apis_Common_TaskQueueListResp) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
