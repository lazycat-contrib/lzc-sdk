// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common/box.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Cloud_Lazycat_Apis_Common_BoxInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 硬件唯一ID,出厂后则不再变化
  public var udid: String = String()

  /// 盒子的唯一名称，此名称是向中心化服务器注册产生，创建后不可修改
  public var boxName: String = String()

  /// 盒子的唯一域名
  public var boxDomain: String = String()

  /// 盒子内部显示名称，可以随意修改，若不设置则为box_name
  public var displayName: String = String()

  public var diskSpace: Cloud_Lazycat_Apis_Common_BoxInfo.DiskSpace {
    get {return _diskSpace ?? Cloud_Lazycat_Apis_Common_BoxInfo.DiskSpace()}
    set {_diskSpace = newValue}
  }
  /// Returns true if `diskSpace` has been explicitly set.
  public var hasDiskSpace: Bool {return self._diskSpace != nil}
  /// Clears the value of `diskSpace`. Subsequent reads from it will return its default value.
  public mutating func clearDiskSpace() {self._diskSpace = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DiskSpace {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var total: Int64 = 0

    public var free: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _diskSpace: Cloud_Lazycat_Apis_Common_BoxInfo.DiskSpace? = nil
}

public struct Cloud_Lazycat_Apis_Common_ChangeDisplayNameRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var displayName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cloud_Lazycat_Apis_Common_ShutdownRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var action: Cloud_Lazycat_Apis_Common_ShutdownRequest.Action = .poweroff

  public var reasone: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Action: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case poweroff // = 0
    case halt // = 1
    case reboot // = 2
    case hybridSleep // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .poweroff
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .poweroff
      case 1: self = .halt
      case 2: self = .reboot
      case 3: self = .hybridSleep
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .poweroff: return 0
      case .halt: return 1
      case .reboot: return 2
      case .hybridSleep: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Cloud_Lazycat_Apis_Common_ShutdownRequest.Action: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Common_ShutdownRequest.Action] = [
    .poweroff,
    .halt,
    .reboot,
    .hybridSleep,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Lazycat_Apis_Common_BoxInfo: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_BoxInfo.DiskSpace: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_ChangeDisplayNameRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_ShutdownRequest: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_ShutdownRequest.Action: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.lazycat.apis.common"

extension Cloud_Lazycat_Apis_Common_BoxInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BoxInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "udid"),
    2: .standard(proto: "box_name"),
    3: .standard(proto: "box_domain"),
    4: .standard(proto: "display_name"),
    5: .standard(proto: "disk_space"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.udid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.boxName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.boxDomain) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._diskSpace) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.udid.isEmpty {
      try visitor.visitSingularStringField(value: self.udid, fieldNumber: 1)
    }
    if !self.boxName.isEmpty {
      try visitor.visitSingularStringField(value: self.boxName, fieldNumber: 2)
    }
    if !self.boxDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.boxDomain, fieldNumber: 3)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 4)
    }
    try { if let v = self._diskSpace {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_BoxInfo, rhs: Cloud_Lazycat_Apis_Common_BoxInfo) -> Bool {
    if lhs.udid != rhs.udid {return false}
    if lhs.boxName != rhs.boxName {return false}
    if lhs.boxDomain != rhs.boxDomain {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs._diskSpace != rhs._diskSpace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_BoxInfo.DiskSpace: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Cloud_Lazycat_Apis_Common_BoxInfo.protoMessageName + ".DiskSpace"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
    2: .same(proto: "free"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.total) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.free) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularInt64Field(value: self.total, fieldNumber: 1)
    }
    if self.free != 0 {
      try visitor.visitSingularInt64Field(value: self.free, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_BoxInfo.DiskSpace, rhs: Cloud_Lazycat_Apis_Common_BoxInfo.DiskSpace) -> Bool {
    if lhs.total != rhs.total {return false}
    if lhs.free != rhs.free {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_ChangeDisplayNameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChangeDisplayNameRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "display_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_ChangeDisplayNameRequest, rhs: Cloud_Lazycat_Apis_Common_ChangeDisplayNameRequest) -> Bool {
    if lhs.displayName != rhs.displayName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_ShutdownRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShutdownRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
    2: .same(proto: "reasone"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.reasone) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.action != .poweroff {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 1)
    }
    if !self.reasone.isEmpty {
      try visitor.visitSingularStringField(value: self.reasone, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_ShutdownRequest, rhs: Cloud_Lazycat_Apis_Common_ShutdownRequest) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs.reasone != rhs.reasone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cloud_Lazycat_Apis_Common_ShutdownRequest.Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Poweroff"),
    1: .same(proto: "Halt"),
    2: .same(proto: "Reboot"),
    3: .same(proto: "HybridSleep"),
  ]
}
