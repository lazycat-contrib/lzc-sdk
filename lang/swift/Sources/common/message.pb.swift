// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Cloud_Lazycat_Apis_Common_MsgType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 普通消息
  case normal // = 0

  /// 用户安装应用权限被修改
  case userInstallPermission // = 1

  /// 用户可见权限被修改
  case userAllowPermission // = 2

  /// 安装了新应用
  case installNewApp // = 3

  /// 新用户加入盒子
  case newUser // = 4

  /// 盒子升级
  case boxUpgrade // = 5

  /// 应用升级
  case appUpgrade // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .normal
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .normal
    case 1: self = .userInstallPermission
    case 2: self = .userAllowPermission
    case 3: self = .installNewApp
    case 4: self = .newUser
    case 5: self = .boxUpgrade
    case 6: self = .appUpgrade
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .normal: return 0
    case .userInstallPermission: return 1
    case .userAllowPermission: return 2
    case .installNewApp: return 3
    case .newUser: return 4
    case .boxUpgrade: return 5
    case .appUpgrade: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cloud_Lazycat_Apis_Common_MsgType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Cloud_Lazycat_Apis_Common_MsgType] = [
    .normal,
    .userInstallPermission,
    .userAllowPermission,
    .installNewApp,
    .newUser,
    .boxUpgrade,
    .appUpgrade,
  ]
}

#endif  // swift(>=4.2)

public struct Cloud_Lazycat_Apis_Common_Msg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var messageType: Cloud_Lazycat_Apis_Common_MsgType = .normal

  public var title: String = String()

  public var content: String = String()

  public var meta: String = String()

  public var createTime: Int64 = 0

  public var readTime: Int64 = 0

  public var receiver: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cloud_Lazycat_Apis_Common_MsgType: @unchecked Sendable {}
extension Cloud_Lazycat_Apis_Common_Msg: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cloud.lazycat.apis.common"

extension Cloud_Lazycat_Apis_Common_MsgType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NORMAL"),
    1: .same(proto: "USER_INSTALL_PERMISSION"),
    2: .same(proto: "USER_ALLOW_PERMISSION"),
    3: .same(proto: "INSTALL_NEW_APP"),
    4: .same(proto: "NEW_USER"),
    5: .same(proto: "BOX_UPGRADE"),
    6: .same(proto: "APP_UPGRADE"),
  ]
}

extension Cloud_Lazycat_Apis_Common_Msg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Msg"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "message_type"),
    3: .same(proto: "title"),
    4: .same(proto: "content"),
    5: .same(proto: "meta"),
    6: .standard(proto: "create_time"),
    7: .standard(proto: "read_time"),
    8: .same(proto: "receiver"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.messageType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.meta) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.createTime) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.readTime) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.receiver) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.messageType != .normal {
      try visitor.visitSingularEnumField(value: self.messageType, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 4)
    }
    if !self.meta.isEmpty {
      try visitor.visitSingularStringField(value: self.meta, fieldNumber: 5)
    }
    if self.createTime != 0 {
      try visitor.visitSingularInt64Field(value: self.createTime, fieldNumber: 6)
    }
    if self.readTime != 0 {
      try visitor.visitSingularInt64Field(value: self.readTime, fieldNumber: 7)
    }
    if !self.receiver.isEmpty {
      try visitor.visitSingularStringField(value: self.receiver, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cloud_Lazycat_Apis_Common_Msg, rhs: Cloud_Lazycat_Apis_Common_Msg) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.messageType != rhs.messageType {return false}
    if lhs.title != rhs.title {return false}
    if lhs.content != rhs.content {return false}
    if lhs.meta != rhs.meta {return false}
    if lhs.createTime != rhs.createTime {return false}
    if lhs.readTime != rhs.readTime {return false}
    if lhs.receiver != rhs.receiver {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
