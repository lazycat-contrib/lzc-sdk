// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: localdevice/network.proto

package localdevice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkManager_Query_FullMethodName = "/cloud.lazycat.apis.localdevice.NetworkManager/Query"
)

// NetworkManagerClient is the client API for NetworkManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkManagerClient interface {
	Query(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NetworkInformation, error)
}

type networkManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkManagerClient(cc grpc.ClientConnInterface) NetworkManagerClient {
	return &networkManagerClient{cc}
}

func (c *networkManagerClient) Query(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NetworkInformation, error) {
	out := new(NetworkInformation)
	err := c.cc.Invoke(ctx, NetworkManager_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkManagerServer is the server API for NetworkManager service.
// All implementations must embed UnimplementedNetworkManagerServer
// for forward compatibility
type NetworkManagerServer interface {
	Query(context.Context, *emptypb.Empty) (*NetworkInformation, error)
	mustEmbedUnimplementedNetworkManagerServer()
}

// UnimplementedNetworkManagerServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkManagerServer struct {
}

func (UnimplementedNetworkManagerServer) Query(context.Context, *emptypb.Empty) (*NetworkInformation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedNetworkManagerServer) mustEmbedUnimplementedNetworkManagerServer() {}

// UnsafeNetworkManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkManagerServer will
// result in compilation errors.
type UnsafeNetworkManagerServer interface {
	mustEmbedUnimplementedNetworkManagerServer()
}

func RegisterNetworkManagerServer(s grpc.ServiceRegistrar, srv NetworkManagerServer) {
	s.RegisterService(&NetworkManager_ServiceDesc, srv)
}

func _NetworkManager_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagerServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkManager_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagerServer).Query(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkManager_ServiceDesc is the grpc.ServiceDesc for NetworkManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.localdevice.NetworkManager",
	HandlerType: (*NetworkManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _NetworkManager_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "localdevice/network.proto",
}
