// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: localdevice/cloud-driver.proto

package localdevice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudDriver_EnableAutoMount_FullMethodName   = "/cloud.lazycat.apis.localdevice.CloudDriver/EnableAutoMount"
	CloudDriver_IsEnableAutoMount_FullMethodName = "/cloud.lazycat.apis.localdevice.CloudDriver/IsEnableAutoMount"
	CloudDriver_OpenFile_FullMethodName          = "/cloud.lazycat.apis.localdevice.CloudDriver/OpenFile"
)

// CloudDriverClient is the client API for CloudDriver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudDriverClient interface {
	EnableAutoMount(ctx context.Context, in *EnableAutoMountRequest, opts ...grpc.CallOption) (*EnableAutoMountReply, error)
	IsEnableAutoMount(ctx context.Context, in *IsEnableAutoMountRequest, opts ...grpc.CallOption) (*IsEnableAutoMountReply, error)
	OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (*OpenFileReply, error)
}

type cloudDriverClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudDriverClient(cc grpc.ClientConnInterface) CloudDriverClient {
	return &cloudDriverClient{cc}
}

func (c *cloudDriverClient) EnableAutoMount(ctx context.Context, in *EnableAutoMountRequest, opts ...grpc.CallOption) (*EnableAutoMountReply, error) {
	out := new(EnableAutoMountReply)
	err := c.cc.Invoke(ctx, CloudDriver_EnableAutoMount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriverClient) IsEnableAutoMount(ctx context.Context, in *IsEnableAutoMountRequest, opts ...grpc.CallOption) (*IsEnableAutoMountReply, error) {
	out := new(IsEnableAutoMountReply)
	err := c.cc.Invoke(ctx, CloudDriver_IsEnableAutoMount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriverClient) OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (*OpenFileReply, error) {
	out := new(OpenFileReply)
	err := c.cc.Invoke(ctx, CloudDriver_OpenFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudDriverServer is the server API for CloudDriver service.
// All implementations must embed UnimplementedCloudDriverServer
// for forward compatibility
type CloudDriverServer interface {
	EnableAutoMount(context.Context, *EnableAutoMountRequest) (*EnableAutoMountReply, error)
	IsEnableAutoMount(context.Context, *IsEnableAutoMountRequest) (*IsEnableAutoMountReply, error)
	OpenFile(context.Context, *OpenFileRequest) (*OpenFileReply, error)
	mustEmbedUnimplementedCloudDriverServer()
}

// UnimplementedCloudDriverServer must be embedded to have forward compatible implementations.
type UnimplementedCloudDriverServer struct {
}

func (UnimplementedCloudDriverServer) EnableAutoMount(context.Context, *EnableAutoMountRequest) (*EnableAutoMountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAutoMount not implemented")
}
func (UnimplementedCloudDriverServer) IsEnableAutoMount(context.Context, *IsEnableAutoMountRequest) (*IsEnableAutoMountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEnableAutoMount not implemented")
}
func (UnimplementedCloudDriverServer) OpenFile(context.Context, *OpenFileRequest) (*OpenFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenFile not implemented")
}
func (UnimplementedCloudDriverServer) mustEmbedUnimplementedCloudDriverServer() {}

// UnsafeCloudDriverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudDriverServer will
// result in compilation errors.
type UnsafeCloudDriverServer interface {
	mustEmbedUnimplementedCloudDriverServer()
}

func RegisterCloudDriverServer(s grpc.ServiceRegistrar, srv CloudDriverServer) {
	s.RegisterService(&CloudDriver_ServiceDesc, srv)
}

func _CloudDriver_EnableAutoMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableAutoMountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriverServer).EnableAutoMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriver_EnableAutoMount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriverServer).EnableAutoMount(ctx, req.(*EnableAutoMountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriver_IsEnableAutoMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsEnableAutoMountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriverServer).IsEnableAutoMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriver_IsEnableAutoMount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriverServer).IsEnableAutoMount(ctx, req.(*IsEnableAutoMountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriver_OpenFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriverServer).OpenFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudDriver_OpenFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriverServer).OpenFile(ctx, req.(*OpenFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudDriver_ServiceDesc is the grpc.ServiceDesc for CloudDriver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudDriver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.localdevice.CloudDriver",
	HandlerType: (*CloudDriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableAutoMount",
			Handler:    _CloudDriver_EnableAutoMount_Handler,
		},
		{
			MethodName: "IsEnableAutoMount",
			Handler:    _CloudDriver_IsEnableAutoMount_Handler,
		},
		{
			MethodName: "OpenFile",
			Handler:    _CloudDriver_OpenFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "localdevice/cloud-driver.proto",
}
