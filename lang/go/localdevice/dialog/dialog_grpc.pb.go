// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: localdevice/dialog/dialog.proto

package dialog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DialogManagerClient is the client API for DialogManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DialogManagerClient interface {
	Question(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (*QuestionResult, error)
	MessageBox(ctx context.Context, in *MessageBoxRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Password(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*PasswordResult, error)
}

type dialogManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewDialogManagerClient(cc grpc.ClientConnInterface) DialogManagerClient {
	return &dialogManagerClient{cc}
}

func (c *dialogManagerClient) Question(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (*QuestionResult, error) {
	out := new(QuestionResult)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.localdevice.DialogManager/Question", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogManagerClient) MessageBox(ctx context.Context, in *MessageBoxRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.localdevice.DialogManager/MessageBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogManagerClient) Password(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*PasswordResult, error) {
	out := new(PasswordResult)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.localdevice.DialogManager/Password", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DialogManagerServer is the server API for DialogManager service.
// All implementations must embed UnimplementedDialogManagerServer
// for forward compatibility
type DialogManagerServer interface {
	Question(context.Context, *QuestionRequest) (*QuestionResult, error)
	MessageBox(context.Context, *MessageBoxRequest) (*emptypb.Empty, error)
	Password(context.Context, *PasswordRequest) (*PasswordResult, error)
	mustEmbedUnimplementedDialogManagerServer()
}

// UnimplementedDialogManagerServer must be embedded to have forward compatible implementations.
type UnimplementedDialogManagerServer struct {
}

func (UnimplementedDialogManagerServer) Question(context.Context, *QuestionRequest) (*QuestionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Question not implemented")
}
func (UnimplementedDialogManagerServer) MessageBox(context.Context, *MessageBoxRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageBox not implemented")
}
func (UnimplementedDialogManagerServer) Password(context.Context, *PasswordRequest) (*PasswordResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Password not implemented")
}
func (UnimplementedDialogManagerServer) mustEmbedUnimplementedDialogManagerServer() {}

// UnsafeDialogManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DialogManagerServer will
// result in compilation errors.
type UnsafeDialogManagerServer interface {
	mustEmbedUnimplementedDialogManagerServer()
}

func RegisterDialogManagerServer(s grpc.ServiceRegistrar, srv DialogManagerServer) {
	s.RegisterService(&DialogManager_ServiceDesc, srv)
}

func _DialogManager_Question_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogManagerServer).Question(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.localdevice.DialogManager/Question",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogManagerServer).Question(ctx, req.(*QuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogManager_MessageBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogManagerServer).MessageBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.localdevice.DialogManager/MessageBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogManagerServer).MessageBox(ctx, req.(*MessageBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogManager_Password_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogManagerServer).Password(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.localdevice.DialogManager/Password",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogManagerServer).Password(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DialogManager_ServiceDesc is the grpc.ServiceDesc for DialogManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DialogManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.localdevice.DialogManager",
	HandlerType: (*DialogManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Question",
			Handler:    _DialogManager_Question_Handler,
		},
		{
			MethodName: "MessageBox",
			Handler:    _DialogManager_MessageBox_Handler,
		},
		{
			MethodName: "Password",
			Handler:    _DialogManager_Password_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "localdevice/dialog/dialog.proto",
}
