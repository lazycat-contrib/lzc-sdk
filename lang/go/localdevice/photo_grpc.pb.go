// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: localdevice/photo.proto

package localdevice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PhotoLibraryClient is the client API for PhotoLibrary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhotoLibraryClient interface {
	// 列举所有的系统相册
	ListAlbums(ctx context.Context, in *ListAlbumsRequest, opts ...grpc.CallOption) (*ListAlbumsReply, error)
	// 存储一张图片到某个相册中
	PutPhoto(ctx context.Context, in *PutPhotoRequest, opts ...grpc.CallOption) (*PutPhotoReply, error)
	DeletePhoto(ctx context.Context, in *DeletePhotoRequest, opts ...grpc.CallOption) (*DeletePhotoReply, error)
	// 枚举具体相册中的图片元信息
	ListPhotoMetas(ctx context.Context, in *ListPhotoMetasRequest, opts ...grpc.CallOption) (PhotoLibrary_ListPhotoMetasClient, error)
	QueryPhoto(ctx context.Context, in *QueryPhotoRequest, opts ...grpc.CallOption) (*PhotoMeta, error)
	// PhotoHashSet的大小是不固定的，可能超出protobuf但message的限制(4MB)，因此以stream
	// 的形式返回。
	// 目前有两个使用场景
	// 1. 浏览器访问此接口获取某个图片是否在本地存在
	// 2. 服务端获取此集合并与服务器中存在的图片进行对比，获取未同步到服务器中的图片ID集合
	QueryPhotoHash(ctx context.Context, in *QueryPhotoHashRequest, opts ...grpc.CallOption) (PhotoLibrary_QueryPhotoHashClient, error)
}

type photoLibraryClient struct {
	cc grpc.ClientConnInterface
}

func NewPhotoLibraryClient(cc grpc.ClientConnInterface) PhotoLibraryClient {
	return &photoLibraryClient{cc}
}

func (c *photoLibraryClient) ListAlbums(ctx context.Context, in *ListAlbumsRequest, opts ...grpc.CallOption) (*ListAlbumsReply, error) {
	out := new(ListAlbumsReply)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.localdevice.PhotoLibrary/ListAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoLibraryClient) PutPhoto(ctx context.Context, in *PutPhotoRequest, opts ...grpc.CallOption) (*PutPhotoReply, error) {
	out := new(PutPhotoReply)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.localdevice.PhotoLibrary/PutPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoLibraryClient) DeletePhoto(ctx context.Context, in *DeletePhotoRequest, opts ...grpc.CallOption) (*DeletePhotoReply, error) {
	out := new(DeletePhotoReply)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.localdevice.PhotoLibrary/DeletePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoLibraryClient) ListPhotoMetas(ctx context.Context, in *ListPhotoMetasRequest, opts ...grpc.CallOption) (PhotoLibrary_ListPhotoMetasClient, error) {
	stream, err := c.cc.NewStream(ctx, &PhotoLibrary_ServiceDesc.Streams[0], "/cloud.lazycat.apis.localdevice.PhotoLibrary/ListPhotoMetas", opts...)
	if err != nil {
		return nil, err
	}
	x := &photoLibraryListPhotoMetasClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PhotoLibrary_ListPhotoMetasClient interface {
	Recv() (*PhotoMeta, error)
	grpc.ClientStream
}

type photoLibraryListPhotoMetasClient struct {
	grpc.ClientStream
}

func (x *photoLibraryListPhotoMetasClient) Recv() (*PhotoMeta, error) {
	m := new(PhotoMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *photoLibraryClient) QueryPhoto(ctx context.Context, in *QueryPhotoRequest, opts ...grpc.CallOption) (*PhotoMeta, error) {
	out := new(PhotoMeta)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.localdevice.PhotoLibrary/QueryPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoLibraryClient) QueryPhotoHash(ctx context.Context, in *QueryPhotoHashRequest, opts ...grpc.CallOption) (PhotoLibrary_QueryPhotoHashClient, error) {
	stream, err := c.cc.NewStream(ctx, &PhotoLibrary_ServiceDesc.Streams[1], "/cloud.lazycat.apis.localdevice.PhotoLibrary/QueryPhotoHash", opts...)
	if err != nil {
		return nil, err
	}
	x := &photoLibraryQueryPhotoHashClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PhotoLibrary_QueryPhotoHashClient interface {
	Recv() (*PhotoHashSet, error)
	grpc.ClientStream
}

type photoLibraryQueryPhotoHashClient struct {
	grpc.ClientStream
}

func (x *photoLibraryQueryPhotoHashClient) Recv() (*PhotoHashSet, error) {
	m := new(PhotoHashSet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PhotoLibraryServer is the server API for PhotoLibrary service.
// All implementations must embed UnimplementedPhotoLibraryServer
// for forward compatibility
type PhotoLibraryServer interface {
	// 列举所有的系统相册
	ListAlbums(context.Context, *ListAlbumsRequest) (*ListAlbumsReply, error)
	// 存储一张图片到某个相册中
	PutPhoto(context.Context, *PutPhotoRequest) (*PutPhotoReply, error)
	DeletePhoto(context.Context, *DeletePhotoRequest) (*DeletePhotoReply, error)
	// 枚举具体相册中的图片元信息
	ListPhotoMetas(*ListPhotoMetasRequest, PhotoLibrary_ListPhotoMetasServer) error
	QueryPhoto(context.Context, *QueryPhotoRequest) (*PhotoMeta, error)
	// PhotoHashSet的大小是不固定的，可能超出protobuf但message的限制(4MB)，因此以stream
	// 的形式返回。
	// 目前有两个使用场景
	// 1. 浏览器访问此接口获取某个图片是否在本地存在
	// 2. 服务端获取此集合并与服务器中存在的图片进行对比，获取未同步到服务器中的图片ID集合
	QueryPhotoHash(*QueryPhotoHashRequest, PhotoLibrary_QueryPhotoHashServer) error
	mustEmbedUnimplementedPhotoLibraryServer()
}

// UnimplementedPhotoLibraryServer must be embedded to have forward compatible implementations.
type UnimplementedPhotoLibraryServer struct {
}

func (UnimplementedPhotoLibraryServer) ListAlbums(context.Context, *ListAlbumsRequest) (*ListAlbumsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlbums not implemented")
}
func (UnimplementedPhotoLibraryServer) PutPhoto(context.Context, *PutPhotoRequest) (*PutPhotoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPhoto not implemented")
}
func (UnimplementedPhotoLibraryServer) DeletePhoto(context.Context, *DeletePhotoRequest) (*DeletePhotoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhoto not implemented")
}
func (UnimplementedPhotoLibraryServer) ListPhotoMetas(*ListPhotoMetasRequest, PhotoLibrary_ListPhotoMetasServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPhotoMetas not implemented")
}
func (UnimplementedPhotoLibraryServer) QueryPhoto(context.Context, *QueryPhotoRequest) (*PhotoMeta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPhoto not implemented")
}
func (UnimplementedPhotoLibraryServer) QueryPhotoHash(*QueryPhotoHashRequest, PhotoLibrary_QueryPhotoHashServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryPhotoHash not implemented")
}
func (UnimplementedPhotoLibraryServer) mustEmbedUnimplementedPhotoLibraryServer() {}

// UnsafePhotoLibraryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhotoLibraryServer will
// result in compilation errors.
type UnsafePhotoLibraryServer interface {
	mustEmbedUnimplementedPhotoLibraryServer()
}

func RegisterPhotoLibraryServer(s grpc.ServiceRegistrar, srv PhotoLibraryServer) {
	s.RegisterService(&PhotoLibrary_ServiceDesc, srv)
}

func _PhotoLibrary_ListAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlbumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoLibraryServer).ListAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.localdevice.PhotoLibrary/ListAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoLibraryServer).ListAlbums(ctx, req.(*ListAlbumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoLibrary_PutPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoLibraryServer).PutPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.localdevice.PhotoLibrary/PutPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoLibraryServer).PutPhoto(ctx, req.(*PutPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoLibrary_DeletePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoLibraryServer).DeletePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.localdevice.PhotoLibrary/DeletePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoLibraryServer).DeletePhoto(ctx, req.(*DeletePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoLibrary_ListPhotoMetas_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPhotoMetasRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PhotoLibraryServer).ListPhotoMetas(m, &photoLibraryListPhotoMetasServer{stream})
}

type PhotoLibrary_ListPhotoMetasServer interface {
	Send(*PhotoMeta) error
	grpc.ServerStream
}

type photoLibraryListPhotoMetasServer struct {
	grpc.ServerStream
}

func (x *photoLibraryListPhotoMetasServer) Send(m *PhotoMeta) error {
	return x.ServerStream.SendMsg(m)
}

func _PhotoLibrary_QueryPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoLibraryServer).QueryPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.localdevice.PhotoLibrary/QueryPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoLibraryServer).QueryPhoto(ctx, req.(*QueryPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoLibrary_QueryPhotoHash_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryPhotoHashRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PhotoLibraryServer).QueryPhotoHash(m, &photoLibraryQueryPhotoHashServer{stream})
}

type PhotoLibrary_QueryPhotoHashServer interface {
	Send(*PhotoHashSet) error
	grpc.ServerStream
}

type photoLibraryQueryPhotoHashServer struct {
	grpc.ServerStream
}

func (x *photoLibraryQueryPhotoHashServer) Send(m *PhotoHashSet) error {
	return x.ServerStream.SendMsg(m)
}

// PhotoLibrary_ServiceDesc is the grpc.ServiceDesc for PhotoLibrary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhotoLibrary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.localdevice.PhotoLibrary",
	HandlerType: (*PhotoLibraryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAlbums",
			Handler:    _PhotoLibrary_ListAlbums_Handler,
		},
		{
			MethodName: "PutPhoto",
			Handler:    _PhotoLibrary_PutPhoto_Handler,
		},
		{
			MethodName: "DeletePhoto",
			Handler:    _PhotoLibrary_DeletePhoto_Handler,
		},
		{
			MethodName: "QueryPhoto",
			Handler:    _PhotoLibrary_QueryPhoto_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPhotoMetas",
			Handler:       _PhotoLibrary_ListPhotoMetas_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryPhotoHash",
			Handler:       _PhotoLibrary_QueryPhotoHash_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "localdevice/photo.proto",
}
