// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: localdevice/local-launch.proto

package localdevice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LocalLaunchService_PinApp_FullMethodName        = "/cloud.lazycat.apis.localdevice.LocalLaunchService/PinApp"
	LocalLaunchService_UnPinApp_FullMethodName      = "/cloud.lazycat.apis.localdevice.LocalLaunchService/UnPinApp"
	LocalLaunchService_OpenApp_FullMethodName       = "/cloud.lazycat.apis.localdevice.LocalLaunchService/OpenApp"
	LocalLaunchService_OpenUnsafeApp_FullMethodName = "/cloud.lazycat.apis.localdevice.LocalLaunchService/OpenUnsafeApp"
	LocalLaunchService_OpenAppMethod_FullMethodName = "/cloud.lazycat.apis.localdevice.LocalLaunchService/OpenAppMethod"
)

// LocalLaunchServiceClient is the client API for LocalLaunchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalLaunchServiceClient interface {
	// 创建快捷方式
	PinApp(ctx context.Context, in *PinAppRequest, opts ...grpc.CallOption) (*PinAppReply, error)
	// 删除快捷方式
	UnPinApp(ctx context.Context, in *UnPinAppRequest, opts ...grpc.CallOption) (*UnPinAppReply, error)
	// 打开指定的懒猫云应用
	OpenApp(ctx context.Context, in *OpenAppRequest, opts ...grpc.CallOption) (*OpenAppReply, error)
	// 使用不安全模式打开指定APP
	// App页面由两个webview组成：一个control-view,一个content-view
	// 其中app渲染在control-view中，content-view的内容由App代码控制
	OpenUnsafeApp(ctx context.Context, in *OpenUnsafeAppRequest, opts ...grpc.CallOption) (*OpenAppReply, error)
	// 当前设备支持的应用打开方式
	OpenAppMethod(ctx context.Context, in *OpenAppMethodRequest, opts ...grpc.CallOption) (*OpenAppMethodReply, error)
}

type localLaunchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalLaunchServiceClient(cc grpc.ClientConnInterface) LocalLaunchServiceClient {
	return &localLaunchServiceClient{cc}
}

func (c *localLaunchServiceClient) PinApp(ctx context.Context, in *PinAppRequest, opts ...grpc.CallOption) (*PinAppReply, error) {
	out := new(PinAppReply)
	err := c.cc.Invoke(ctx, LocalLaunchService_PinApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localLaunchServiceClient) UnPinApp(ctx context.Context, in *UnPinAppRequest, opts ...grpc.CallOption) (*UnPinAppReply, error) {
	out := new(UnPinAppReply)
	err := c.cc.Invoke(ctx, LocalLaunchService_UnPinApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localLaunchServiceClient) OpenApp(ctx context.Context, in *OpenAppRequest, opts ...grpc.CallOption) (*OpenAppReply, error) {
	out := new(OpenAppReply)
	err := c.cc.Invoke(ctx, LocalLaunchService_OpenApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localLaunchServiceClient) OpenUnsafeApp(ctx context.Context, in *OpenUnsafeAppRequest, opts ...grpc.CallOption) (*OpenAppReply, error) {
	out := new(OpenAppReply)
	err := c.cc.Invoke(ctx, LocalLaunchService_OpenUnsafeApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localLaunchServiceClient) OpenAppMethod(ctx context.Context, in *OpenAppMethodRequest, opts ...grpc.CallOption) (*OpenAppMethodReply, error) {
	out := new(OpenAppMethodReply)
	err := c.cc.Invoke(ctx, LocalLaunchService_OpenAppMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalLaunchServiceServer is the server API for LocalLaunchService service.
// All implementations must embed UnimplementedLocalLaunchServiceServer
// for forward compatibility
type LocalLaunchServiceServer interface {
	// 创建快捷方式
	PinApp(context.Context, *PinAppRequest) (*PinAppReply, error)
	// 删除快捷方式
	UnPinApp(context.Context, *UnPinAppRequest) (*UnPinAppReply, error)
	// 打开指定的懒猫云应用
	OpenApp(context.Context, *OpenAppRequest) (*OpenAppReply, error)
	// 使用不安全模式打开指定APP
	// App页面由两个webview组成：一个control-view,一个content-view
	// 其中app渲染在control-view中，content-view的内容由App代码控制
	OpenUnsafeApp(context.Context, *OpenUnsafeAppRequest) (*OpenAppReply, error)
	// 当前设备支持的应用打开方式
	OpenAppMethod(context.Context, *OpenAppMethodRequest) (*OpenAppMethodReply, error)
	mustEmbedUnimplementedLocalLaunchServiceServer()
}

// UnimplementedLocalLaunchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLocalLaunchServiceServer struct {
}

func (UnimplementedLocalLaunchServiceServer) PinApp(context.Context, *PinAppRequest) (*PinAppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinApp not implemented")
}
func (UnimplementedLocalLaunchServiceServer) UnPinApp(context.Context, *UnPinAppRequest) (*UnPinAppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnPinApp not implemented")
}
func (UnimplementedLocalLaunchServiceServer) OpenApp(context.Context, *OpenAppRequest) (*OpenAppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenApp not implemented")
}
func (UnimplementedLocalLaunchServiceServer) OpenUnsafeApp(context.Context, *OpenUnsafeAppRequest) (*OpenAppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenUnsafeApp not implemented")
}
func (UnimplementedLocalLaunchServiceServer) OpenAppMethod(context.Context, *OpenAppMethodRequest) (*OpenAppMethodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenAppMethod not implemented")
}
func (UnimplementedLocalLaunchServiceServer) mustEmbedUnimplementedLocalLaunchServiceServer() {}

// UnsafeLocalLaunchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalLaunchServiceServer will
// result in compilation errors.
type UnsafeLocalLaunchServiceServer interface {
	mustEmbedUnimplementedLocalLaunchServiceServer()
}

func RegisterLocalLaunchServiceServer(s grpc.ServiceRegistrar, srv LocalLaunchServiceServer) {
	s.RegisterService(&LocalLaunchService_ServiceDesc, srv)
}

func _LocalLaunchService_PinApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalLaunchServiceServer).PinApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalLaunchService_PinApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalLaunchServiceServer).PinApp(ctx, req.(*PinAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalLaunchService_UnPinApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnPinAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalLaunchServiceServer).UnPinApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalLaunchService_UnPinApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalLaunchServiceServer).UnPinApp(ctx, req.(*UnPinAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalLaunchService_OpenApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalLaunchServiceServer).OpenApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalLaunchService_OpenApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalLaunchServiceServer).OpenApp(ctx, req.(*OpenAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalLaunchService_OpenUnsafeApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenUnsafeAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalLaunchServiceServer).OpenUnsafeApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalLaunchService_OpenUnsafeApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalLaunchServiceServer).OpenUnsafeApp(ctx, req.(*OpenUnsafeAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalLaunchService_OpenAppMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenAppMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalLaunchServiceServer).OpenAppMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalLaunchService_OpenAppMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalLaunchServiceServer).OpenAppMethod(ctx, req.(*OpenAppMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalLaunchService_ServiceDesc is the grpc.ServiceDesc for LocalLaunchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalLaunchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.localdevice.LocalLaunchService",
	HandlerType: (*LocalLaunchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PinApp",
			Handler:    _LocalLaunchService_PinApp_Handler,
		},
		{
			MethodName: "UnPinApp",
			Handler:    _LocalLaunchService_UnPinApp_Handler,
		},
		{
			MethodName: "OpenApp",
			Handler:    _LocalLaunchService_OpenApp_Handler,
		},
		{
			MethodName: "OpenUnsafeApp",
			Handler:    _LocalLaunchService_OpenUnsafeApp_Handler,
		},
		{
			MethodName: "OpenAppMethod",
			Handler:    _LocalLaunchService_OpenAppMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "localdevice/local-launch.proto",
}
