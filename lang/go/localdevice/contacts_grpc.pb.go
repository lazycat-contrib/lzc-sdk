// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: localdevice/contacts.proto

package localdevice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContactsManager_ListContacts_FullMethodName   = "/cloud.lazycat.apis.localdevice.ContactsManager/ListContacts"
	ContactsManager_AddContacts_FullMethodName    = "/cloud.lazycat.apis.localdevice.ContactsManager/AddContacts"
	ContactsManager_DeleteContacts_FullMethodName = "/cloud.lazycat.apis.localdevice.ContactsManager/DeleteContacts"
	ContactsManager_UpdateContacts_FullMethodName = "/cloud.lazycat.apis.localdevice.ContactsManager/UpdateContacts"
)

// ContactsManagerClient is the client API for ContactsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactsManagerClient interface {
	// 获取全部联系人列表
	ListContacts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListContactsReply, error)
	// 添加联系人到通讯录
	AddContacts(ctx context.Context, in *AddContactsRequest, opts ...grpc.CallOption) (*AddContactsReply, error)
	// 从通讯录删除联系人
	DeleteContacts(ctx context.Context, in *DeleteContactsRequest, opts ...grpc.CallOption) (*DeleteContactsReply, error)
	// 修改通讯录的联系人
	UpdateContacts(ctx context.Context, in *UpdateContactsRequest, opts ...grpc.CallOption) (*UpdateContactsReply, error)
}

type contactsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewContactsManagerClient(cc grpc.ClientConnInterface) ContactsManagerClient {
	return &contactsManagerClient{cc}
}

func (c *contactsManagerClient) ListContacts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListContactsReply, error) {
	out := new(ListContactsReply)
	err := c.cc.Invoke(ctx, ContactsManager_ListContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsManagerClient) AddContacts(ctx context.Context, in *AddContactsRequest, opts ...grpc.CallOption) (*AddContactsReply, error) {
	out := new(AddContactsReply)
	err := c.cc.Invoke(ctx, ContactsManager_AddContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsManagerClient) DeleteContacts(ctx context.Context, in *DeleteContactsRequest, opts ...grpc.CallOption) (*DeleteContactsReply, error) {
	out := new(DeleteContactsReply)
	err := c.cc.Invoke(ctx, ContactsManager_DeleteContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsManagerClient) UpdateContacts(ctx context.Context, in *UpdateContactsRequest, opts ...grpc.CallOption) (*UpdateContactsReply, error) {
	out := new(UpdateContactsReply)
	err := c.cc.Invoke(ctx, ContactsManager_UpdateContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactsManagerServer is the server API for ContactsManager service.
// All implementations must embed UnimplementedContactsManagerServer
// for forward compatibility
type ContactsManagerServer interface {
	// 获取全部联系人列表
	ListContacts(context.Context, *emptypb.Empty) (*ListContactsReply, error)
	// 添加联系人到通讯录
	AddContacts(context.Context, *AddContactsRequest) (*AddContactsReply, error)
	// 从通讯录删除联系人
	DeleteContacts(context.Context, *DeleteContactsRequest) (*DeleteContactsReply, error)
	// 修改通讯录的联系人
	UpdateContacts(context.Context, *UpdateContactsRequest) (*UpdateContactsReply, error)
	mustEmbedUnimplementedContactsManagerServer()
}

// UnimplementedContactsManagerServer must be embedded to have forward compatible implementations.
type UnimplementedContactsManagerServer struct {
}

func (UnimplementedContactsManagerServer) ListContacts(context.Context, *emptypb.Empty) (*ListContactsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContacts not implemented")
}
func (UnimplementedContactsManagerServer) AddContacts(context.Context, *AddContactsRequest) (*AddContactsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContacts not implemented")
}
func (UnimplementedContactsManagerServer) DeleteContacts(context.Context, *DeleteContactsRequest) (*DeleteContactsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContacts not implemented")
}
func (UnimplementedContactsManagerServer) UpdateContacts(context.Context, *UpdateContactsRequest) (*UpdateContactsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContacts not implemented")
}
func (UnimplementedContactsManagerServer) mustEmbedUnimplementedContactsManagerServer() {}

// UnsafeContactsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactsManagerServer will
// result in compilation errors.
type UnsafeContactsManagerServer interface {
	mustEmbedUnimplementedContactsManagerServer()
}

func RegisterContactsManagerServer(s grpc.ServiceRegistrar, srv ContactsManagerServer) {
	s.RegisterService(&ContactsManager_ServiceDesc, srv)
}

func _ContactsManager_ListContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsManagerServer).ListContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactsManager_ListContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsManagerServer).ListContacts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactsManager_AddContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsManagerServer).AddContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactsManager_AddContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsManagerServer).AddContacts(ctx, req.(*AddContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactsManager_DeleteContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsManagerServer).DeleteContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactsManager_DeleteContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsManagerServer).DeleteContacts(ctx, req.(*DeleteContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactsManager_UpdateContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsManagerServer).UpdateContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactsManager_UpdateContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsManagerServer).UpdateContacts(ctx, req.(*UpdateContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactsManager_ServiceDesc is the grpc.ServiceDesc for ContactsManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.localdevice.ContactsManager",
	HandlerType: (*ContactsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListContacts",
			Handler:    _ContactsManager_ListContacts_Handler,
		},
		{
			MethodName: "AddContacts",
			Handler:    _ContactsManager_AddContacts_Handler,
		},
		{
			MethodName: "DeleteContacts",
			Handler:    _ContactsManager_DeleteContacts_Handler,
		},
		{
			MethodName: "UpdateContacts",
			Handler:    _ContactsManager_UpdateContacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "localdevice/contacts.proto",
}
