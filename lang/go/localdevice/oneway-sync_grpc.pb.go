// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: localdevice/oneway-sync.proto

package localdevice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OnewaySync_ListSyncDir_FullMethodName = "/cloud.lazycat.apis.localdevice.OnewaySync/ListSyncDir"
	OnewaySync_NewSyncDir_FullMethodName  = "/cloud.lazycat.apis.localdevice.OnewaySync/NewSyncDir"
	OnewaySync_DoSync_FullMethodName      = "/cloud.lazycat.apis.localdevice.OnewaySync/DoSync"
)

// OnewaySyncClient is the client API for OnewaySync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnewaySyncClient interface {
	// 列出所有符合来源微服和用户的同步目录j
	ListSyncDir(ctx context.Context, in *RequestSyncDir, opts ...grpc.CallOption) (*ResponseListSyncDir, error)
	// 新建一个同步目录
	NewSyncDir(ctx context.Context, in *RequestSyncDir, opts ...grpc.CallOption) (*SyncDir, error)
	// 主动做一次同步，目标是来源微服和来源用户的同步目录
	DoSync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SyncDir, error)
}

type onewaySyncClient struct {
	cc grpc.ClientConnInterface
}

func NewOnewaySyncClient(cc grpc.ClientConnInterface) OnewaySyncClient {
	return &onewaySyncClient{cc}
}

func (c *onewaySyncClient) ListSyncDir(ctx context.Context, in *RequestSyncDir, opts ...grpc.CallOption) (*ResponseListSyncDir, error) {
	out := new(ResponseListSyncDir)
	err := c.cc.Invoke(ctx, OnewaySync_ListSyncDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onewaySyncClient) NewSyncDir(ctx context.Context, in *RequestSyncDir, opts ...grpc.CallOption) (*SyncDir, error) {
	out := new(SyncDir)
	err := c.cc.Invoke(ctx, OnewaySync_NewSyncDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onewaySyncClient) DoSync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SyncDir, error) {
	out := new(SyncDir)
	err := c.cc.Invoke(ctx, OnewaySync_DoSync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnewaySyncServer is the server API for OnewaySync service.
// All implementations must embed UnimplementedOnewaySyncServer
// for forward compatibility
type OnewaySyncServer interface {
	// 列出所有符合来源微服和用户的同步目录j
	ListSyncDir(context.Context, *RequestSyncDir) (*ResponseListSyncDir, error)
	// 新建一个同步目录
	NewSyncDir(context.Context, *RequestSyncDir) (*SyncDir, error)
	// 主动做一次同步，目标是来源微服和来源用户的同步目录
	DoSync(context.Context, *emptypb.Empty) (*SyncDir, error)
	mustEmbedUnimplementedOnewaySyncServer()
}

// UnimplementedOnewaySyncServer must be embedded to have forward compatible implementations.
type UnimplementedOnewaySyncServer struct {
}

func (UnimplementedOnewaySyncServer) ListSyncDir(context.Context, *RequestSyncDir) (*ResponseListSyncDir, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSyncDir not implemented")
}
func (UnimplementedOnewaySyncServer) NewSyncDir(context.Context, *RequestSyncDir) (*SyncDir, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSyncDir not implemented")
}
func (UnimplementedOnewaySyncServer) DoSync(context.Context, *emptypb.Empty) (*SyncDir, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoSync not implemented")
}
func (UnimplementedOnewaySyncServer) mustEmbedUnimplementedOnewaySyncServer() {}

// UnsafeOnewaySyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnewaySyncServer will
// result in compilation errors.
type UnsafeOnewaySyncServer interface {
	mustEmbedUnimplementedOnewaySyncServer()
}

func RegisterOnewaySyncServer(s grpc.ServiceRegistrar, srv OnewaySyncServer) {
	s.RegisterService(&OnewaySync_ServiceDesc, srv)
}

func _OnewaySync_ListSyncDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSyncDir)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnewaySyncServer).ListSyncDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnewaySync_ListSyncDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnewaySyncServer).ListSyncDir(ctx, req.(*RequestSyncDir))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnewaySync_NewSyncDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSyncDir)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnewaySyncServer).NewSyncDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnewaySync_NewSyncDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnewaySyncServer).NewSyncDir(ctx, req.(*RequestSyncDir))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnewaySync_DoSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnewaySyncServer).DoSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnewaySync_DoSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnewaySyncServer).DoSync(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OnewaySync_ServiceDesc is the grpc.ServiceDesc for OnewaySync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnewaySync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.localdevice.OnewaySync",
	HandlerType: (*OnewaySyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSyncDir",
			Handler:    _OnewaySync_ListSyncDir_Handler,
		},
		{
			MethodName: "NewSyncDir",
			Handler:    _OnewaySync_NewSyncDir_Handler,
		},
		{
			MethodName: "DoSync",
			Handler:    _OnewaySync_DoSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "localdevice/oneway-sync.proto",
}
