// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: localdevice/remote-control.proto

package localdevice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RemoteControl_SendKeyboardEvent_FullMethodName       = "/cloud.lazycat.apis.localdevice.RemoteControl/SendKeyboardEvent"
	RemoteControl_SendTouchpadEvent_FullMethodName       = "/cloud.lazycat.apis.localdevice.RemoteControl/SendTouchpadEvent"
	RemoteControl_SendTouchpadClick_FullMethodName       = "/cloud.lazycat.apis.localdevice.RemoteControl/SendTouchpadClick"
	RemoteControl_SendTouchpadRightClick_FullMethodName  = "/cloud.lazycat.apis.localdevice.RemoteControl/SendTouchpadRightClick"
	RemoteControl_SendTouchpadDoubleClick_FullMethodName = "/cloud.lazycat.apis.localdevice.RemoteControl/SendTouchpadDoubleClick"
	RemoteControl_SendTouchpadMove_FullMethodName        = "/cloud.lazycat.apis.localdevice.RemoteControl/SendTouchpadMove"
	RemoteControl_SendMouseMoveLeft_FullMethodName       = "/cloud.lazycat.apis.localdevice.RemoteControl/SendMouseMoveLeft"
	RemoteControl_SendMouseMoveRight_FullMethodName      = "/cloud.lazycat.apis.localdevice.RemoteControl/SendMouseMoveRight"
	RemoteControl_SendMouseMoveUp_FullMethodName         = "/cloud.lazycat.apis.localdevice.RemoteControl/SendMouseMoveUp"
	RemoteControl_SendMouseMove_FullMethodName           = "/cloud.lazycat.apis.localdevice.RemoteControl/SendMouseMove"
	RemoteControl_MouseMoveStream_FullMethodName         = "/cloud.lazycat.apis.localdevice.RemoteControl/MouseMoveStream"
	RemoteControl_SendMouseLeftClick_FullMethodName      = "/cloud.lazycat.apis.localdevice.RemoteControl/SendMouseLeftClick"
	RemoteControl_SendMouseRightClick_FullMethodName     = "/cloud.lazycat.apis.localdevice.RemoteControl/SendMouseRightClick"
	RemoteControl_SendMouseMiddleClick_FullMethodName    = "/cloud.lazycat.apis.localdevice.RemoteControl/SendMouseMiddleClick"
	RemoteControl_SendMouseWheel_FullMethodName          = "/cloud.lazycat.apis.localdevice.RemoteControl/SendMouseWheel"
	RemoteControl_SendMouseDoubleClick_FullMethodName    = "/cloud.lazycat.apis.localdevice.RemoteControl/SendMouseDoubleClick"
	RemoteControl_SetRemoteScreenRect_FullMethodName     = "/cloud.lazycat.apis.localdevice.RemoteControl/SetRemoteScreenRect"
	RemoteControl_WriteClipboard_FullMethodName          = "/cloud.lazycat.apis.localdevice.RemoteControl/WriteClipboard"
	RemoteControl_ReadClipboard_FullMethodName           = "/cloud.lazycat.apis.localdevice.RemoteControl/ReadClipboard"
	RemoteControl_DoPaste_FullMethodName                 = "/cloud.lazycat.apis.localdevice.RemoteControl/DoPaste"
)

// RemoteControlClient is the client API for RemoteControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteControlClient interface {
	// 发送键盘输入事件
	SendKeyboardEvent(ctx context.Context, in *SendKeyboardEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发送触摸板输入事件
	// 此接口发送的事件都是源事件，比如发送LeftPress，只会发起按下，不会发起松开
	// 如果是想要单击等操作使用其他接口
	SendTouchpadEvent(ctx context.Context, in *SendTouchpadEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发送左键
	SendTouchpadClick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发送右键
	SendTouchpadRightClick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发送双击
	SendTouchpadDoubleClick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发送触摸板滑动
	SendTouchpadMove(ctx context.Context, in *SendTouchpadMoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发起鼠标向左移动
	SendMouseMoveLeft(ctx context.Context, in *SendMouseMoveByDirectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发起鼠标向右移动
	SendMouseMoveRight(ctx context.Context, in *SendMouseMoveByDirectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发起鼠标向上移动
	SendMouseMoveUp(ctx context.Context, in *SendMouseMoveByDirectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发起鼠标向下移动
	SendMouseMove(ctx context.Context, in *SendMouseMoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 建立鼠标移动客户端流
	MouseMoveStream(ctx context.Context, opts ...grpc.CallOption) (RemoteControl_MouseMoveStreamClient, error)
	// 发起鼠标左键单击事件
	SendMouseLeftClick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发起鼠标右键单击事件
	SendMouseRightClick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发起鼠标中键单击事件
	SendMouseMiddleClick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发起鼠标滚动
	SendMouseWheel(ctx context.Context, in *SendMouseWheelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发起鼠标双击左键事件
	SendMouseDoubleClick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 设置远程屏幕的宽高(用于计算鼠标，触控板移动的同比例偏移)
	SetRemoteScreenRect(ctx context.Context, in *SetRemoteScreenRectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 写入剪贴板
	WriteClipboard(ctx context.Context, in *WriteClipboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 读取剪贴板
	ReadClipboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadClipboardResponse, error)
	// 粘贴
	DoPaste(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type remoteControlClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteControlClient(cc grpc.ClientConnInterface) RemoteControlClient {
	return &remoteControlClient{cc}
}

func (c *remoteControlClient) SendKeyboardEvent(ctx context.Context, in *SendKeyboardEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SendKeyboardEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) SendTouchpadEvent(ctx context.Context, in *SendTouchpadEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SendTouchpadEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) SendTouchpadClick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SendTouchpadClick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) SendTouchpadRightClick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SendTouchpadRightClick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) SendTouchpadDoubleClick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SendTouchpadDoubleClick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) SendTouchpadMove(ctx context.Context, in *SendTouchpadMoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SendTouchpadMove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) SendMouseMoveLeft(ctx context.Context, in *SendMouseMoveByDirectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SendMouseMoveLeft_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) SendMouseMoveRight(ctx context.Context, in *SendMouseMoveByDirectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SendMouseMoveRight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) SendMouseMoveUp(ctx context.Context, in *SendMouseMoveByDirectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SendMouseMoveUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) SendMouseMove(ctx context.Context, in *SendMouseMoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SendMouseMove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) MouseMoveStream(ctx context.Context, opts ...grpc.CallOption) (RemoteControl_MouseMoveStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RemoteControl_ServiceDesc.Streams[0], RemoteControl_MouseMoveStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteControlMouseMoveStreamClient{stream}
	return x, nil
}

type RemoteControl_MouseMoveStreamClient interface {
	Send(*SendMouseMoveRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type remoteControlMouseMoveStreamClient struct {
	grpc.ClientStream
}

func (x *remoteControlMouseMoveStreamClient) Send(m *SendMouseMoveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteControlMouseMoveStreamClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoteControlClient) SendMouseLeftClick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SendMouseLeftClick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) SendMouseRightClick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SendMouseRightClick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) SendMouseMiddleClick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SendMouseMiddleClick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) SendMouseWheel(ctx context.Context, in *SendMouseWheelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SendMouseWheel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) SendMouseDoubleClick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SendMouseDoubleClick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) SetRemoteScreenRect(ctx context.Context, in *SetRemoteScreenRectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_SetRemoteScreenRect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) WriteClipboard(ctx context.Context, in *WriteClipboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_WriteClipboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) ReadClipboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadClipboardResponse, error) {
	out := new(ReadClipboardResponse)
	err := c.cc.Invoke(ctx, RemoteControl_ReadClipboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteControlClient) DoPaste(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteControl_DoPaste_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteControlServer is the server API for RemoteControl service.
// All implementations must embed UnimplementedRemoteControlServer
// for forward compatibility
type RemoteControlServer interface {
	// 发送键盘输入事件
	SendKeyboardEvent(context.Context, *SendKeyboardEventRequest) (*emptypb.Empty, error)
	// 发送触摸板输入事件
	// 此接口发送的事件都是源事件，比如发送LeftPress，只会发起按下，不会发起松开
	// 如果是想要单击等操作使用其他接口
	SendTouchpadEvent(context.Context, *SendTouchpadEventRequest) (*emptypb.Empty, error)
	// 发送左键
	SendTouchpadClick(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 发送右键
	SendTouchpadRightClick(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 发送双击
	SendTouchpadDoubleClick(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 发送触摸板滑动
	SendTouchpadMove(context.Context, *SendTouchpadMoveRequest) (*emptypb.Empty, error)
	// 发起鼠标向左移动
	SendMouseMoveLeft(context.Context, *SendMouseMoveByDirectionRequest) (*emptypb.Empty, error)
	// 发起鼠标向右移动
	SendMouseMoveRight(context.Context, *SendMouseMoveByDirectionRequest) (*emptypb.Empty, error)
	// 发起鼠标向上移动
	SendMouseMoveUp(context.Context, *SendMouseMoveByDirectionRequest) (*emptypb.Empty, error)
	// 发起鼠标向下移动
	SendMouseMove(context.Context, *SendMouseMoveRequest) (*emptypb.Empty, error)
	// 建立鼠标移动客户端流
	MouseMoveStream(RemoteControl_MouseMoveStreamServer) error
	// 发起鼠标左键单击事件
	SendMouseLeftClick(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 发起鼠标右键单击事件
	SendMouseRightClick(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 发起鼠标中键单击事件
	SendMouseMiddleClick(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 发起鼠标滚动
	SendMouseWheel(context.Context, *SendMouseWheelRequest) (*emptypb.Empty, error)
	// 发起鼠标双击左键事件
	SendMouseDoubleClick(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 设置远程屏幕的宽高(用于计算鼠标，触控板移动的同比例偏移)
	SetRemoteScreenRect(context.Context, *SetRemoteScreenRectRequest) (*emptypb.Empty, error)
	// 写入剪贴板
	WriteClipboard(context.Context, *WriteClipboardRequest) (*emptypb.Empty, error)
	// 读取剪贴板
	ReadClipboard(context.Context, *emptypb.Empty) (*ReadClipboardResponse, error)
	// 粘贴
	DoPaste(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedRemoteControlServer()
}

// UnimplementedRemoteControlServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteControlServer struct {
}

func (UnimplementedRemoteControlServer) SendKeyboardEvent(context.Context, *SendKeyboardEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKeyboardEvent not implemented")
}
func (UnimplementedRemoteControlServer) SendTouchpadEvent(context.Context, *SendTouchpadEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTouchpadEvent not implemented")
}
func (UnimplementedRemoteControlServer) SendTouchpadClick(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTouchpadClick not implemented")
}
func (UnimplementedRemoteControlServer) SendTouchpadRightClick(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTouchpadRightClick not implemented")
}
func (UnimplementedRemoteControlServer) SendTouchpadDoubleClick(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTouchpadDoubleClick not implemented")
}
func (UnimplementedRemoteControlServer) SendTouchpadMove(context.Context, *SendTouchpadMoveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTouchpadMove not implemented")
}
func (UnimplementedRemoteControlServer) SendMouseMoveLeft(context.Context, *SendMouseMoveByDirectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMouseMoveLeft not implemented")
}
func (UnimplementedRemoteControlServer) SendMouseMoveRight(context.Context, *SendMouseMoveByDirectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMouseMoveRight not implemented")
}
func (UnimplementedRemoteControlServer) SendMouseMoveUp(context.Context, *SendMouseMoveByDirectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMouseMoveUp not implemented")
}
func (UnimplementedRemoteControlServer) SendMouseMove(context.Context, *SendMouseMoveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMouseMove not implemented")
}
func (UnimplementedRemoteControlServer) MouseMoveStream(RemoteControl_MouseMoveStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method MouseMoveStream not implemented")
}
func (UnimplementedRemoteControlServer) SendMouseLeftClick(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMouseLeftClick not implemented")
}
func (UnimplementedRemoteControlServer) SendMouseRightClick(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMouseRightClick not implemented")
}
func (UnimplementedRemoteControlServer) SendMouseMiddleClick(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMouseMiddleClick not implemented")
}
func (UnimplementedRemoteControlServer) SendMouseWheel(context.Context, *SendMouseWheelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMouseWheel not implemented")
}
func (UnimplementedRemoteControlServer) SendMouseDoubleClick(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMouseDoubleClick not implemented")
}
func (UnimplementedRemoteControlServer) SetRemoteScreenRect(context.Context, *SetRemoteScreenRectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRemoteScreenRect not implemented")
}
func (UnimplementedRemoteControlServer) WriteClipboard(context.Context, *WriteClipboardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteClipboard not implemented")
}
func (UnimplementedRemoteControlServer) ReadClipboard(context.Context, *emptypb.Empty) (*ReadClipboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadClipboard not implemented")
}
func (UnimplementedRemoteControlServer) DoPaste(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoPaste not implemented")
}
func (UnimplementedRemoteControlServer) mustEmbedUnimplementedRemoteControlServer() {}

// UnsafeRemoteControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteControlServer will
// result in compilation errors.
type UnsafeRemoteControlServer interface {
	mustEmbedUnimplementedRemoteControlServer()
}

func RegisterRemoteControlServer(s grpc.ServiceRegistrar, srv RemoteControlServer) {
	s.RegisterService(&RemoteControl_ServiceDesc, srv)
}

func _RemoteControl_SendKeyboardEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKeyboardEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SendKeyboardEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SendKeyboardEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SendKeyboardEvent(ctx, req.(*SendKeyboardEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_SendTouchpadEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTouchpadEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SendTouchpadEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SendTouchpadEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SendTouchpadEvent(ctx, req.(*SendTouchpadEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_SendTouchpadClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SendTouchpadClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SendTouchpadClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SendTouchpadClick(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_SendTouchpadRightClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SendTouchpadRightClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SendTouchpadRightClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SendTouchpadRightClick(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_SendTouchpadDoubleClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SendTouchpadDoubleClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SendTouchpadDoubleClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SendTouchpadDoubleClick(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_SendTouchpadMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTouchpadMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SendTouchpadMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SendTouchpadMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SendTouchpadMove(ctx, req.(*SendTouchpadMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_SendMouseMoveLeft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMouseMoveByDirectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SendMouseMoveLeft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SendMouseMoveLeft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SendMouseMoveLeft(ctx, req.(*SendMouseMoveByDirectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_SendMouseMoveRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMouseMoveByDirectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SendMouseMoveRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SendMouseMoveRight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SendMouseMoveRight(ctx, req.(*SendMouseMoveByDirectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_SendMouseMoveUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMouseMoveByDirectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SendMouseMoveUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SendMouseMoveUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SendMouseMoveUp(ctx, req.(*SendMouseMoveByDirectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_SendMouseMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMouseMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SendMouseMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SendMouseMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SendMouseMove(ctx, req.(*SendMouseMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_MouseMoveStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteControlServer).MouseMoveStream(&remoteControlMouseMoveStreamServer{stream})
}

type RemoteControl_MouseMoveStreamServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*SendMouseMoveRequest, error)
	grpc.ServerStream
}

type remoteControlMouseMoveStreamServer struct {
	grpc.ServerStream
}

func (x *remoteControlMouseMoveStreamServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteControlMouseMoveStreamServer) Recv() (*SendMouseMoveRequest, error) {
	m := new(SendMouseMoveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RemoteControl_SendMouseLeftClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SendMouseLeftClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SendMouseLeftClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SendMouseLeftClick(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_SendMouseRightClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SendMouseRightClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SendMouseRightClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SendMouseRightClick(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_SendMouseMiddleClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SendMouseMiddleClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SendMouseMiddleClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SendMouseMiddleClick(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_SendMouseWheel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMouseWheelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SendMouseWheel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SendMouseWheel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SendMouseWheel(ctx, req.(*SendMouseWheelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_SendMouseDoubleClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SendMouseDoubleClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SendMouseDoubleClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SendMouseDoubleClick(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_SetRemoteScreenRect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRemoteScreenRectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).SetRemoteScreenRect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_SetRemoteScreenRect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).SetRemoteScreenRect(ctx, req.(*SetRemoteScreenRectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_WriteClipboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteClipboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).WriteClipboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_WriteClipboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).WriteClipboard(ctx, req.(*WriteClipboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_ReadClipboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).ReadClipboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_ReadClipboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).ReadClipboard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteControl_DoPaste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteControlServer).DoPaste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteControl_DoPaste_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteControlServer).DoPaste(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteControl_ServiceDesc is the grpc.ServiceDesc for RemoteControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.localdevice.RemoteControl",
	HandlerType: (*RemoteControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendKeyboardEvent",
			Handler:    _RemoteControl_SendKeyboardEvent_Handler,
		},
		{
			MethodName: "SendTouchpadEvent",
			Handler:    _RemoteControl_SendTouchpadEvent_Handler,
		},
		{
			MethodName: "SendTouchpadClick",
			Handler:    _RemoteControl_SendTouchpadClick_Handler,
		},
		{
			MethodName: "SendTouchpadRightClick",
			Handler:    _RemoteControl_SendTouchpadRightClick_Handler,
		},
		{
			MethodName: "SendTouchpadDoubleClick",
			Handler:    _RemoteControl_SendTouchpadDoubleClick_Handler,
		},
		{
			MethodName: "SendTouchpadMove",
			Handler:    _RemoteControl_SendTouchpadMove_Handler,
		},
		{
			MethodName: "SendMouseMoveLeft",
			Handler:    _RemoteControl_SendMouseMoveLeft_Handler,
		},
		{
			MethodName: "SendMouseMoveRight",
			Handler:    _RemoteControl_SendMouseMoveRight_Handler,
		},
		{
			MethodName: "SendMouseMoveUp",
			Handler:    _RemoteControl_SendMouseMoveUp_Handler,
		},
		{
			MethodName: "SendMouseMove",
			Handler:    _RemoteControl_SendMouseMove_Handler,
		},
		{
			MethodName: "SendMouseLeftClick",
			Handler:    _RemoteControl_SendMouseLeftClick_Handler,
		},
		{
			MethodName: "SendMouseRightClick",
			Handler:    _RemoteControl_SendMouseRightClick_Handler,
		},
		{
			MethodName: "SendMouseMiddleClick",
			Handler:    _RemoteControl_SendMouseMiddleClick_Handler,
		},
		{
			MethodName: "SendMouseWheel",
			Handler:    _RemoteControl_SendMouseWheel_Handler,
		},
		{
			MethodName: "SendMouseDoubleClick",
			Handler:    _RemoteControl_SendMouseDoubleClick_Handler,
		},
		{
			MethodName: "SetRemoteScreenRect",
			Handler:    _RemoteControl_SetRemoteScreenRect_Handler,
		},
		{
			MethodName: "WriteClipboard",
			Handler:    _RemoteControl_WriteClipboard_Handler,
		},
		{
			MethodName: "ReadClipboard",
			Handler:    _RemoteControl_ReadClipboard_Handler,
		},
		{
			MethodName: "DoPaste",
			Handler:    _RemoteControl_DoPaste_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MouseMoveStream",
			Handler:       _RemoteControl_MouseMoveStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "localdevice/remote-control.proto",
}
