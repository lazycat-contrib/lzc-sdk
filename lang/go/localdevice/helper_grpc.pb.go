// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: localdevice/helper.proto

package localdevice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Helper_Diff_FullMethodName = "/cloud.lazycat.apis.localdevice.Helper/Diff"
)

// HelperClient is the client API for Helper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelperClient interface {
	Diff(ctx context.Context, in *HashInfo, opts ...grpc.CallOption) (*DiffResponse, error)
}

type helperClient struct {
	cc grpc.ClientConnInterface
}

func NewHelperClient(cc grpc.ClientConnInterface) HelperClient {
	return &helperClient{cc}
}

func (c *helperClient) Diff(ctx context.Context, in *HashInfo, opts ...grpc.CallOption) (*DiffResponse, error) {
	out := new(DiffResponse)
	err := c.cc.Invoke(ctx, Helper_Diff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelperServer is the server API for Helper service.
// All implementations must embed UnimplementedHelperServer
// for forward compatibility
type HelperServer interface {
	Diff(context.Context, *HashInfo) (*DiffResponse, error)
	mustEmbedUnimplementedHelperServer()
}

// UnimplementedHelperServer must be embedded to have forward compatible implementations.
type UnimplementedHelperServer struct {
}

func (UnimplementedHelperServer) Diff(context.Context, *HashInfo) (*DiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Diff not implemented")
}
func (UnimplementedHelperServer) mustEmbedUnimplementedHelperServer() {}

// UnsafeHelperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelperServer will
// result in compilation errors.
type UnsafeHelperServer interface {
	mustEmbedUnimplementedHelperServer()
}

func RegisterHelperServer(s grpc.ServiceRegistrar, srv HelperServer) {
	s.RegisterService(&Helper_ServiceDesc, srv)
}

func _Helper_Diff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServer).Diff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Helper_Diff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServer).Diff(ctx, req.(*HashInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Helper_ServiceDesc is the grpc.ServiceDesc for Helper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Helper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.localdevice.Helper",
	HandlerType: (*HelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Diff",
			Handler:    _Helper_Diff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "localdevice/helper.proto",
}
