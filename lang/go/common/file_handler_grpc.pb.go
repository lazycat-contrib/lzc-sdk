// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: common/file_handler.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileHandlerClient is the client API for FileHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileHandlerClient interface {
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error)
}

type fileHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewFileHandlerClient(cc grpc.ClientConnInterface) FileHandlerClient {
	return &fileHandlerClient{cc}
}

func (c *fileHandlerClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.common.FileHandler/query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileHandlerClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error) {
	out := new(OpenReply)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.common.FileHandler/open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileHandlerServer is the server API for FileHandler service.
// All implementations must embed UnimplementedFileHandlerServer
// for forward compatibility
type FileHandlerServer interface {
	Query(context.Context, *QueryRequest) (*QueryReply, error)
	Open(context.Context, *OpenRequest) (*OpenReply, error)
	mustEmbedUnimplementedFileHandlerServer()
}

// UnimplementedFileHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedFileHandlerServer struct {
}

func (UnimplementedFileHandlerServer) Query(context.Context, *QueryRequest) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedFileHandlerServer) Open(context.Context, *OpenRequest) (*OpenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedFileHandlerServer) mustEmbedUnimplementedFileHandlerServer() {}

// UnsafeFileHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileHandlerServer will
// result in compilation errors.
type UnsafeFileHandlerServer interface {
	mustEmbedUnimplementedFileHandlerServer()
}

func RegisterFileHandlerServer(s grpc.ServiceRegistrar, srv FileHandlerServer) {
	s.RegisterService(&FileHandler_ServiceDesc, srv)
}

func _FileHandler_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileHandlerServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.common.FileHandler/query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileHandlerServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileHandler_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileHandlerServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.common.FileHandler/open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileHandlerServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileHandler_ServiceDesc is the grpc.ServiceDesc for FileHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.common.FileHandler",
	HandlerType: (*FileHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "query",
			Handler:    _FileHandler_Query_Handler,
		},
		{
			MethodName: "open",
			Handler:    _FileHandler_Open_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/file_handler.proto",
}
