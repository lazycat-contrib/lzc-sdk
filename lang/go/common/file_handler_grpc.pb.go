// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: common/file_handler.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileHandler_Query_FullMethodName           = "/cloud.lazycat.apis.common.FileHandler/query"
	FileHandler_Open_FullMethodName            = "/cloud.lazycat.apis.common.FileHandler/open"
	FileHandler_OpenFileManager_FullMethodName = "/cloud.lazycat.apis.common.FileHandler/openFileManager"
	FileHandler_WalkDir_FullMethodName         = "/cloud.lazycat.apis.common.FileHandler/walkDir"
	FileHandler_CheckWalkDir_FullMethodName    = "/cloud.lazycat.apis.common.FileHandler/checkWalkDir"
	FileHandler_WalkDirDuplex_FullMethodName   = "/cloud.lazycat.apis.common.FileHandler/walkDirDuplex"
	FileHandler_DirTree_FullMethodName         = "/cloud.lazycat.apis.common.FileHandler/dirTree"
	FileHandler_CreateDir_FullMethodName       = "/cloud.lazycat.apis.common.FileHandler/createDir"
	FileHandler_Stat_FullMethodName            = "/cloud.lazycat.apis.common.FileHandler/stat"
	FileHandler_SyncFolder_FullMethodName      = "/cloud.lazycat.apis.common.FileHandler/syncFolder"
	FileHandler_CopyFolder_FullMethodName      = "/cloud.lazycat.apis.common.FileHandler/copyFolder"
)

// FileHandlerClient is the client API for FileHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileHandlerClient interface {
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error)
	OpenFileManager(ctx context.Context, in *OpenFileManagerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 列出目录结构
	WalkDir(ctx context.Context, in *WalkDirRequest, opts ...grpc.CallOption) (FileHandler_WalkDirClient, error)
	CheckWalkDir(ctx context.Context, in *CheckWalkDirRequest, opts ...grpc.CallOption) (*CheckWalkDirResponse, error)
	WalkDirDuplex(ctx context.Context, opts ...grpc.CallOption) (FileHandler_WalkDirDuplexClient, error)
	DirTree(ctx context.Context, in *DirTreeRequest, opts ...grpc.CallOption) (*DirTreeResponse, error)
	CreateDir(ctx context.Context, opts ...grpc.CallOption) (FileHandler_CreateDirClient, error)
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error)
	// 同步文件夹, 让target_path的内容和device_path内容一致.  device_path = target_path
	//
	//	sync A→B 的話
	//	B=A
	SyncFolder(ctx context.Context, in *SyncFolderRequest, opts ...grpc.CallOption) (FileHandler_SyncFolderClient, error)
	// 备份文件夹, 让server_path的内容和设备上的某个文件夹保持一致.
	//
	//	copy A→B 的話
	//	  B=A+B 原有檔案
	CopyFolder(ctx context.Context, in *CopyFolderRequest, opts ...grpc.CallOption) (FileHandler_CopyFolderClient, error)
}

type fileHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewFileHandlerClient(cc grpc.ClientConnInterface) FileHandlerClient {
	return &fileHandlerClient{cc}
}

func (c *fileHandlerClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, FileHandler_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileHandlerClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error) {
	out := new(OpenReply)
	err := c.cc.Invoke(ctx, FileHandler_Open_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileHandlerClient) OpenFileManager(ctx context.Context, in *OpenFileManagerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FileHandler_OpenFileManager_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileHandlerClient) WalkDir(ctx context.Context, in *WalkDirRequest, opts ...grpc.CallOption) (FileHandler_WalkDirClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileHandler_ServiceDesc.Streams[0], FileHandler_WalkDir_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileHandlerWalkDirClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileHandler_WalkDirClient interface {
	Recv() (*WalkDirReply, error)
	grpc.ClientStream
}

type fileHandlerWalkDirClient struct {
	grpc.ClientStream
}

func (x *fileHandlerWalkDirClient) Recv() (*WalkDirReply, error) {
	m := new(WalkDirReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileHandlerClient) CheckWalkDir(ctx context.Context, in *CheckWalkDirRequest, opts ...grpc.CallOption) (*CheckWalkDirResponse, error) {
	out := new(CheckWalkDirResponse)
	err := c.cc.Invoke(ctx, FileHandler_CheckWalkDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileHandlerClient) WalkDirDuplex(ctx context.Context, opts ...grpc.CallOption) (FileHandler_WalkDirDuplexClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileHandler_ServiceDesc.Streams[1], FileHandler_WalkDirDuplex_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileHandlerWalkDirDuplexClient{stream}
	return x, nil
}

type FileHandler_WalkDirDuplexClient interface {
	Send(*WalkDirRequest) error
	Recv() (*WalkDirReply, error)
	grpc.ClientStream
}

type fileHandlerWalkDirDuplexClient struct {
	grpc.ClientStream
}

func (x *fileHandlerWalkDirDuplexClient) Send(m *WalkDirRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileHandlerWalkDirDuplexClient) Recv() (*WalkDirReply, error) {
	m := new(WalkDirReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileHandlerClient) DirTree(ctx context.Context, in *DirTreeRequest, opts ...grpc.CallOption) (*DirTreeResponse, error) {
	out := new(DirTreeResponse)
	err := c.cc.Invoke(ctx, FileHandler_DirTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileHandlerClient) CreateDir(ctx context.Context, opts ...grpc.CallOption) (FileHandler_CreateDirClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileHandler_ServiceDesc.Streams[2], FileHandler_CreateDir_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileHandlerCreateDirClient{stream}
	return x, nil
}

type FileHandler_CreateDirClient interface {
	Send(*CreateDirRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type fileHandlerCreateDirClient struct {
	grpc.ClientStream
}

func (x *fileHandlerCreateDirClient) Send(m *CreateDirRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileHandlerCreateDirClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileHandlerClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error) {
	out := new(StatReply)
	err := c.cc.Invoke(ctx, FileHandler_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileHandlerClient) SyncFolder(ctx context.Context, in *SyncFolderRequest, opts ...grpc.CallOption) (FileHandler_SyncFolderClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileHandler_ServiceDesc.Streams[3], FileHandler_SyncFolder_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileHandlerSyncFolderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileHandler_SyncFolderClient interface {
	Recv() (*TaskProgressInfo, error)
	grpc.ClientStream
}

type fileHandlerSyncFolderClient struct {
	grpc.ClientStream
}

func (x *fileHandlerSyncFolderClient) Recv() (*TaskProgressInfo, error) {
	m := new(TaskProgressInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileHandlerClient) CopyFolder(ctx context.Context, in *CopyFolderRequest, opts ...grpc.CallOption) (FileHandler_CopyFolderClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileHandler_ServiceDesc.Streams[4], FileHandler_CopyFolder_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileHandlerCopyFolderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileHandler_CopyFolderClient interface {
	Recv() (*TaskProgressInfo, error)
	grpc.ClientStream
}

type fileHandlerCopyFolderClient struct {
	grpc.ClientStream
}

func (x *fileHandlerCopyFolderClient) Recv() (*TaskProgressInfo, error) {
	m := new(TaskProgressInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileHandlerServer is the server API for FileHandler service.
// All implementations must embed UnimplementedFileHandlerServer
// for forward compatibility
type FileHandlerServer interface {
	Query(context.Context, *QueryRequest) (*QueryReply, error)
	Open(context.Context, *OpenRequest) (*OpenReply, error)
	OpenFileManager(context.Context, *OpenFileManagerRequest) (*emptypb.Empty, error)
	// 列出目录结构
	WalkDir(*WalkDirRequest, FileHandler_WalkDirServer) error
	CheckWalkDir(context.Context, *CheckWalkDirRequest) (*CheckWalkDirResponse, error)
	WalkDirDuplex(FileHandler_WalkDirDuplexServer) error
	DirTree(context.Context, *DirTreeRequest) (*DirTreeResponse, error)
	CreateDir(FileHandler_CreateDirServer) error
	Stat(context.Context, *StatRequest) (*StatReply, error)
	// 同步文件夹, 让target_path的内容和device_path内容一致.  device_path = target_path
	//
	//	sync A→B 的話
	//	B=A
	SyncFolder(*SyncFolderRequest, FileHandler_SyncFolderServer) error
	// 备份文件夹, 让server_path的内容和设备上的某个文件夹保持一致.
	//
	//	copy A→B 的話
	//	  B=A+B 原有檔案
	CopyFolder(*CopyFolderRequest, FileHandler_CopyFolderServer) error
	mustEmbedUnimplementedFileHandlerServer()
}

// UnimplementedFileHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedFileHandlerServer struct {
}

func (UnimplementedFileHandlerServer) Query(context.Context, *QueryRequest) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedFileHandlerServer) Open(context.Context, *OpenRequest) (*OpenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedFileHandlerServer) OpenFileManager(context.Context, *OpenFileManagerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenFileManager not implemented")
}
func (UnimplementedFileHandlerServer) WalkDir(*WalkDirRequest, FileHandler_WalkDirServer) error {
	return status.Errorf(codes.Unimplemented, "method WalkDir not implemented")
}
func (UnimplementedFileHandlerServer) CheckWalkDir(context.Context, *CheckWalkDirRequest) (*CheckWalkDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckWalkDir not implemented")
}
func (UnimplementedFileHandlerServer) WalkDirDuplex(FileHandler_WalkDirDuplexServer) error {
	return status.Errorf(codes.Unimplemented, "method WalkDirDuplex not implemented")
}
func (UnimplementedFileHandlerServer) DirTree(context.Context, *DirTreeRequest) (*DirTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirTree not implemented")
}
func (UnimplementedFileHandlerServer) CreateDir(FileHandler_CreateDirServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateDir not implemented")
}
func (UnimplementedFileHandlerServer) Stat(context.Context, *StatRequest) (*StatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedFileHandlerServer) SyncFolder(*SyncFolderRequest, FileHandler_SyncFolderServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncFolder not implemented")
}
func (UnimplementedFileHandlerServer) CopyFolder(*CopyFolderRequest, FileHandler_CopyFolderServer) error {
	return status.Errorf(codes.Unimplemented, "method CopyFolder not implemented")
}
func (UnimplementedFileHandlerServer) mustEmbedUnimplementedFileHandlerServer() {}

// UnsafeFileHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileHandlerServer will
// result in compilation errors.
type UnsafeFileHandlerServer interface {
	mustEmbedUnimplementedFileHandlerServer()
}

func RegisterFileHandlerServer(s grpc.ServiceRegistrar, srv FileHandlerServer) {
	s.RegisterService(&FileHandler_ServiceDesc, srv)
}

func _FileHandler_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileHandlerServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileHandler_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileHandlerServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileHandler_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileHandlerServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileHandler_Open_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileHandlerServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileHandler_OpenFileManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFileManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileHandlerServer).OpenFileManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileHandler_OpenFileManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileHandlerServer).OpenFileManager(ctx, req.(*OpenFileManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileHandler_WalkDir_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WalkDirRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileHandlerServer).WalkDir(m, &fileHandlerWalkDirServer{stream})
}

type FileHandler_WalkDirServer interface {
	Send(*WalkDirReply) error
	grpc.ServerStream
}

type fileHandlerWalkDirServer struct {
	grpc.ServerStream
}

func (x *fileHandlerWalkDirServer) Send(m *WalkDirReply) error {
	return x.ServerStream.SendMsg(m)
}

func _FileHandler_CheckWalkDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckWalkDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileHandlerServer).CheckWalkDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileHandler_CheckWalkDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileHandlerServer).CheckWalkDir(ctx, req.(*CheckWalkDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileHandler_WalkDirDuplex_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileHandlerServer).WalkDirDuplex(&fileHandlerWalkDirDuplexServer{stream})
}

type FileHandler_WalkDirDuplexServer interface {
	Send(*WalkDirReply) error
	Recv() (*WalkDirRequest, error)
	grpc.ServerStream
}

type fileHandlerWalkDirDuplexServer struct {
	grpc.ServerStream
}

func (x *fileHandlerWalkDirDuplexServer) Send(m *WalkDirReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileHandlerWalkDirDuplexServer) Recv() (*WalkDirRequest, error) {
	m := new(WalkDirRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileHandler_DirTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileHandlerServer).DirTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileHandler_DirTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileHandlerServer).DirTree(ctx, req.(*DirTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileHandler_CreateDir_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileHandlerServer).CreateDir(&fileHandlerCreateDirServer{stream})
}

type FileHandler_CreateDirServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*CreateDirRequest, error)
	grpc.ServerStream
}

type fileHandlerCreateDirServer struct {
	grpc.ServerStream
}

func (x *fileHandlerCreateDirServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileHandlerCreateDirServer) Recv() (*CreateDirRequest, error) {
	m := new(CreateDirRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileHandler_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileHandlerServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileHandler_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileHandlerServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileHandler_SyncFolder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncFolderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileHandlerServer).SyncFolder(m, &fileHandlerSyncFolderServer{stream})
}

type FileHandler_SyncFolderServer interface {
	Send(*TaskProgressInfo) error
	grpc.ServerStream
}

type fileHandlerSyncFolderServer struct {
	grpc.ServerStream
}

func (x *fileHandlerSyncFolderServer) Send(m *TaskProgressInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _FileHandler_CopyFolder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CopyFolderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileHandlerServer).CopyFolder(m, &fileHandlerCopyFolderServer{stream})
}

type FileHandler_CopyFolderServer interface {
	Send(*TaskProgressInfo) error
	grpc.ServerStream
}

type fileHandlerCopyFolderServer struct {
	grpc.ServerStream
}

func (x *fileHandlerCopyFolderServer) Send(m *TaskProgressInfo) error {
	return x.ServerStream.SendMsg(m)
}

// FileHandler_ServiceDesc is the grpc.ServiceDesc for FileHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.common.FileHandler",
	HandlerType: (*FileHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "query",
			Handler:    _FileHandler_Query_Handler,
		},
		{
			MethodName: "open",
			Handler:    _FileHandler_Open_Handler,
		},
		{
			MethodName: "openFileManager",
			Handler:    _FileHandler_OpenFileManager_Handler,
		},
		{
			MethodName: "checkWalkDir",
			Handler:    _FileHandler_CheckWalkDir_Handler,
		},
		{
			MethodName: "dirTree",
			Handler:    _FileHandler_DirTree_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _FileHandler_Stat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "walkDir",
			Handler:       _FileHandler_WalkDir_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "walkDirDuplex",
			Handler:       _FileHandler_WalkDirDuplex_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "createDir",
			Handler:       _FileHandler_CreateDir_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "syncFolder",
			Handler:       _FileHandler_SyncFolder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "copyFolder",
			Handler:       _FileHandler_CopyFolder_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "common/file_handler.proto",
}
