// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: common/security_context.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PermissionManagerClient is the client API for PermissionManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionManagerClient interface {
	Request(ctx context.Context, in *PermissionDesc, opts ...grpc.CallOption) (*PermissionToken, error)
	Has(ctx context.Context, in *HasPermissionRequest, opts ...grpc.CallOption) (*PermissionStatus, error)
}

type permissionManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionManagerClient(cc grpc.ClientConnInterface) PermissionManagerClient {
	return &permissionManagerClient{cc}
}

func (c *permissionManagerClient) Request(ctx context.Context, in *PermissionDesc, opts ...grpc.CallOption) (*PermissionToken, error) {
	out := new(PermissionToken)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.common.PermissionManager/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) Has(ctx context.Context, in *HasPermissionRequest, opts ...grpc.CallOption) (*PermissionStatus, error) {
	out := new(PermissionStatus)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.common.PermissionManager/Has", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionManagerServer is the server API for PermissionManager service.
// All implementations must embed UnimplementedPermissionManagerServer
// for forward compatibility
type PermissionManagerServer interface {
	Request(context.Context, *PermissionDesc) (*PermissionToken, error)
	Has(context.Context, *HasPermissionRequest) (*PermissionStatus, error)
	mustEmbedUnimplementedPermissionManagerServer()
}

// UnimplementedPermissionManagerServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionManagerServer struct {
}

func (UnimplementedPermissionManagerServer) Request(context.Context, *PermissionDesc) (*PermissionToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedPermissionManagerServer) Has(context.Context, *HasPermissionRequest) (*PermissionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Has not implemented")
}
func (UnimplementedPermissionManagerServer) mustEmbedUnimplementedPermissionManagerServer() {}

// UnsafePermissionManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionManagerServer will
// result in compilation errors.
type UnsafePermissionManagerServer interface {
	mustEmbedUnimplementedPermissionManagerServer()
}

func RegisterPermissionManagerServer(s grpc.ServiceRegistrar, srv PermissionManagerServer) {
	s.RegisterService(&PermissionManager_ServiceDesc, srv)
}

func _PermissionManager_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionDesc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.common.PermissionManager/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).Request(ctx, req.(*PermissionDesc))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_Has_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).Has(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.common.PermissionManager/Has",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).Has(ctx, req.(*HasPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionManager_ServiceDesc is the grpc.ServiceDesc for PermissionManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.common.PermissionManager",
	HandlerType: (*PermissionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _PermissionManager_Request_Handler,
		},
		{
			MethodName: "Has",
			Handler:    _PermissionManager_Has_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/security_context.proto",
}
