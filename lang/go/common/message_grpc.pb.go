// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: common/message.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageService_ListMessages_FullMethodName       = "/cloud.lazycat.apis.common.MessageService/ListMessages"
	MessageService_ListReadMessages_FullMethodName   = "/cloud.lazycat.apis.common.MessageService/ListReadMessages"
	MessageService_ListUnReadMessages_FullMethodName = "/cloud.lazycat.apis.common.MessageService/ListUnReadMessages"
	MessageService_QueryMessage_FullMethodName       = "/cloud.lazycat.apis.common.MessageService/QueryMessage"
	MessageService_MarkAsRead_FullMethodName         = "/cloud.lazycat.apis.common.MessageService/MarkAsRead"
	MessageService_DelMessage_FullMethodName         = "/cloud.lazycat.apis.common.MessageService/DelMessage"
	MessageService_NewMessage_FullMethodName         = "/cloud.lazycat.apis.common.MessageService/NewMessage"
	MessageService_LatestMessage_FullMethodName      = "/cloud.lazycat.apis.common.MessageService/LatestMessage"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	// 列出所有消息
	ListMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	// 列出所有已读消息
	ListReadMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	// 列出所有未读消息
	ListUnReadMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	// 根据消息ID查询某个消息，如果此前没有被Mark为已读，那么会变成已读
	QueryMessage(ctx context.Context, in *MessageActionRequest, opts ...grpc.CallOption) (*Msg, error)
	// 设置指定消息为已读
	MarkAsRead(ctx context.Context, in *MessageActionRequest, opts ...grpc.CallOption) (*MarkAsReadResponse, error)
	// 删除指定的消息
	DelMessage(ctx context.Context, in *MessageActionRequest, opts ...grpc.CallOption) (*DelMessageResponse, error)
	// 新增一个消息
	NewMessage(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*NewMessageResponse, error)
	// 流式的获取最新的消息
	LatestMessage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MessageService_LatestMessageClient, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) ListMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, MessageService_ListMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ListReadMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, MessageService_ListReadMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ListUnReadMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, MessageService_ListUnReadMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) QueryMessage(ctx context.Context, in *MessageActionRequest, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, MessageService_QueryMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) MarkAsRead(ctx context.Context, in *MessageActionRequest, opts ...grpc.CallOption) (*MarkAsReadResponse, error) {
	out := new(MarkAsReadResponse)
	err := c.cc.Invoke(ctx, MessageService_MarkAsRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) DelMessage(ctx context.Context, in *MessageActionRequest, opts ...grpc.CallOption) (*DelMessageResponse, error) {
	out := new(DelMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_DelMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) NewMessage(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*NewMessageResponse, error) {
	out := new(NewMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_NewMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) LatestMessage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MessageService_LatestMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[0], MessageService_LatestMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceLatestMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_LatestMessageClient interface {
	Recv() (*Msg, error)
	grpc.ClientStream
}

type messageServiceLatestMessageClient struct {
	grpc.ClientStream
}

func (x *messageServiceLatestMessageClient) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	// 列出所有消息
	ListMessages(context.Context, *emptypb.Empty) (*ListMessagesResponse, error)
	// 列出所有已读消息
	ListReadMessages(context.Context, *emptypb.Empty) (*ListMessagesResponse, error)
	// 列出所有未读消息
	ListUnReadMessages(context.Context, *emptypb.Empty) (*ListMessagesResponse, error)
	// 根据消息ID查询某个消息，如果此前没有被Mark为已读，那么会变成已读
	QueryMessage(context.Context, *MessageActionRequest) (*Msg, error)
	// 设置指定消息为已读
	MarkAsRead(context.Context, *MessageActionRequest) (*MarkAsReadResponse, error)
	// 删除指定的消息
	DelMessage(context.Context, *MessageActionRequest) (*DelMessageResponse, error)
	// 新增一个消息
	NewMessage(context.Context, *Msg) (*NewMessageResponse, error)
	// 流式的获取最新的消息
	LatestMessage(*emptypb.Empty, MessageService_LatestMessageServer) error
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) ListMessages(context.Context, *emptypb.Empty) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedMessageServiceServer) ListReadMessages(context.Context, *emptypb.Empty) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReadMessages not implemented")
}
func (UnimplementedMessageServiceServer) ListUnReadMessages(context.Context, *emptypb.Empty) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnReadMessages not implemented")
}
func (UnimplementedMessageServiceServer) QueryMessage(context.Context, *MessageActionRequest) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMessage not implemented")
}
func (UnimplementedMessageServiceServer) MarkAsRead(context.Context, *MessageActionRequest) (*MarkAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsRead not implemented")
}
func (UnimplementedMessageServiceServer) DelMessage(context.Context, *MessageActionRequest) (*DelMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMessage not implemented")
}
func (UnimplementedMessageServiceServer) NewMessage(context.Context, *Msg) (*NewMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMessage not implemented")
}
func (UnimplementedMessageServiceServer) LatestMessage(*emptypb.Empty, MessageService_LatestMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method LatestMessage not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ListMessages(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ListReadMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ListReadMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_ListReadMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ListReadMessages(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ListUnReadMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ListUnReadMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_ListUnReadMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ListUnReadMessages(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_QueryMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).QueryMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_QueryMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).QueryMessage(ctx, req.(*MessageActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_MarkAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).MarkAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_MarkAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).MarkAsRead(ctx, req.(*MessageActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_DelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).DelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_DelMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).DelMessage(ctx, req.(*MessageActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_NewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).NewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_NewMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).NewMessage(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_LatestMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).LatestMessage(m, &messageServiceLatestMessageServer{stream})
}

type MessageService_LatestMessageServer interface {
	Send(*Msg) error
	grpc.ServerStream
}

type messageServiceLatestMessageServer struct {
	grpc.ServerStream
}

func (x *messageServiceLatestMessageServer) Send(m *Msg) error {
	return x.ServerStream.SendMsg(m)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.common.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMessages",
			Handler:    _MessageService_ListMessages_Handler,
		},
		{
			MethodName: "ListReadMessages",
			Handler:    _MessageService_ListReadMessages_Handler,
		},
		{
			MethodName: "ListUnReadMessages",
			Handler:    _MessageService_ListUnReadMessages_Handler,
		},
		{
			MethodName: "QueryMessage",
			Handler:    _MessageService_QueryMessage_Handler,
		},
		{
			MethodName: "MarkAsRead",
			Handler:    _MessageService_MarkAsRead_Handler,
		},
		{
			MethodName: "DelMessage",
			Handler:    _MessageService_DelMessage_Handler,
		},
		{
			MethodName: "NewMessage",
			Handler:    _MessageService_NewMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LatestMessage",
			Handler:       _MessageService_LatestMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "common/message.proto",
}
