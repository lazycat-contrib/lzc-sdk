// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: common/devices/devices.proto

package devices

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DevicesClient is the client API for Devices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevicesClient interface {
	// 枚举当前登陆用户所有的设备信息
	ListDevices(ctx context.Context, in *ListDeviceRequest, opts ...grpc.CallOption) (*ListDeviceReply, error)
	// 将发起请求的设备与登陆用户的其他所有设备建立其虚拟网络隧道
	// 以便发起请求的浏览器可以绕过盒子直接访问其他节点上的设备API，比如剪贴板、文件拷贝等
	// 后端代码本身就与任意设备建立好了虚拟网络隧道，因此不需要使用此API。
	// 前端代码可以调用browseronly.proto:PairAllDeivce自动设置相关参数。
	PairAllDevices_(ctx context.Context, in *PairDeviceRequest, opts ...grpc.CallOption) (Devices_PairAllDevices_Client, error)
}

type devicesClient struct {
	cc grpc.ClientConnInterface
}

func NewDevicesClient(cc grpc.ClientConnInterface) DevicesClient {
	return &devicesClient{cc}
}

func (c *devicesClient) ListDevices(ctx context.Context, in *ListDeviceRequest, opts ...grpc.CallOption) (*ListDeviceReply, error) {
	out := new(ListDeviceReply)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.common.Devices/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) PairAllDevices_(ctx context.Context, in *PairDeviceRequest, opts ...grpc.CallOption) (Devices_PairAllDevices_Client, error) {
	stream, err := c.cc.NewStream(ctx, &Devices_ServiceDesc.Streams[0], "/cloud.lazycat.apis.common.Devices/PairAllDevices_", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicesPairAllDevices_Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Devices_PairAllDevices_Client interface {
	Recv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type devicesPairAllDevices_Client struct {
	grpc.ClientStream
}

func (x *devicesPairAllDevices_Client) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DevicesServer is the server API for Devices service.
// All implementations must embed UnimplementedDevicesServer
// for forward compatibility
type DevicesServer interface {
	// 枚举当前登陆用户所有的设备信息
	ListDevices(context.Context, *ListDeviceRequest) (*ListDeviceReply, error)
	// 将发起请求的设备与登陆用户的其他所有设备建立其虚拟网络隧道
	// 以便发起请求的浏览器可以绕过盒子直接访问其他节点上的设备API，比如剪贴板、文件拷贝等
	// 后端代码本身就与任意设备建立好了虚拟网络隧道，因此不需要使用此API。
	// 前端代码可以调用browseronly.proto:PairAllDeivce自动设置相关参数。
	PairAllDevices_(*PairDeviceRequest, Devices_PairAllDevices_Server) error
	mustEmbedUnimplementedDevicesServer()
}

// UnimplementedDevicesServer must be embedded to have forward compatible implementations.
type UnimplementedDevicesServer struct {
}

func (UnimplementedDevicesServer) ListDevices(context.Context, *ListDeviceRequest) (*ListDeviceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedDevicesServer) PairAllDevices_(*PairDeviceRequest, Devices_PairAllDevices_Server) error {
	return status.Errorf(codes.Unimplemented, "method PairAllDevices_ not implemented")
}
func (UnimplementedDevicesServer) mustEmbedUnimplementedDevicesServer() {}

// UnsafeDevicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevicesServer will
// result in compilation errors.
type UnsafeDevicesServer interface {
	mustEmbedUnimplementedDevicesServer()
}

func RegisterDevicesServer(s grpc.ServiceRegistrar, srv DevicesServer) {
	s.RegisterService(&Devices_ServiceDesc, srv)
}

func _Devices_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.common.Devices/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).ListDevices(ctx, req.(*ListDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_PairAllDevices__Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PairDeviceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DevicesServer).PairAllDevices_(m, &devicesPairAllDevices_Server{stream})
}

type Devices_PairAllDevices_Server interface {
	Send(*emptypb.Empty) error
	grpc.ServerStream
}

type devicesPairAllDevices_Server struct {
	grpc.ServerStream
}

func (x *devicesPairAllDevices_Server) Send(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

// Devices_ServiceDesc is the grpc.ServiceDesc for Devices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Devices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.common.Devices",
	HandlerType: (*DevicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDevices",
			Handler:    _Devices_ListDevices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PairAllDevices_",
			Handler:       _Devices_PairAllDevices__Handler,
			ServerStreams: true,
		},
	},
	Metadata: "common/devices/devices.proto",
}
