// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: common/media_meta.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MediaMetaClient is the client API for MediaMeta service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaMetaClient interface {
	GetUserMediaMeta(ctx context.Context, in *GetUserMediaMetaRequest, opts ...grpc.CallOption) (*GetUserMediaMetaResponse, error)
	GetUserMediaMetaBatch(ctx context.Context, opts ...grpc.CallOption) (MediaMeta_GetUserMediaMetaBatchClient, error)
}

type mediaMetaClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaMetaClient(cc grpc.ClientConnInterface) MediaMetaClient {
	return &mediaMetaClient{cc}
}

func (c *mediaMetaClient) GetUserMediaMeta(ctx context.Context, in *GetUserMediaMetaRequest, opts ...grpc.CallOption) (*GetUserMediaMetaResponse, error) {
	out := new(GetUserMediaMetaResponse)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.common.MediaMeta/GetUserMediaMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaMetaClient) GetUserMediaMetaBatch(ctx context.Context, opts ...grpc.CallOption) (MediaMeta_GetUserMediaMetaBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaMeta_ServiceDesc.Streams[0], "/cloud.lazycat.apis.common.MediaMeta/GetUserMediaMetaBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaMetaGetUserMediaMetaBatchClient{stream}
	return x, nil
}

type MediaMeta_GetUserMediaMetaBatchClient interface {
	Send(*GetUserMediaMetaRequest) error
	Recv() (*GetUserMediaMetaResponse, error)
	grpc.ClientStream
}

type mediaMetaGetUserMediaMetaBatchClient struct {
	grpc.ClientStream
}

func (x *mediaMetaGetUserMediaMetaBatchClient) Send(m *GetUserMediaMetaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mediaMetaGetUserMediaMetaBatchClient) Recv() (*GetUserMediaMetaResponse, error) {
	m := new(GetUserMediaMetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaMetaServer is the server API for MediaMeta service.
// All implementations must embed UnimplementedMediaMetaServer
// for forward compatibility
type MediaMetaServer interface {
	GetUserMediaMeta(context.Context, *GetUserMediaMetaRequest) (*GetUserMediaMetaResponse, error)
	GetUserMediaMetaBatch(MediaMeta_GetUserMediaMetaBatchServer) error
	mustEmbedUnimplementedMediaMetaServer()
}

// UnimplementedMediaMetaServer must be embedded to have forward compatible implementations.
type UnimplementedMediaMetaServer struct {
}

func (UnimplementedMediaMetaServer) GetUserMediaMeta(context.Context, *GetUserMediaMetaRequest) (*GetUserMediaMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMediaMeta not implemented")
}
func (UnimplementedMediaMetaServer) GetUserMediaMetaBatch(MediaMeta_GetUserMediaMetaBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserMediaMetaBatch not implemented")
}
func (UnimplementedMediaMetaServer) mustEmbedUnimplementedMediaMetaServer() {}

// UnsafeMediaMetaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaMetaServer will
// result in compilation errors.
type UnsafeMediaMetaServer interface {
	mustEmbedUnimplementedMediaMetaServer()
}

func RegisterMediaMetaServer(s grpc.ServiceRegistrar, srv MediaMetaServer) {
	s.RegisterService(&MediaMeta_ServiceDesc, srv)
}

func _MediaMeta_GetUserMediaMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMediaMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaMetaServer).GetUserMediaMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.common.MediaMeta/GetUserMediaMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaMetaServer).GetUserMediaMeta(ctx, req.(*GetUserMediaMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaMeta_GetUserMediaMetaBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaMetaServer).GetUserMediaMetaBatch(&mediaMetaGetUserMediaMetaBatchServer{stream})
}

type MediaMeta_GetUserMediaMetaBatchServer interface {
	Send(*GetUserMediaMetaResponse) error
	Recv() (*GetUserMediaMetaRequest, error)
	grpc.ServerStream
}

type mediaMetaGetUserMediaMetaBatchServer struct {
	grpc.ServerStream
}

func (x *mediaMetaGetUserMediaMetaBatchServer) Send(m *GetUserMediaMetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mediaMetaGetUserMediaMetaBatchServer) Recv() (*GetUserMediaMetaRequest, error) {
	m := new(GetUserMediaMetaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaMeta_ServiceDesc is the grpc.ServiceDesc for MediaMeta service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaMeta_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.common.MediaMeta",
	HandlerType: (*MediaMetaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserMediaMeta",
			Handler:    _MediaMeta_GetUserMediaMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserMediaMetaBatch",
			Handler:       _MediaMeta_GetUserMediaMetaBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "common/media_meta.proto",
}
