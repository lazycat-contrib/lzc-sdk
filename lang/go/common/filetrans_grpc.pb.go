// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: common/filetrans.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileTransferService_CreateQueue_FullMethodName          = "/cloud.lazycat.apis.common.FileTransferService/CreateQueue"
	FileTransferService_ListQueue_FullMethodName            = "/cloud.lazycat.apis.common.FileTransferService/ListQueue"
	FileTransferService_QueryQueue_FullMethodName           = "/cloud.lazycat.apis.common.FileTransferService/QueryQueue"
	FileTransferService_QueryQueueStatistics_FullMethodName = "/cloud.lazycat.apis.common.FileTransferService/QueryQueueStatistics"
	FileTransferService_ClearQueue_FullMethodName           = "/cloud.lazycat.apis.common.FileTransferService/ClearQueue"
	FileTransferService_ConfigQueue_FullMethodName          = "/cloud.lazycat.apis.common.FileTransferService/ConfigQueue"
	FileTransferService_PauseQueue_FullMethodName           = "/cloud.lazycat.apis.common.FileTransferService/PauseQueue"
	FileTransferService_StartQuque_FullMethodName           = "/cloud.lazycat.apis.common.FileTransferService/StartQuque"
	FileTransferService_QueryQueueMessage_FullMethodName    = "/cloud.lazycat.apis.common.FileTransferService/QueryQueueMessage"
	FileTransferService_CreateTask_FullMethodName           = "/cloud.lazycat.apis.common.FileTransferService/CreateTask"
	FileTransferService_CreateTasks_FullMethodName          = "/cloud.lazycat.apis.common.FileTransferService/CreateTasks"
	FileTransferService_QueryTask_FullMethodName            = "/cloud.lazycat.apis.common.FileTransferService/QueryTask"
	FileTransferService_ResumeTask_FullMethodName           = "/cloud.lazycat.apis.common.FileTransferService/ResumeTask"
	FileTransferService_PauseTask_FullMethodName            = "/cloud.lazycat.apis.common.FileTransferService/PauseTask"
	FileTransferService_DeleteTask_FullMethodName           = "/cloud.lazycat.apis.common.FileTransferService/DeleteTask"
)

// FileTransferServiceClient is the client API for FileTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTransferServiceClient interface {
	// 创建队列
	CreateQueue(ctx context.Context, in *TaskQueueID, opts ...grpc.CallOption) (*FileTaskQueueResp, error)
	// 列出所有 QueueID
	ListQueue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TaskQueueListResp, error)
	// 通过队列的 ID 和 Status 获取任务列表
	QueryQueue(ctx context.Context, in *TaskQueueQueryReq, opts ...grpc.CallOption) (FileTransferService_QueryQueueClient, error)
	// 通过队列的 ID 和 Status 获取任务状态，即running/paused等各个状态中各有多少个任务
	QueryQueueStatistics(ctx context.Context, in *TaskQueueStatisticsReq, opts ...grpc.CallOption) (*TaskQueueStatisticsResp, error)
	// 通过队列的 ID 和 Status 清除任务
	ClearQueue(ctx context.Context, in *TaskQueueQueryReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 根据队列 ID 设置队列的速率并发等设置
	ConfigQueue(ctx context.Context, in *TaskQueueConfigReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 根据队列 ID 暂停队列
	PauseQueue(ctx context.Context, in *TaskQueueID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 根据队列 ID 开始队列
	StartQuque(ctx context.Context, in *TaskQueueID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 根据队列 ID 获取队列动态信息（比如 pending 状态的增加了 task1）
	QueryQueueMessage(ctx context.Context, in *TaskQueueQueryReq, opts ...grpc.CallOption) (FileTransferService_QueryQueueMessageClient, error)
	// 暂时不支持创建Task时创建任务，需要提前创建好任务。queue_id不存在则报错
	CreateTask(ctx context.Context, in *TaskCreateRequest, opts ...grpc.CallOption) (*Task, error)
	CreateTasks(ctx context.Context, in *TaskCreateRequests, opts ...grpc.CallOption) (FileTransferService_CreateTasksClient, error)
	// 根据 ID 获取单个任务状态
	QueryTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (FileTransferService_QueryTaskClient, error)
	// 根据 ID 开始单个任务
	ResumeTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 根据 ID 暂停单个任务
	PauseTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 根据 ID 删除单个任务
	DeleteTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fileTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransferServiceClient(cc grpc.ClientConnInterface) FileTransferServiceClient {
	return &fileTransferServiceClient{cc}
}

func (c *fileTransferServiceClient) CreateQueue(ctx context.Context, in *TaskQueueID, opts ...grpc.CallOption) (*FileTaskQueueResp, error) {
	out := new(FileTaskQueueResp)
	err := c.cc.Invoke(ctx, FileTransferService_CreateQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) ListQueue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TaskQueueListResp, error) {
	out := new(TaskQueueListResp)
	err := c.cc.Invoke(ctx, FileTransferService_ListQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) QueryQueue(ctx context.Context, in *TaskQueueQueryReq, opts ...grpc.CallOption) (FileTransferService_QueryQueueClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[0], FileTransferService_QueryQueue_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceQueryQueueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTransferService_QueryQueueClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type fileTransferServiceQueryQueueClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceQueryQueueClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransferServiceClient) QueryQueueStatistics(ctx context.Context, in *TaskQueueStatisticsReq, opts ...grpc.CallOption) (*TaskQueueStatisticsResp, error) {
	out := new(TaskQueueStatisticsResp)
	err := c.cc.Invoke(ctx, FileTransferService_QueryQueueStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) ClearQueue(ctx context.Context, in *TaskQueueQueryReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FileTransferService_ClearQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) ConfigQueue(ctx context.Context, in *TaskQueueConfigReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FileTransferService_ConfigQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) PauseQueue(ctx context.Context, in *TaskQueueID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FileTransferService_PauseQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) StartQuque(ctx context.Context, in *TaskQueueID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FileTransferService_StartQuque_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) QueryQueueMessage(ctx context.Context, in *TaskQueueQueryReq, opts ...grpc.CallOption) (FileTransferService_QueryQueueMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[1], FileTransferService_QueryQueueMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceQueryQueueMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTransferService_QueryQueueMessageClient interface {
	Recv() (*QueueMessageResp, error)
	grpc.ClientStream
}

type fileTransferServiceQueryQueueMessageClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceQueryQueueMessageClient) Recv() (*QueueMessageResp, error) {
	m := new(QueueMessageResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransferServiceClient) CreateTask(ctx context.Context, in *TaskCreateRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, FileTransferService_CreateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) CreateTasks(ctx context.Context, in *TaskCreateRequests, opts ...grpc.CallOption) (FileTransferService_CreateTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[2], FileTransferService_CreateTasks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceCreateTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTransferService_CreateTasksClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type fileTransferServiceCreateTasksClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceCreateTasksClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransferServiceClient) QueryTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (FileTransferService_QueryTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[3], FileTransferService_QueryTask_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceQueryTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTransferService_QueryTaskClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type fileTransferServiceQueryTaskClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceQueryTaskClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransferServiceClient) ResumeTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FileTransferService_ResumeTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) PauseTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FileTransferService_PauseTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) DeleteTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FileTransferService_DeleteTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileTransferServiceServer is the server API for FileTransferService service.
// All implementations must embed UnimplementedFileTransferServiceServer
// for forward compatibility
type FileTransferServiceServer interface {
	// 创建队列
	CreateQueue(context.Context, *TaskQueueID) (*FileTaskQueueResp, error)
	// 列出所有 QueueID
	ListQueue(context.Context, *emptypb.Empty) (*TaskQueueListResp, error)
	// 通过队列的 ID 和 Status 获取任务列表
	QueryQueue(*TaskQueueQueryReq, FileTransferService_QueryQueueServer) error
	// 通过队列的 ID 和 Status 获取任务状态，即running/paused等各个状态中各有多少个任务
	QueryQueueStatistics(context.Context, *TaskQueueStatisticsReq) (*TaskQueueStatisticsResp, error)
	// 通过队列的 ID 和 Status 清除任务
	ClearQueue(context.Context, *TaskQueueQueryReq) (*emptypb.Empty, error)
	// 根据队列 ID 设置队列的速率并发等设置
	ConfigQueue(context.Context, *TaskQueueConfigReq) (*emptypb.Empty, error)
	// 根据队列 ID 暂停队列
	PauseQueue(context.Context, *TaskQueueID) (*emptypb.Empty, error)
	// 根据队列 ID 开始队列
	StartQuque(context.Context, *TaskQueueID) (*emptypb.Empty, error)
	// 根据队列 ID 获取队列动态信息（比如 pending 状态的增加了 task1）
	QueryQueueMessage(*TaskQueueQueryReq, FileTransferService_QueryQueueMessageServer) error
	// 暂时不支持创建Task时创建任务，需要提前创建好任务。queue_id不存在则报错
	CreateTask(context.Context, *TaskCreateRequest) (*Task, error)
	CreateTasks(*TaskCreateRequests, FileTransferService_CreateTasksServer) error
	// 根据 ID 获取单个任务状态
	QueryTask(*TaskID, FileTransferService_QueryTaskServer) error
	// 根据 ID 开始单个任务
	ResumeTask(context.Context, *TaskID) (*emptypb.Empty, error)
	// 根据 ID 暂停单个任务
	PauseTask(context.Context, *TaskID) (*emptypb.Empty, error)
	// 根据 ID 删除单个任务
	DeleteTask(context.Context, *TaskID) (*emptypb.Empty, error)
	mustEmbedUnimplementedFileTransferServiceServer()
}

// UnimplementedFileTransferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileTransferServiceServer struct {
}

func (UnimplementedFileTransferServiceServer) CreateQueue(context.Context, *TaskQueueID) (*FileTaskQueueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedFileTransferServiceServer) ListQueue(context.Context, *emptypb.Empty) (*TaskQueueListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueue not implemented")
}
func (UnimplementedFileTransferServiceServer) QueryQueue(*TaskQueueQueryReq, FileTransferService_QueryQueueServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryQueue not implemented")
}
func (UnimplementedFileTransferServiceServer) QueryQueueStatistics(context.Context, *TaskQueueStatisticsReq) (*TaskQueueStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryQueueStatistics not implemented")
}
func (UnimplementedFileTransferServiceServer) ClearQueue(context.Context, *TaskQueueQueryReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearQueue not implemented")
}
func (UnimplementedFileTransferServiceServer) ConfigQueue(context.Context, *TaskQueueConfigReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigQueue not implemented")
}
func (UnimplementedFileTransferServiceServer) PauseQueue(context.Context, *TaskQueueID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseQueue not implemented")
}
func (UnimplementedFileTransferServiceServer) StartQuque(context.Context, *TaskQueueID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartQuque not implemented")
}
func (UnimplementedFileTransferServiceServer) QueryQueueMessage(*TaskQueueQueryReq, FileTransferService_QueryQueueMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryQueueMessage not implemented")
}
func (UnimplementedFileTransferServiceServer) CreateTask(context.Context, *TaskCreateRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedFileTransferServiceServer) CreateTasks(*TaskCreateRequests, FileTransferService_CreateTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateTasks not implemented")
}
func (UnimplementedFileTransferServiceServer) QueryTask(*TaskID, FileTransferService_QueryTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryTask not implemented")
}
func (UnimplementedFileTransferServiceServer) ResumeTask(context.Context, *TaskID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeTask not implemented")
}
func (UnimplementedFileTransferServiceServer) PauseTask(context.Context, *TaskID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseTask not implemented")
}
func (UnimplementedFileTransferServiceServer) DeleteTask(context.Context, *TaskID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedFileTransferServiceServer) mustEmbedUnimplementedFileTransferServiceServer() {}

// UnsafeFileTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTransferServiceServer will
// result in compilation errors.
type UnsafeFileTransferServiceServer interface {
	mustEmbedUnimplementedFileTransferServiceServer()
}

func RegisterFileTransferServiceServer(s grpc.ServiceRegistrar, srv FileTransferServiceServer) {
	s.RegisterService(&FileTransferService_ServiceDesc, srv)
}

func _FileTransferService_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQueueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_CreateQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).CreateQueue(ctx, req.(*TaskQueueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_ListQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).ListQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_ListQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).ListQueue(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_QueryQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskQueueQueryReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServiceServer).QueryQueue(m, &fileTransferServiceQueryQueueServer{stream})
}

type FileTransferService_QueryQueueServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type fileTransferServiceQueryQueueServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceQueryQueueServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func _FileTransferService_QueryQueueStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQueueStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).QueryQueueStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_QueryQueueStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).QueryQueueStatistics(ctx, req.(*TaskQueueStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_ClearQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQueueQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).ClearQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_ClearQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).ClearQueue(ctx, req.(*TaskQueueQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_ConfigQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQueueConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).ConfigQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_ConfigQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).ConfigQueue(ctx, req.(*TaskQueueConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_PauseQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQueueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).PauseQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_PauseQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).PauseQueue(ctx, req.(*TaskQueueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_StartQuque_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQueueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).StartQuque(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_StartQuque_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).StartQuque(ctx, req.(*TaskQueueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_QueryQueueMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskQueueQueryReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServiceServer).QueryQueueMessage(m, &fileTransferServiceQueryQueueMessageServer{stream})
}

type FileTransferService_QueryQueueMessageServer interface {
	Send(*QueueMessageResp) error
	grpc.ServerStream
}

type fileTransferServiceQueryQueueMessageServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceQueryQueueMessageServer) Send(m *QueueMessageResp) error {
	return x.ServerStream.SendMsg(m)
}

func _FileTransferService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).CreateTask(ctx, req.(*TaskCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_CreateTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskCreateRequests)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServiceServer).CreateTasks(m, &fileTransferServiceCreateTasksServer{stream})
}

type FileTransferService_CreateTasksServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type fileTransferServiceCreateTasksServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceCreateTasksServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func _FileTransferService_QueryTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServiceServer).QueryTask(m, &fileTransferServiceQueryTaskServer{stream})
}

type FileTransferService_QueryTaskServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type fileTransferServiceQueryTaskServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceQueryTaskServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func _FileTransferService_ResumeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).ResumeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_ResumeTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).ResumeTask(ctx, req.(*TaskID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_PauseTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).PauseTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_PauseTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).PauseTask(ctx, req.(*TaskID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).DeleteTask(ctx, req.(*TaskID))
	}
	return interceptor(ctx, in, info, handler)
}

// FileTransferService_ServiceDesc is the grpc.ServiceDesc for FileTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.common.FileTransferService",
	HandlerType: (*FileTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQueue",
			Handler:    _FileTransferService_CreateQueue_Handler,
		},
		{
			MethodName: "ListQueue",
			Handler:    _FileTransferService_ListQueue_Handler,
		},
		{
			MethodName: "QueryQueueStatistics",
			Handler:    _FileTransferService_QueryQueueStatistics_Handler,
		},
		{
			MethodName: "ClearQueue",
			Handler:    _FileTransferService_ClearQueue_Handler,
		},
		{
			MethodName: "ConfigQueue",
			Handler:    _FileTransferService_ConfigQueue_Handler,
		},
		{
			MethodName: "PauseQueue",
			Handler:    _FileTransferService_PauseQueue_Handler,
		},
		{
			MethodName: "StartQuque",
			Handler:    _FileTransferService_StartQuque_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _FileTransferService_CreateTask_Handler,
		},
		{
			MethodName: "ResumeTask",
			Handler:    _FileTransferService_ResumeTask_Handler,
		},
		{
			MethodName: "PauseTask",
			Handler:    _FileTransferService_PauseTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _FileTransferService_DeleteTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryQueue",
			Handler:       _FileTransferService_QueryQueue_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryQueueMessage",
			Handler:       _FileTransferService_QueryQueueMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateTasks",
			Handler:       _FileTransferService_CreateTasks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryTask",
			Handler:       _FileTransferService_QueryTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "common/filetrans.proto",
}
