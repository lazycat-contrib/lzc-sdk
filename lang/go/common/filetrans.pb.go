// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.4
// source: common/filetrans.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Task 所有状态
type TaskStatus int32

const (
	TaskStatus_Pending      TaskStatus = 0 // 等待下载
	TaskStatus_Transmitting TaskStatus = 1 // 正在下载
	TaskStatus_Paused       TaskStatus = 2 // 暂停
	TaskStatus_Finished     TaskStatus = 3 // 已完成
	TaskStatus_Failed       TaskStatus = 4 // 下载失败
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "Pending",
		1: "Transmitting",
		2: "Paused",
		3: "Finished",
		4: "Failed",
	}
	TaskStatus_value = map[string]int32{
		"Pending":      0,
		"Transmitting": 1,
		"Paused":       2,
		"Finished":     3,
		"Failed":       4,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_filetrans_proto_enumTypes[0].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_common_filetrans_proto_enumTypes[0]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{0}
}

type QueueStatus int32

const (
	QueueStatus_Running QueueStatus = 0 // 等待下载
	QueueStatus_Suspend QueueStatus = 1 // 已完成
)

// Enum value maps for QueueStatus.
var (
	QueueStatus_name = map[int32]string{
		0: "Running",
		1: "Suspend",
	}
	QueueStatus_value = map[string]int32{
		"Running": 0,
		"Suspend": 1,
	}
)

func (x QueueStatus) Enum() *QueueStatus {
	p := new(QueueStatus)
	*p = x
	return p
}

func (x QueueStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueueStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_filetrans_proto_enumTypes[1].Descriptor()
}

func (QueueStatus) Type() protoreflect.EnumType {
	return &file_common_filetrans_proto_enumTypes[1]
}

func (x QueueStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueueStatus.Descriptor instead.
func (QueueStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{1}
}

type Order int32

const (
	Order_ASC  Order = 0
	Order_DESC Order = 1
)

// Enum value maps for Order.
var (
	Order_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	Order_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x Order) Enum() *Order {
	p := new(Order)
	*p = x
	return p
}

func (x Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order) Descriptor() protoreflect.EnumDescriptor {
	return file_common_filetrans_proto_enumTypes[2].Descriptor()
}

func (Order) Type() protoreflect.EnumType {
	return &file_common_filetrans_proto_enumTypes[2]
}

func (x Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order.Descriptor instead.
func (Order) EnumDescriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{2}
}

type MsgAction int32

const (
	MsgAction_Add       MsgAction = 0
	MsgAction_Update    MsgAction = 2
	MsgAction_Cancel    MsgAction = 3
	MsgAction_UpdateAll MsgAction = 4
	MsgAction_CancelAll MsgAction = 5
	MsgAction_StartAll  MsgAction = 6
	MsgAction_PauseAll  MsgAction = 7
)

// Enum value maps for MsgAction.
var (
	MsgAction_name = map[int32]string{
		0: "Add",
		2: "Update",
		3: "Cancel",
		4: "UpdateAll",
		5: "CancelAll",
		6: "StartAll",
		7: "PauseAll",
	}
	MsgAction_value = map[string]int32{
		"Add":       0,
		"Update":    2,
		"Cancel":    3,
		"UpdateAll": 4,
		"CancelAll": 5,
		"StartAll":  6,
		"PauseAll":  7,
	}
)

func (x MsgAction) Enum() *MsgAction {
	p := new(MsgAction)
	*p = x
	return p
}

func (x MsgAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgAction) Descriptor() protoreflect.EnumDescriptor {
	return file_common_filetrans_proto_enumTypes[3].Descriptor()
}

func (MsgAction) Type() protoreflect.EnumType {
	return &file_common_filetrans_proto_enumTypes[3]
}

func (x MsgAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgAction.Descriptor instead.
func (MsgAction) EnumDescriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{3}
}

type FileLocation_FileLocationType int32

const (
	FileLocation_Url   FileLocation_FileLocationType = 0
	FileLocation_Local FileLocation_FileLocationType = 2
)

// Enum value maps for FileLocation_FileLocationType.
var (
	FileLocation_FileLocationType_name = map[int32]string{
		0: "Url",
		2: "Local",
	}
	FileLocation_FileLocationType_value = map[string]int32{
		"Url":   0,
		"Local": 2,
	}
)

func (x FileLocation_FileLocationType) Enum() *FileLocation_FileLocationType {
	p := new(FileLocation_FileLocationType)
	*p = x
	return p
}

func (x FileLocation_FileLocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileLocation_FileLocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_filetrans_proto_enumTypes[4].Descriptor()
}

func (FileLocation_FileLocationType) Type() protoreflect.EnumType {
	return &file_common_filetrans_proto_enumTypes[4]
}

func (x FileLocation_FileLocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileLocation_FileLocationType.Descriptor instead.
func (FileLocation_FileLocationType) EnumDescriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{0, 0}
}

type FileLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationType FileLocation_FileLocationType `protobuf:"varint,1,opt,name=location_type,json=locationType,proto3,enum=cloud.lazycat.apis.common.FileLocation_FileLocationType" json:"location_type,omitempty"`
	Value        string                        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FileLocation) Reset() {
	*x = FileLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileLocation) ProtoMessage() {}

func (x *FileLocation) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileLocation.ProtoReflect.Descriptor instead.
func (*FileLocation) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{0}
}

func (x *FileLocation) GetLocationType() FileLocation_FileLocationType {
	if x != nil {
		return x.LocationType
	}
	return FileLocation_Url
}

func (x *FileLocation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// TODO 考虑空文件夹
type MetaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetaInfo string `protobuf:"bytes,1,opt,name=meta_info,json=metaInfo,proto3" json:"meta_info,omitempty"`
}

func (x *MetaInfo) Reset() {
	*x = MetaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaInfo) ProtoMessage() {}

func (x *MetaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaInfo.ProtoReflect.Descriptor instead.
func (*MetaInfo) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{1}
}

func (x *MetaInfo) GetMetaInfo() string {
	if x != nil {
		return x.MetaInfo
	}
	return ""
}

// Task创建请求
type TaskCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// src任意http url
	// https://7e-febf-6026-f14a-a3ec-0.d.heiyu.space:4443/s/files/home/abc.mp4
	Src *FileLocation `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	// app的files相对路径或具备PUT的webdav地址
	// /home/abc.mp4 or
	// https://apis.snyht4.heiyu.space/s/files/home/video/abc.mp4
	Dst *FileLocation `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	// abc.mp4
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 若queue 需提前创建，（固定前缀id）
	QueueId  *TaskQueueID `protobuf:"bytes,4,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Status   *TaskStatus  `protobuf:"varint,5,opt,name=status,proto3,enum=cloud.lazycat.apis.common.TaskStatus,oneof" json:"status,omitempty"`
	MetaInfo *MetaInfo    `protobuf:"bytes,6,opt,name=meta_info,json=metaInfo,proto3,oneof" json:"meta_info,omitempty"`
	Uid      *string      `protobuf:"bytes,7,opt,name=uid,proto3,oneof" json:"uid,omitempty"`                     // 给相册后端用的, 用来告知transfer, 请求者的uid。这两个uid在用户下载被分享的相册的图片时有用。
	UidSrc   *string      `protobuf:"bytes,8,opt,name=uid_src,json=uidSrc,proto3,oneof" json:"uid_src,omitempty"` // 给相册后端用的, 用来告知transfer, src(一定为本地路径，且为相对路径)的所属uid。
}

func (x *TaskCreateRequest) Reset() {
	*x = TaskCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateRequest) ProtoMessage() {}

func (x *TaskCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateRequest.ProtoReflect.Descriptor instead.
func (*TaskCreateRequest) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{2}
}

func (x *TaskCreateRequest) GetSrc() *FileLocation {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *TaskCreateRequest) GetDst() *FileLocation {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *TaskCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskCreateRequest) GetQueueId() *TaskQueueID {
	if x != nil {
		return x.QueueId
	}
	return nil
}

func (x *TaskCreateRequest) GetStatus() TaskStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return TaskStatus_Pending
}

func (x *TaskCreateRequest) GetMetaInfo() *MetaInfo {
	if x != nil {
		return x.MetaInfo
	}
	return nil
}

func (x *TaskCreateRequest) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *TaskCreateRequest) GetUidSrc() string {
	if x != nil && x.UidSrc != nil {
		return *x.UidSrc
	}
	return ""
}

type TaskCreateRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*TaskCreateRequest `protobuf:"bytes,1,rep,name=Requests,proto3" json:"Requests,omitempty"`
}

func (x *TaskCreateRequests) Reset() {
	*x = TaskCreateRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateRequests) ProtoMessage() {}

func (x *TaskCreateRequests) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateRequests.ProtoReflect.Descriptor instead.
func (*TaskCreateRequests) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{3}
}

func (x *TaskCreateRequests) GetRequests() []*TaskCreateRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Task结构体
type TaskID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskID) Reset() {
	*x = TaskID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskID) ProtoMessage() {}

func (x *TaskID) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskID.ProtoReflect.Descriptor instead.
func (*TaskID) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{4}
}

func (x *TaskID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TransmitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总大小， 单位为 Byte
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 已传输大小， 单位为 Byte
	Transmitted int64 `protobuf:"varint,2,opt,name=transmitted,proto3" json:"transmitted,omitempty"`
	// 当前速度， 单位为 Byte/s
	Speed int64 `protobuf:"varint,3,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *TransmitInfo) Reset() {
	*x = TransmitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransmitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransmitInfo) ProtoMessage() {}

func (x *TransmitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransmitInfo.ProtoReflect.Descriptor instead.
func (*TransmitInfo) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{5}
}

func (x *TransmitInfo) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TransmitInfo) GetTransmitted() int64 {
	if x != nil {
		return x.Transmitted
	}
	return 0
}

func (x *TransmitInfo) GetSpeed() int64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *TaskID                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Src       *FileLocation          `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	Dst       *FileLocation          `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
	FileName  string                 `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	MimeType  string                 `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Status    TaskStatus             `protobuf:"varint,6,opt,name=status,proto3,enum=cloud.lazycat.apis.common.TaskStatus" json:"status,omitempty"`
	Size      *int64                 `protobuf:"varint,7,opt,name=size,proto3,oneof" json:"size,omitempty"` // 前端请求可以没有大小，返回需要有
	Info      *TransmitInfo          `protobuf:"bytes,8,opt,name=info,proto3,oneof" json:"info,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	MetaInfo  *MetaInfo              `protobuf:"bytes,11,opt,name=meta_info,json=metaInfo,proto3,oneof" json:"meta_info,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{6}
}

func (x *Task) GetId() *TaskID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Task) GetSrc() *FileLocation {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *Task) GetDst() *FileLocation {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *Task) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Task) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Task) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Pending
}

func (x *Task) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *Task) GetInfo() *TransmitInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Task) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Task) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Task) GetMetaInfo() *MetaInfo {
	if x != nil {
		return x.MetaInfo
	}
	return nil
}

// 任务队列TaskQueue设计
type TaskQueueConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxParallel    int64 `protobuf:"varint,1,opt,name=max_parallel,json=maxParallel,proto3" json:"max_parallel,omitempty"`
	MaxRatePerFile int64 `protobuf:"varint,2,opt,name=max_rate_per_file,json=maxRatePerFile,proto3" json:"max_rate_per_file,omitempty"`
	MaxRate        int64 `protobuf:"varint,3,opt,name=max_rate,json=maxRate,proto3" json:"max_rate,omitempty"`
}

func (x *TaskQueueConfig) Reset() {
	*x = TaskQueueConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskQueueConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueConfig) ProtoMessage() {}

func (x *TaskQueueConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueConfig.ProtoReflect.Descriptor instead.
func (*TaskQueueConfig) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{7}
}

func (x *TaskQueueConfig) GetMaxParallel() int64 {
	if x != nil {
		return x.MaxParallel
	}
	return 0
}

func (x *TaskQueueConfig) GetMaxRatePerFile() int64 {
	if x != nil {
		return x.MaxRatePerFile
	}
	return 0
}

func (x *TaskQueueConfig) GetMaxRate() int64 {
	if x != nil {
		return x.MaxRate
	}
	return 0
}

type TaskQueueID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid *string `protobuf:"bytes,2,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
}

func (x *TaskQueueID) Reset() {
	*x = TaskQueueID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskQueueID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueID) ProtoMessage() {}

func (x *TaskQueueID) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueID.ProtoReflect.Descriptor instead.
func (*TaskQueueID) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{8}
}

func (x *TaskQueueID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskQueueID) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

type TaskQueueConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *TaskQueueID     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Config *TaskQueueConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *TaskQueueConfigReq) Reset() {
	*x = TaskQueueConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskQueueConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueConfigReq) ProtoMessage() {}

func (x *TaskQueueConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueConfigReq.ProtoReflect.Descriptor instead.
func (*TaskQueueConfigReq) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{9}
}

func (x *TaskQueueConfigReq) GetId() *TaskQueueID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskQueueConfigReq) GetConfig() *TaskQueueConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// TODO 考虑暂停状态问题
type TaskQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *TaskQueueID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status QueueStatus  `protobuf:"varint,2,opt,name=status,proto3,enum=cloud.lazycat.apis.common.QueueStatus" json:"status,omitempty"`
	Tasks  []*Task      `protobuf:"bytes,3,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *TaskQueue) Reset() {
	*x = TaskQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueue) ProtoMessage() {}

func (x *TaskQueue) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueue.ProtoReflect.Descriptor instead.
func (*TaskQueue) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{10}
}

func (x *TaskQueue) GetId() *TaskQueueID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskQueue) GetStatus() QueueStatus {
	if x != nil {
		return x.Status
	}
	return QueueStatus_Running
}

func (x *TaskQueue) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type FileTaskQueueResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *TaskQueueID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status QueueStatus  `protobuf:"varint,2,opt,name=status,proto3,enum=cloud.lazycat.apis.common.QueueStatus" json:"status,omitempty"`
	Tasks  []*Task      `protobuf:"bytes,3,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *FileTaskQueueResp) Reset() {
	*x = FileTaskQueueResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileTaskQueueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTaskQueueResp) ProtoMessage() {}

func (x *FileTaskQueueResp) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTaskQueueResp.ProtoReflect.Descriptor instead.
func (*FileTaskQueueResp) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{11}
}

func (x *FileTaskQueueResp) GetId() *TaskQueueID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FileTaskQueueResp) GetStatus() QueueStatus {
	if x != nil {
		return x.Status
	}
	return QueueStatus_Running
}

func (x *FileTaskQueueResp) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type TaskQueueQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *TaskQueueID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status []TaskStatus `protobuf:"varint,2,rep,packed,name=status,proto3,enum=cloud.lazycat.apis.common.TaskStatus" json:"status,omitempty"`
	Order  *Order       `protobuf:"varint,3,opt,name=order,proto3,enum=cloud.lazycat.apis.common.Order,oneof" json:"order,omitempty"`
}

func (x *TaskQueueQueryReq) Reset() {
	*x = TaskQueueQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskQueueQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueQueryReq) ProtoMessage() {}

func (x *TaskQueueQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueQueryReq.ProtoReflect.Descriptor instead.
func (*TaskQueueQueryReq) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{12}
}

func (x *TaskQueueQueryReq) GetId() *TaskQueueID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskQueueQueryReq) GetStatus() []TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TaskQueueQueryReq) GetOrder() Order {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return Order_ASC
}

type TaskQueueStatisticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []*TaskQueueID `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskQueueStatisticsReq) Reset() {
	*x = TaskQueueStatisticsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskQueueStatisticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueStatisticsReq) ProtoMessage() {}

func (x *TaskQueueStatisticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueStatisticsReq.ProtoReflect.Descriptor instead.
func (*TaskQueueStatisticsReq) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{13}
}

func (x *TaskQueueStatisticsReq) GetId() []*TaskQueueID {
	if x != nil {
		return x.Id
	}
	return nil
}

type TaskQueueStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pending      int64 `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`           // 等待下载
	Transmitting int64 `protobuf:"varint,2,opt,name=transmitting,proto3" json:"transmitting,omitempty"` // 正在下载
	Paused       int64 `protobuf:"varint,3,opt,name=paused,proto3" json:"paused,omitempty"`             // 暂停
	Finished     int64 `protobuf:"varint,4,opt,name=finished,proto3" json:"finished,omitempty"`         // 已完成
	Failed       int64 `protobuf:"varint,5,opt,name=failed,proto3" json:"failed,omitempty"`             // 下载失败
}

func (x *TaskQueueStatistics) Reset() {
	*x = TaskQueueStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskQueueStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueStatistics) ProtoMessage() {}

func (x *TaskQueueStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueStatistics.ProtoReflect.Descriptor instead.
func (*TaskQueueStatistics) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{14}
}

func (x *TaskQueueStatistics) GetPending() int64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

func (x *TaskQueueStatistics) GetTransmitting() int64 {
	if x != nil {
		return x.Transmitting
	}
	return 0
}

func (x *TaskQueueStatistics) GetPaused() int64 {
	if x != nil {
		return x.Paused
	}
	return 0
}

func (x *TaskQueueStatistics) GetFinished() int64 {
	if x != nil {
		return x.Finished
	}
	return 0
}

func (x *TaskQueueStatistics) GetFailed() int64 {
	if x != nil {
		return x.Failed
	}
	return 0
}

type TaskQueueStatisticsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statistics []*TaskQueueStatistics `protobuf:"bytes,1,rep,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *TaskQueueStatisticsResp) Reset() {
	*x = TaskQueueStatisticsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskQueueStatisticsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueStatisticsResp) ProtoMessage() {}

func (x *TaskQueueStatisticsResp) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueStatisticsResp.ProtoReflect.Descriptor instead.
func (*TaskQueueStatisticsResp) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{15}
}

func (x *TaskQueueStatisticsResp) GetStatistics() []*TaskQueueStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type QueueMessageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *TaskID    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Task         *Task      `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	Action       MsgAction  `protobuf:"varint,3,opt,name=action,proto3,enum=cloud.lazycat.apis.common.MsgAction" json:"action,omitempty"`
	Status       TaskStatus `protobuf:"varint,4,opt,name=status,proto3,enum=cloud.lazycat.apis.common.TaskStatus" json:"status,omitempty"`
	ErrorMessage *string    `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
}

func (x *QueueMessageResp) Reset() {
	*x = QueueMessageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueMessageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueMessageResp) ProtoMessage() {}

func (x *QueueMessageResp) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueMessageResp.ProtoReflect.Descriptor instead.
func (*QueueMessageResp) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{16}
}

func (x *QueueMessageResp) GetId() *TaskID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QueueMessageResp) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *QueueMessageResp) GetAction() MsgAction {
	if x != nil {
		return x.Action
	}
	return MsgAction_Add
}

func (x *QueueMessageResp) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Pending
}

func (x *QueueMessageResp) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type TaskQueueListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []*TaskQueueID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *TaskQueueListResp) Reset() {
	*x = TaskQueueListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_filetrans_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskQueueListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueListResp) ProtoMessage() {}

func (x *TaskQueueListResp) ProtoReflect() protoreflect.Message {
	mi := &file_common_filetrans_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueListResp.ProtoReflect.Descriptor instead.
func (*TaskQueueListResp) Descriptor() ([]byte, []int) {
	return file_common_filetrans_proto_rawDescGZIP(), []int{17}
}

func (x *TaskQueueListResp) GetIds() []*TaskQueueID {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_common_filetrans_proto protoreflect.FileDescriptor

var file_common_filetrans_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x55,
	0x72, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x02, 0x22,
	0x27, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcd, 0x03, 0x0a, 0x11, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x39, 0x0a, 0x03, 0x64, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c,
	0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x64, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x44, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x45, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63,
	0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x06, 0x75, 0x69, 0x64, 0x53, 0x72, 0x63, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x22, 0x5e, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x48,
	0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x18, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x5c, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x22, 0x88, 0x05, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x31, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61,
	0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x03,
	0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x39, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a,
	0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63,
	0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x04,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x7a, 0x0a, 0x0f, 0x54,
	0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x22, 0x3c, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x75, 0x69, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a,
	0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xba, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63,
	0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35,
	0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x44, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79,
	0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63,
	0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x54,
	0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c,
	0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x50,
	0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a,
	0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x9f, 0x01, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x22, 0x69, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xb3, 0x02,
	0x0a, 0x10, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x31, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79,
	0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x3c, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61,
	0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x44, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x2a, 0x51, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x27, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x10, 0x01, 0x2a, 0x1a,
	0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x2a, 0x66, 0x0a, 0x09, 0x4d, 0x73,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x41, 0x6c, 0x6c, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x6c, 0x6c, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x61, 0x75, 0x73, 0x65, 0x41, 0x6c, 0x6c,
	0x10, 0x07, 0x32, 0xdf, 0x0b, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x44, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c,
	0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a,
	0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63,
	0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7f, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x31, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63,
	0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x44, 0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x0a, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x56, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0a, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x44, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x51, 0x75, 0x71, 0x75, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x44, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x11, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5d, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2c, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x53, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x1a,
	0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63,
	0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x09, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6c, 0x69, 0x6e, 0x61, 0x6b, 0x65, 0x73, 0x69, 0x2f, 0x6c, 0x7a, 0x63, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_filetrans_proto_rawDescOnce sync.Once
	file_common_filetrans_proto_rawDescData = file_common_filetrans_proto_rawDesc
)

func file_common_filetrans_proto_rawDescGZIP() []byte {
	file_common_filetrans_proto_rawDescOnce.Do(func() {
		file_common_filetrans_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_filetrans_proto_rawDescData)
	})
	return file_common_filetrans_proto_rawDescData
}

var file_common_filetrans_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_common_filetrans_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_common_filetrans_proto_goTypes = []interface{}{
	(TaskStatus)(0),                    // 0: cloud.lazycat.apis.common.TaskStatus
	(QueueStatus)(0),                   // 1: cloud.lazycat.apis.common.QueueStatus
	(Order)(0),                         // 2: cloud.lazycat.apis.common.Order
	(MsgAction)(0),                     // 3: cloud.lazycat.apis.common.MsgAction
	(FileLocation_FileLocationType)(0), // 4: cloud.lazycat.apis.common.FileLocation.FileLocationType
	(*FileLocation)(nil),               // 5: cloud.lazycat.apis.common.FileLocation
	(*MetaInfo)(nil),                   // 6: cloud.lazycat.apis.common.MetaInfo
	(*TaskCreateRequest)(nil),          // 7: cloud.lazycat.apis.common.TaskCreateRequest
	(*TaskCreateRequests)(nil),         // 8: cloud.lazycat.apis.common.TaskCreateRequests
	(*TaskID)(nil),                     // 9: cloud.lazycat.apis.common.TaskID
	(*TransmitInfo)(nil),               // 10: cloud.lazycat.apis.common.TransmitInfo
	(*Task)(nil),                       // 11: cloud.lazycat.apis.common.Task
	(*TaskQueueConfig)(nil),            // 12: cloud.lazycat.apis.common.TaskQueueConfig
	(*TaskQueueID)(nil),                // 13: cloud.lazycat.apis.common.TaskQueueID
	(*TaskQueueConfigReq)(nil),         // 14: cloud.lazycat.apis.common.TaskQueueConfigReq
	(*TaskQueue)(nil),                  // 15: cloud.lazycat.apis.common.TaskQueue
	(*FileTaskQueueResp)(nil),          // 16: cloud.lazycat.apis.common.FileTaskQueueResp
	(*TaskQueueQueryReq)(nil),          // 17: cloud.lazycat.apis.common.TaskQueueQueryReq
	(*TaskQueueStatisticsReq)(nil),     // 18: cloud.lazycat.apis.common.TaskQueueStatisticsReq
	(*TaskQueueStatistics)(nil),        // 19: cloud.lazycat.apis.common.TaskQueueStatistics
	(*TaskQueueStatisticsResp)(nil),    // 20: cloud.lazycat.apis.common.TaskQueueStatisticsResp
	(*QueueMessageResp)(nil),           // 21: cloud.lazycat.apis.common.QueueMessageResp
	(*TaskQueueListResp)(nil),          // 22: cloud.lazycat.apis.common.TaskQueueListResp
	(*timestamppb.Timestamp)(nil),      // 23: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),              // 24: google.protobuf.Empty
}
var file_common_filetrans_proto_depIdxs = []int32{
	4,  // 0: cloud.lazycat.apis.common.FileLocation.location_type:type_name -> cloud.lazycat.apis.common.FileLocation.FileLocationType
	5,  // 1: cloud.lazycat.apis.common.TaskCreateRequest.src:type_name -> cloud.lazycat.apis.common.FileLocation
	5,  // 2: cloud.lazycat.apis.common.TaskCreateRequest.dst:type_name -> cloud.lazycat.apis.common.FileLocation
	13, // 3: cloud.lazycat.apis.common.TaskCreateRequest.queue_id:type_name -> cloud.lazycat.apis.common.TaskQueueID
	0,  // 4: cloud.lazycat.apis.common.TaskCreateRequest.status:type_name -> cloud.lazycat.apis.common.TaskStatus
	6,  // 5: cloud.lazycat.apis.common.TaskCreateRequest.meta_info:type_name -> cloud.lazycat.apis.common.MetaInfo
	7,  // 6: cloud.lazycat.apis.common.TaskCreateRequests.Requests:type_name -> cloud.lazycat.apis.common.TaskCreateRequest
	9,  // 7: cloud.lazycat.apis.common.Task.id:type_name -> cloud.lazycat.apis.common.TaskID
	5,  // 8: cloud.lazycat.apis.common.Task.src:type_name -> cloud.lazycat.apis.common.FileLocation
	5,  // 9: cloud.lazycat.apis.common.Task.dst:type_name -> cloud.lazycat.apis.common.FileLocation
	0,  // 10: cloud.lazycat.apis.common.Task.status:type_name -> cloud.lazycat.apis.common.TaskStatus
	10, // 11: cloud.lazycat.apis.common.Task.info:type_name -> cloud.lazycat.apis.common.TransmitInfo
	23, // 12: cloud.lazycat.apis.common.Task.created_at:type_name -> google.protobuf.Timestamp
	23, // 13: cloud.lazycat.apis.common.Task.updated_at:type_name -> google.protobuf.Timestamp
	6,  // 14: cloud.lazycat.apis.common.Task.meta_info:type_name -> cloud.lazycat.apis.common.MetaInfo
	13, // 15: cloud.lazycat.apis.common.TaskQueueConfigReq.id:type_name -> cloud.lazycat.apis.common.TaskQueueID
	12, // 16: cloud.lazycat.apis.common.TaskQueueConfigReq.config:type_name -> cloud.lazycat.apis.common.TaskQueueConfig
	13, // 17: cloud.lazycat.apis.common.TaskQueue.id:type_name -> cloud.lazycat.apis.common.TaskQueueID
	1,  // 18: cloud.lazycat.apis.common.TaskQueue.status:type_name -> cloud.lazycat.apis.common.QueueStatus
	11, // 19: cloud.lazycat.apis.common.TaskQueue.tasks:type_name -> cloud.lazycat.apis.common.Task
	13, // 20: cloud.lazycat.apis.common.FileTaskQueueResp.id:type_name -> cloud.lazycat.apis.common.TaskQueueID
	1,  // 21: cloud.lazycat.apis.common.FileTaskQueueResp.status:type_name -> cloud.lazycat.apis.common.QueueStatus
	11, // 22: cloud.lazycat.apis.common.FileTaskQueueResp.tasks:type_name -> cloud.lazycat.apis.common.Task
	13, // 23: cloud.lazycat.apis.common.TaskQueueQueryReq.id:type_name -> cloud.lazycat.apis.common.TaskQueueID
	0,  // 24: cloud.lazycat.apis.common.TaskQueueQueryReq.status:type_name -> cloud.lazycat.apis.common.TaskStatus
	2,  // 25: cloud.lazycat.apis.common.TaskQueueQueryReq.order:type_name -> cloud.lazycat.apis.common.Order
	13, // 26: cloud.lazycat.apis.common.TaskQueueStatisticsReq.id:type_name -> cloud.lazycat.apis.common.TaskQueueID
	19, // 27: cloud.lazycat.apis.common.TaskQueueStatisticsResp.statistics:type_name -> cloud.lazycat.apis.common.TaskQueueStatistics
	9,  // 28: cloud.lazycat.apis.common.QueueMessageResp.id:type_name -> cloud.lazycat.apis.common.TaskID
	11, // 29: cloud.lazycat.apis.common.QueueMessageResp.task:type_name -> cloud.lazycat.apis.common.Task
	3,  // 30: cloud.lazycat.apis.common.QueueMessageResp.action:type_name -> cloud.lazycat.apis.common.MsgAction
	0,  // 31: cloud.lazycat.apis.common.QueueMessageResp.status:type_name -> cloud.lazycat.apis.common.TaskStatus
	13, // 32: cloud.lazycat.apis.common.TaskQueueListResp.ids:type_name -> cloud.lazycat.apis.common.TaskQueueID
	13, // 33: cloud.lazycat.apis.common.FileTransferService.CreateQueue:input_type -> cloud.lazycat.apis.common.TaskQueueID
	24, // 34: cloud.lazycat.apis.common.FileTransferService.ListQueue:input_type -> google.protobuf.Empty
	17, // 35: cloud.lazycat.apis.common.FileTransferService.QueryQueue:input_type -> cloud.lazycat.apis.common.TaskQueueQueryReq
	18, // 36: cloud.lazycat.apis.common.FileTransferService.QueryQueueStatistics:input_type -> cloud.lazycat.apis.common.TaskQueueStatisticsReq
	13, // 37: cloud.lazycat.apis.common.FileTransferService.QueryQueueStatistic:input_type -> cloud.lazycat.apis.common.TaskQueueID
	17, // 38: cloud.lazycat.apis.common.FileTransferService.ClearQueue:input_type -> cloud.lazycat.apis.common.TaskQueueQueryReq
	14, // 39: cloud.lazycat.apis.common.FileTransferService.ConfigQueue:input_type -> cloud.lazycat.apis.common.TaskQueueConfigReq
	13, // 40: cloud.lazycat.apis.common.FileTransferService.PauseQueue:input_type -> cloud.lazycat.apis.common.TaskQueueID
	13, // 41: cloud.lazycat.apis.common.FileTransferService.StartQuque:input_type -> cloud.lazycat.apis.common.TaskQueueID
	17, // 42: cloud.lazycat.apis.common.FileTransferService.QueryQueueMessage:input_type -> cloud.lazycat.apis.common.TaskQueueQueryReq
	7,  // 43: cloud.lazycat.apis.common.FileTransferService.CreateTask:input_type -> cloud.lazycat.apis.common.TaskCreateRequest
	8,  // 44: cloud.lazycat.apis.common.FileTransferService.CreateTasks:input_type -> cloud.lazycat.apis.common.TaskCreateRequests
	9,  // 45: cloud.lazycat.apis.common.FileTransferService.QueryTask:input_type -> cloud.lazycat.apis.common.TaskID
	9,  // 46: cloud.lazycat.apis.common.FileTransferService.ResumeTask:input_type -> cloud.lazycat.apis.common.TaskID
	9,  // 47: cloud.lazycat.apis.common.FileTransferService.PauseTask:input_type -> cloud.lazycat.apis.common.TaskID
	9,  // 48: cloud.lazycat.apis.common.FileTransferService.DeleteTask:input_type -> cloud.lazycat.apis.common.TaskID
	16, // 49: cloud.lazycat.apis.common.FileTransferService.CreateQueue:output_type -> cloud.lazycat.apis.common.FileTaskQueueResp
	22, // 50: cloud.lazycat.apis.common.FileTransferService.ListQueue:output_type -> cloud.lazycat.apis.common.TaskQueueListResp
	11, // 51: cloud.lazycat.apis.common.FileTransferService.QueryQueue:output_type -> cloud.lazycat.apis.common.Task
	20, // 52: cloud.lazycat.apis.common.FileTransferService.QueryQueueStatistics:output_type -> cloud.lazycat.apis.common.TaskQueueStatisticsResp
	19, // 53: cloud.lazycat.apis.common.FileTransferService.QueryQueueStatistic:output_type -> cloud.lazycat.apis.common.TaskQueueStatistics
	24, // 54: cloud.lazycat.apis.common.FileTransferService.ClearQueue:output_type -> google.protobuf.Empty
	24, // 55: cloud.lazycat.apis.common.FileTransferService.ConfigQueue:output_type -> google.protobuf.Empty
	24, // 56: cloud.lazycat.apis.common.FileTransferService.PauseQueue:output_type -> google.protobuf.Empty
	24, // 57: cloud.lazycat.apis.common.FileTransferService.StartQuque:output_type -> google.protobuf.Empty
	21, // 58: cloud.lazycat.apis.common.FileTransferService.QueryQueueMessage:output_type -> cloud.lazycat.apis.common.QueueMessageResp
	11, // 59: cloud.lazycat.apis.common.FileTransferService.CreateTask:output_type -> cloud.lazycat.apis.common.Task
	11, // 60: cloud.lazycat.apis.common.FileTransferService.CreateTasks:output_type -> cloud.lazycat.apis.common.Task
	11, // 61: cloud.lazycat.apis.common.FileTransferService.QueryTask:output_type -> cloud.lazycat.apis.common.Task
	24, // 62: cloud.lazycat.apis.common.FileTransferService.ResumeTask:output_type -> google.protobuf.Empty
	24, // 63: cloud.lazycat.apis.common.FileTransferService.PauseTask:output_type -> google.protobuf.Empty
	24, // 64: cloud.lazycat.apis.common.FileTransferService.DeleteTask:output_type -> google.protobuf.Empty
	49, // [49:65] is the sub-list for method output_type
	33, // [33:49] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_common_filetrans_proto_init() }
func file_common_filetrans_proto_init() {
	if File_common_filetrans_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_filetrans_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransmitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskQueueConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskQueueID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskQueueConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileTaskQueueResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskQueueQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskQueueStatisticsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskQueueStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskQueueStatisticsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueMessageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_filetrans_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskQueueListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_common_filetrans_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_common_filetrans_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_common_filetrans_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_common_filetrans_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_common_filetrans_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_filetrans_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_common_filetrans_proto_goTypes,
		DependencyIndexes: file_common_filetrans_proto_depIdxs,
		EnumInfos:         file_common_filetrans_proto_enumTypes,
		MessageInfos:      file_common_filetrans_proto_msgTypes,
	}.Build()
	File_common_filetrans_proto = out.File
	file_common_filetrans_proto_rawDesc = nil
	file_common_filetrans_proto_goTypes = nil
	file_common_filetrans_proto_depIdxs = nil
}
