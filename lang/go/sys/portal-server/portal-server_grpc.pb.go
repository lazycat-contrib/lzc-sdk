// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: sys/portal-server/portal-server.proto

package portal_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HPortalSys_QueryHServerInfo_FullMethodName        = "/cloud.lazycat.apis.sys.HPortalSys/QueryHServerInfo"
	HPortalSys_ListUsers_FullMethodName               = "/cloud.lazycat.apis.sys.HPortalSys/ListUsers"
	HPortalSys_CreateUser_FullMethodName              = "/cloud.lazycat.apis.sys.HPortalSys/CreateUser"
	HPortalSys_DeleteUser_FullMethodName              = "/cloud.lazycat.apis.sys.HPortalSys/DeleteUser"
	HPortalSys_ResetPassword_FullMethodName           = "/cloud.lazycat.apis.sys.HPortalSys/ResetPassword"
	HPortalSys_CheckPassword_FullMethodName           = "/cloud.lazycat.apis.sys.HPortalSys/CheckPassword"
	HPortalSys_QueryRole_FullMethodName               = "/cloud.lazycat.apis.sys.HPortalSys/QueryRole"
	HPortalSys_ChangeRole_FullMethodName              = "/cloud.lazycat.apis.sys.HPortalSys/ChangeRole"
	HPortalSys_ChangeTrustEndDevice_FullMethodName    = "/cloud.lazycat.apis.sys.HPortalSys/ChangeTrustEndDevice"
	HPortalSys_ListEndDevices_FullMethodName          = "/cloud.lazycat.apis.sys.HPortalSys/ListEndDevices"
	HPortalSys_RemoteSocks_FullMethodName             = "/cloud.lazycat.apis.sys.HPortalSys/RemoteSocks"
	HPortalSys_SetupHServer_FullMethodName            = "/cloud.lazycat.apis.sys.HPortalSys/SetupHServer"
	HPortalSys_ResetHServer_FullMethodName            = "/cloud.lazycat.apis.sys.HPortalSys/ResetHServer"
	HPortalSys_RegisterBoxService_FullMethodName      = "/cloud.lazycat.apis.sys.HPortalSys/RegisterBoxService"
	HPortalSys_EmitBoxServiceChanged_FullMethodName   = "/cloud.lazycat.apis.sys.HPortalSys/EmitBoxServiceChanged"
	HPortalSys_QueryBoxServicePeerCred_FullMethodName = "/cloud.lazycat.apis.sys.HPortalSys/QueryBoxServicePeerCred"
)

// HPortalSysClient is the client API for HPortalSys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HPortalSysClient interface {
	// 查询HServer当前状态
	QueryHServerInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HServerInfo, error)
	// 查询所有UID
	ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUsersReply, error)
	// 创建用户信息
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除用户信息
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 修改新的密码
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 校验用户密码是否正确
	CheckPassword(ctx context.Context, in *CheckPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 根据用户uid查询用户信息
	QueryRole(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*QueryRoleReply, error)
	// 修改指定uid的用户角色
	ChangeRole(ctx context.Context, in *ChangeRoleReqeust, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 添加或删除受信任设备
	ChangeTrustEndDevice(ctx context.Context, in *ChangeTrustEndDeviceRequest, opts ...grpc.CallOption) (*ChangeTrustEndDeviceReply, error)
	// 根据UID返回所有的设备列表
	ListEndDevices(ctx context.Context, in *ListEndDeviceRequest, opts ...grpc.CallOption) (*ListEndDeviceReply, error)
	// 获取remotesocks服务器地址
	RemoteSocks(ctx context.Context, in *RemoteSocksRequest, opts ...grpc.CallOption) (*RemoteSocksReply, error)
	// 仅在盒子未初始化时，可以被调用。
	SetupHServer(ctx context.Context, in *SetupHServerRequest, opts ...grpc.CallOption) (*SetupHServerReply, error)
	// 重置盒子
	// 1. 向Origin请求释放盒子名下的所有域名
	// 2. 清除本地的box.name
	// 3. 进入为初始化状态
	ResetHServer(ctx context.Context, in *ResetHServerRequest, opts ...grpc.CallOption) (*ResetHServerReply, error)
	// 注册盒子服务
	// 任何原因导致此调用结束时，都会使此服务注销。(比如hportal重启)  // 调用者需要自行重新注册
	RegisterBoxService(ctx context.Context, in *RegisterBoxServiceRequest, opts ...grpc.CallOption) (HPortalSys_RegisterBoxServiceClient, error)
	// 通知某个盒子服务发生变化
	EmitBoxServiceChanged(ctx context.Context, in *EmitBoxServiceChangedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 通过远端IP地址和服务注册的IP地址查询peer信息
	QueryBoxServicePeerCred(ctx context.Context, in *QueryBoxServicePeerCredRequest, opts ...grpc.CallOption) (*QueryBoxServicePeerCredResponse, error)
}

type hPortalSysClient struct {
	cc grpc.ClientConnInterface
}

func NewHPortalSysClient(cc grpc.ClientConnInterface) HPortalSysClient {
	return &hPortalSysClient{cc}
}

func (c *hPortalSysClient) QueryHServerInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HServerInfo, error) {
	out := new(HServerInfo)
	err := c.cc.Invoke(ctx, HPortalSys_QueryHServerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPortalSysClient) ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUsersReply, error) {
	out := new(ListUsersReply)
	err := c.cc.Invoke(ctx, HPortalSys_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPortalSysClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HPortalSys_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPortalSysClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HPortalSys_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPortalSysClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HPortalSys_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPortalSysClient) CheckPassword(ctx context.Context, in *CheckPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HPortalSys_CheckPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPortalSysClient) QueryRole(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*QueryRoleReply, error) {
	out := new(QueryRoleReply)
	err := c.cc.Invoke(ctx, HPortalSys_QueryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPortalSysClient) ChangeRole(ctx context.Context, in *ChangeRoleReqeust, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HPortalSys_ChangeRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPortalSysClient) ChangeTrustEndDevice(ctx context.Context, in *ChangeTrustEndDeviceRequest, opts ...grpc.CallOption) (*ChangeTrustEndDeviceReply, error) {
	out := new(ChangeTrustEndDeviceReply)
	err := c.cc.Invoke(ctx, HPortalSys_ChangeTrustEndDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPortalSysClient) ListEndDevices(ctx context.Context, in *ListEndDeviceRequest, opts ...grpc.CallOption) (*ListEndDeviceReply, error) {
	out := new(ListEndDeviceReply)
	err := c.cc.Invoke(ctx, HPortalSys_ListEndDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPortalSysClient) RemoteSocks(ctx context.Context, in *RemoteSocksRequest, opts ...grpc.CallOption) (*RemoteSocksReply, error) {
	out := new(RemoteSocksReply)
	err := c.cc.Invoke(ctx, HPortalSys_RemoteSocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPortalSysClient) SetupHServer(ctx context.Context, in *SetupHServerRequest, opts ...grpc.CallOption) (*SetupHServerReply, error) {
	out := new(SetupHServerReply)
	err := c.cc.Invoke(ctx, HPortalSys_SetupHServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPortalSysClient) ResetHServer(ctx context.Context, in *ResetHServerRequest, opts ...grpc.CallOption) (*ResetHServerReply, error) {
	out := new(ResetHServerReply)
	err := c.cc.Invoke(ctx, HPortalSys_ResetHServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPortalSysClient) RegisterBoxService(ctx context.Context, in *RegisterBoxServiceRequest, opts ...grpc.CallOption) (HPortalSys_RegisterBoxServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &HPortalSys_ServiceDesc.Streams[0], HPortalSys_RegisterBoxService_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &hPortalSysRegisterBoxServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HPortalSys_RegisterBoxServiceClient interface {
	Recv() (*RegisterBoxServiceReply, error)
	grpc.ClientStream
}

type hPortalSysRegisterBoxServiceClient struct {
	grpc.ClientStream
}

func (x *hPortalSysRegisterBoxServiceClient) Recv() (*RegisterBoxServiceReply, error) {
	m := new(RegisterBoxServiceReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hPortalSysClient) EmitBoxServiceChanged(ctx context.Context, in *EmitBoxServiceChangedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HPortalSys_EmitBoxServiceChanged_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPortalSysClient) QueryBoxServicePeerCred(ctx context.Context, in *QueryBoxServicePeerCredRequest, opts ...grpc.CallOption) (*QueryBoxServicePeerCredResponse, error) {
	out := new(QueryBoxServicePeerCredResponse)
	err := c.cc.Invoke(ctx, HPortalSys_QueryBoxServicePeerCred_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HPortalSysServer is the server API for HPortalSys service.
// All implementations must embed UnimplementedHPortalSysServer
// for forward compatibility
type HPortalSysServer interface {
	// 查询HServer当前状态
	QueryHServerInfo(context.Context, *emptypb.Empty) (*HServerInfo, error)
	// 查询所有UID
	ListUsers(context.Context, *emptypb.Empty) (*ListUsersReply, error)
	// 创建用户信息
	CreateUser(context.Context, *CreateUserRequest) (*emptypb.Empty, error)
	// 删除用户信息
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	// 修改新的密码
	ResetPassword(context.Context, *ResetPasswordRequest) (*emptypb.Empty, error)
	// 校验用户密码是否正确
	CheckPassword(context.Context, *CheckPasswordRequest) (*emptypb.Empty, error)
	// 根据用户uid查询用户信息
	QueryRole(context.Context, *UserID) (*QueryRoleReply, error)
	// 修改指定uid的用户角色
	ChangeRole(context.Context, *ChangeRoleReqeust) (*emptypb.Empty, error)
	// 添加或删除受信任设备
	ChangeTrustEndDevice(context.Context, *ChangeTrustEndDeviceRequest) (*ChangeTrustEndDeviceReply, error)
	// 根据UID返回所有的设备列表
	ListEndDevices(context.Context, *ListEndDeviceRequest) (*ListEndDeviceReply, error)
	// 获取remotesocks服务器地址
	RemoteSocks(context.Context, *RemoteSocksRequest) (*RemoteSocksReply, error)
	// 仅在盒子未初始化时，可以被调用。
	SetupHServer(context.Context, *SetupHServerRequest) (*SetupHServerReply, error)
	// 重置盒子
	// 1. 向Origin请求释放盒子名下的所有域名
	// 2. 清除本地的box.name
	// 3. 进入为初始化状态
	ResetHServer(context.Context, *ResetHServerRequest) (*ResetHServerReply, error)
	// 注册盒子服务
	// 任何原因导致此调用结束时，都会使此服务注销。(比如hportal重启)  // 调用者需要自行重新注册
	RegisterBoxService(*RegisterBoxServiceRequest, HPortalSys_RegisterBoxServiceServer) error
	// 通知某个盒子服务发生变化
	EmitBoxServiceChanged(context.Context, *EmitBoxServiceChangedRequest) (*emptypb.Empty, error)
	// 通过远端IP地址和服务注册的IP地址查询peer信息
	QueryBoxServicePeerCred(context.Context, *QueryBoxServicePeerCredRequest) (*QueryBoxServicePeerCredResponse, error)
	mustEmbedUnimplementedHPortalSysServer()
}

// UnimplementedHPortalSysServer must be embedded to have forward compatible implementations.
type UnimplementedHPortalSysServer struct {
}

func (UnimplementedHPortalSysServer) QueryHServerInfo(context.Context, *emptypb.Empty) (*HServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHServerInfo not implemented")
}
func (UnimplementedHPortalSysServer) ListUsers(context.Context, *emptypb.Empty) (*ListUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedHPortalSysServer) CreateUser(context.Context, *CreateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedHPortalSysServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedHPortalSysServer) ResetPassword(context.Context, *ResetPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedHPortalSysServer) CheckPassword(context.Context, *CheckPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPassword not implemented")
}
func (UnimplementedHPortalSysServer) QueryRole(context.Context, *UserID) (*QueryRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRole not implemented")
}
func (UnimplementedHPortalSysServer) ChangeRole(context.Context, *ChangeRoleReqeust) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRole not implemented")
}
func (UnimplementedHPortalSysServer) ChangeTrustEndDevice(context.Context, *ChangeTrustEndDeviceRequest) (*ChangeTrustEndDeviceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTrustEndDevice not implemented")
}
func (UnimplementedHPortalSysServer) ListEndDevices(context.Context, *ListEndDeviceRequest) (*ListEndDeviceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEndDevices not implemented")
}
func (UnimplementedHPortalSysServer) RemoteSocks(context.Context, *RemoteSocksRequest) (*RemoteSocksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteSocks not implemented")
}
func (UnimplementedHPortalSysServer) SetupHServer(context.Context, *SetupHServerRequest) (*SetupHServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupHServer not implemented")
}
func (UnimplementedHPortalSysServer) ResetHServer(context.Context, *ResetHServerRequest) (*ResetHServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetHServer not implemented")
}
func (UnimplementedHPortalSysServer) RegisterBoxService(*RegisterBoxServiceRequest, HPortalSys_RegisterBoxServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterBoxService not implemented")
}
func (UnimplementedHPortalSysServer) EmitBoxServiceChanged(context.Context, *EmitBoxServiceChangedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitBoxServiceChanged not implemented")
}
func (UnimplementedHPortalSysServer) QueryBoxServicePeerCred(context.Context, *QueryBoxServicePeerCredRequest) (*QueryBoxServicePeerCredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBoxServicePeerCred not implemented")
}
func (UnimplementedHPortalSysServer) mustEmbedUnimplementedHPortalSysServer() {}

// UnsafeHPortalSysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HPortalSysServer will
// result in compilation errors.
type UnsafeHPortalSysServer interface {
	mustEmbedUnimplementedHPortalSysServer()
}

func RegisterHPortalSysServer(s grpc.ServiceRegistrar, srv HPortalSysServer) {
	s.RegisterService(&HPortalSys_ServiceDesc, srv)
}

func _HPortalSys_QueryHServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPortalSysServer).QueryHServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPortalSys_QueryHServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPortalSysServer).QueryHServerInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPortalSys_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPortalSysServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPortalSys_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPortalSysServer).ListUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPortalSys_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPortalSysServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPortalSys_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPortalSysServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPortalSys_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPortalSysServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPortalSys_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPortalSysServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPortalSys_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPortalSysServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPortalSys_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPortalSysServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPortalSys_CheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPortalSysServer).CheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPortalSys_CheckPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPortalSysServer).CheckPassword(ctx, req.(*CheckPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPortalSys_QueryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPortalSysServer).QueryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPortalSys_QueryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPortalSysServer).QueryRole(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPortalSys_ChangeRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRoleReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPortalSysServer).ChangeRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPortalSys_ChangeRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPortalSysServer).ChangeRole(ctx, req.(*ChangeRoleReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPortalSys_ChangeTrustEndDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTrustEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPortalSysServer).ChangeTrustEndDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPortalSys_ChangeTrustEndDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPortalSysServer).ChangeTrustEndDevice(ctx, req.(*ChangeTrustEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPortalSys_ListEndDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPortalSysServer).ListEndDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPortalSys_ListEndDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPortalSysServer).ListEndDevices(ctx, req.(*ListEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPortalSys_RemoteSocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteSocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPortalSysServer).RemoteSocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPortalSys_RemoteSocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPortalSysServer).RemoteSocks(ctx, req.(*RemoteSocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPortalSys_SetupHServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupHServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPortalSysServer).SetupHServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPortalSys_SetupHServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPortalSysServer).SetupHServer(ctx, req.(*SetupHServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPortalSys_ResetHServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetHServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPortalSysServer).ResetHServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPortalSys_ResetHServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPortalSysServer).ResetHServer(ctx, req.(*ResetHServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPortalSys_RegisterBoxService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterBoxServiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HPortalSysServer).RegisterBoxService(m, &hPortalSysRegisterBoxServiceServer{stream})
}

type HPortalSys_RegisterBoxServiceServer interface {
	Send(*RegisterBoxServiceReply) error
	grpc.ServerStream
}

type hPortalSysRegisterBoxServiceServer struct {
	grpc.ServerStream
}

func (x *hPortalSysRegisterBoxServiceServer) Send(m *RegisterBoxServiceReply) error {
	return x.ServerStream.SendMsg(m)
}

func _HPortalSys_EmitBoxServiceChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmitBoxServiceChangedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPortalSysServer).EmitBoxServiceChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPortalSys_EmitBoxServiceChanged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPortalSysServer).EmitBoxServiceChanged(ctx, req.(*EmitBoxServiceChangedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPortalSys_QueryBoxServicePeerCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBoxServicePeerCredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPortalSysServer).QueryBoxServicePeerCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPortalSys_QueryBoxServicePeerCred_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPortalSysServer).QueryBoxServicePeerCred(ctx, req.(*QueryBoxServicePeerCredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HPortalSys_ServiceDesc is the grpc.ServiceDesc for HPortalSys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HPortalSys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.HPortalSys",
	HandlerType: (*HPortalSysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryHServerInfo",
			Handler:    _HPortalSys_QueryHServerInfo_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _HPortalSys_ListUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _HPortalSys_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _HPortalSys_DeleteUser_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _HPortalSys_ResetPassword_Handler,
		},
		{
			MethodName: "CheckPassword",
			Handler:    _HPortalSys_CheckPassword_Handler,
		},
		{
			MethodName: "QueryRole",
			Handler:    _HPortalSys_QueryRole_Handler,
		},
		{
			MethodName: "ChangeRole",
			Handler:    _HPortalSys_ChangeRole_Handler,
		},
		{
			MethodName: "ChangeTrustEndDevice",
			Handler:    _HPortalSys_ChangeTrustEndDevice_Handler,
		},
		{
			MethodName: "ListEndDevices",
			Handler:    _HPortalSys_ListEndDevices_Handler,
		},
		{
			MethodName: "RemoteSocks",
			Handler:    _HPortalSys_RemoteSocks_Handler,
		},
		{
			MethodName: "SetupHServer",
			Handler:    _HPortalSys_SetupHServer_Handler,
		},
		{
			MethodName: "ResetHServer",
			Handler:    _HPortalSys_ResetHServer_Handler,
		},
		{
			MethodName: "EmitBoxServiceChanged",
			Handler:    _HPortalSys_EmitBoxServiceChanged_Handler,
		},
		{
			MethodName: "QueryBoxServicePeerCred",
			Handler:    _HPortalSys_QueryBoxServicePeerCred_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterBoxService",
			Handler:       _HPortalSys_RegisterBoxService_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sys/portal-server/portal-server.proto",
}
