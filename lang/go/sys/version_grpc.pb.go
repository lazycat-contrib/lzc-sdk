// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: sys/version.proto

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VersionInfoService_Get_FullMethodName = "/cloud.lazycat.apis.sys.VersionInfoService/Get"
)

// VersionInfoServiceClient is the client API for VersionInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VersionInfoServiceClient interface {
	Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionInfo, error)
}

type versionInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVersionInfoServiceClient(cc grpc.ClientConnInterface) VersionInfoServiceClient {
	return &versionInfoServiceClient{cc}
}

func (c *versionInfoServiceClient) Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionInfo, error) {
	out := new(VersionInfo)
	err := c.cc.Invoke(ctx, VersionInfoService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionInfoServiceServer is the server API for VersionInfoService service.
// All implementations must embed UnimplementedVersionInfoServiceServer
// for forward compatibility
type VersionInfoServiceServer interface {
	Get(context.Context, *emptypb.Empty) (*VersionInfo, error)
	mustEmbedUnimplementedVersionInfoServiceServer()
}

// UnimplementedVersionInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVersionInfoServiceServer struct {
}

func (UnimplementedVersionInfoServiceServer) Get(context.Context, *emptypb.Empty) (*VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVersionInfoServiceServer) mustEmbedUnimplementedVersionInfoServiceServer() {}

// UnsafeVersionInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VersionInfoServiceServer will
// result in compilation errors.
type UnsafeVersionInfoServiceServer interface {
	mustEmbedUnimplementedVersionInfoServiceServer()
}

func RegisterVersionInfoServiceServer(s grpc.ServiceRegistrar, srv VersionInfoServiceServer) {
	s.RegisterService(&VersionInfoService_ServiceDesc, srv)
}

func _VersionInfoService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionInfoServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VersionInfoService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionInfoServiceServer).Get(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// VersionInfoService_ServiceDesc is the grpc.ServiceDesc for VersionInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VersionInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.VersionInfoService",
	HandlerType: (*VersionInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _VersionInfoService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys/version.proto",
}
