// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: sys/ingress.proto

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccessControlerService_SetAppAccessPolicy_FullMethodName   = "/cloud.lazycat.apis.sys.AccessControlerService/SetAppAccessPolicy"
	AccessControlerService_QueryAppAccessPolicy_FullMethodName = "/cloud.lazycat.apis.sys.AccessControlerService/QueryAppAccessPolicy"
	AccessControlerService_GetAppLastAccessTime_FullMethodName = "/cloud.lazycat.apis.sys.AccessControlerService/GetAppLastAccessTime"
)

// AccessControlerServiceClient is the client API for AccessControlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessControlerServiceClient interface {
	SetAppAccessPolicy(ctx context.Context, in *AppAccessPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QueryAppAccessPolicy(ctx context.Context, in *AppAccessPolicyRequest, opts ...grpc.CallOption) (*AppAccessPolicy, error)
	GetAppLastAccessTime(ctx context.Context, in *IngressAppLastAccessTimeRequest, opts ...grpc.CallOption) (*IngressAppLastAccessTimeResponse, error)
}

type accessControlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessControlerServiceClient(cc grpc.ClientConnInterface) AccessControlerServiceClient {
	return &accessControlerServiceClient{cc}
}

func (c *accessControlerServiceClient) SetAppAccessPolicy(ctx context.Context, in *AppAccessPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessControlerService_SetAppAccessPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlerServiceClient) QueryAppAccessPolicy(ctx context.Context, in *AppAccessPolicyRequest, opts ...grpc.CallOption) (*AppAccessPolicy, error) {
	out := new(AppAccessPolicy)
	err := c.cc.Invoke(ctx, AccessControlerService_QueryAppAccessPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlerServiceClient) GetAppLastAccessTime(ctx context.Context, in *IngressAppLastAccessTimeRequest, opts ...grpc.CallOption) (*IngressAppLastAccessTimeResponse, error) {
	out := new(IngressAppLastAccessTimeResponse)
	err := c.cc.Invoke(ctx, AccessControlerService_GetAppLastAccessTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessControlerServiceServer is the server API for AccessControlerService service.
// All implementations must embed UnimplementedAccessControlerServiceServer
// for forward compatibility
type AccessControlerServiceServer interface {
	SetAppAccessPolicy(context.Context, *AppAccessPolicyRequest) (*emptypb.Empty, error)
	QueryAppAccessPolicy(context.Context, *AppAccessPolicyRequest) (*AppAccessPolicy, error)
	GetAppLastAccessTime(context.Context, *IngressAppLastAccessTimeRequest) (*IngressAppLastAccessTimeResponse, error)
	mustEmbedUnimplementedAccessControlerServiceServer()
}

// UnimplementedAccessControlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccessControlerServiceServer struct {
}

func (UnimplementedAccessControlerServiceServer) SetAppAccessPolicy(context.Context, *AppAccessPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAppAccessPolicy not implemented")
}
func (UnimplementedAccessControlerServiceServer) QueryAppAccessPolicy(context.Context, *AppAccessPolicyRequest) (*AppAccessPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAppAccessPolicy not implemented")
}
func (UnimplementedAccessControlerServiceServer) GetAppLastAccessTime(context.Context, *IngressAppLastAccessTimeRequest) (*IngressAppLastAccessTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppLastAccessTime not implemented")
}
func (UnimplementedAccessControlerServiceServer) mustEmbedUnimplementedAccessControlerServiceServer() {
}

// UnsafeAccessControlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessControlerServiceServer will
// result in compilation errors.
type UnsafeAccessControlerServiceServer interface {
	mustEmbedUnimplementedAccessControlerServiceServer()
}

func RegisterAccessControlerServiceServer(s grpc.ServiceRegistrar, srv AccessControlerServiceServer) {
	s.RegisterService(&AccessControlerService_ServiceDesc, srv)
}

func _AccessControlerService_SetAppAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlerServiceServer).SetAppAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessControlerService_SetAppAccessPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlerServiceServer).SetAppAccessPolicy(ctx, req.(*AppAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControlerService_QueryAppAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlerServiceServer).QueryAppAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessControlerService_QueryAppAccessPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlerServiceServer).QueryAppAccessPolicy(ctx, req.(*AppAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControlerService_GetAppLastAccessTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressAppLastAccessTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlerServiceServer).GetAppLastAccessTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessControlerService_GetAppLastAccessTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlerServiceServer).GetAppLastAccessTime(ctx, req.(*IngressAppLastAccessTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessControlerService_ServiceDesc is the grpc.ServiceDesc for AccessControlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessControlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.AccessControlerService",
	HandlerType: (*AccessControlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAppAccessPolicy",
			Handler:    _AccessControlerService_SetAppAccessPolicy_Handler,
		},
		{
			MethodName: "QueryAppAccessPolicy",
			Handler:    _AccessControlerService_QueryAppAccessPolicy_Handler,
		},
		{
			MethodName: "GetAppLastAccessTime",
			Handler:    _AccessControlerService_GetAppLastAccessTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys/ingress.proto",
}

const (
	UserSessionService_SubscribeEvent_FullMethodName = "/cloud.lazycat.apis.sys.UserSessionService/SubscribeEvent"
)

// UserSessionServiceClient is the client API for UserSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSessionServiceClient interface {
	// 订阅用户登录登出事件
	SubscribeEvent(ctx context.Context, in *SubscribeEventRequest, opts ...grpc.CallOption) (UserSessionService_SubscribeEventClient, error)
}

type userSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSessionServiceClient(cc grpc.ClientConnInterface) UserSessionServiceClient {
	return &userSessionServiceClient{cc}
}

func (c *userSessionServiceClient) SubscribeEvent(ctx context.Context, in *SubscribeEventRequest, opts ...grpc.CallOption) (UserSessionService_SubscribeEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserSessionService_ServiceDesc.Streams[0], UserSessionService_SubscribeEvent_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userSessionServiceSubscribeEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserSessionService_SubscribeEventClient interface {
	Recv() (*SubscribeEventResponse, error)
	grpc.ClientStream
}

type userSessionServiceSubscribeEventClient struct {
	grpc.ClientStream
}

func (x *userSessionServiceSubscribeEventClient) Recv() (*SubscribeEventResponse, error) {
	m := new(SubscribeEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserSessionServiceServer is the server API for UserSessionService service.
// All implementations must embed UnimplementedUserSessionServiceServer
// for forward compatibility
type UserSessionServiceServer interface {
	// 订阅用户登录登出事件
	SubscribeEvent(*SubscribeEventRequest, UserSessionService_SubscribeEventServer) error
	mustEmbedUnimplementedUserSessionServiceServer()
}

// UnimplementedUserSessionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserSessionServiceServer struct {
}

func (UnimplementedUserSessionServiceServer) SubscribeEvent(*SubscribeEventRequest, UserSessionService_SubscribeEventServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeEvent not implemented")
}
func (UnimplementedUserSessionServiceServer) mustEmbedUnimplementedUserSessionServiceServer() {}

// UnsafeUserSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSessionServiceServer will
// result in compilation errors.
type UnsafeUserSessionServiceServer interface {
	mustEmbedUnimplementedUserSessionServiceServer()
}

func RegisterUserSessionServiceServer(s grpc.ServiceRegistrar, srv UserSessionServiceServer) {
	s.RegisterService(&UserSessionService_ServiceDesc, srv)
}

func _UserSessionService_SubscribeEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserSessionServiceServer).SubscribeEvent(m, &userSessionServiceSubscribeEventServer{stream})
}

type UserSessionService_SubscribeEventServer interface {
	Send(*SubscribeEventResponse) error
	grpc.ServerStream
}

type userSessionServiceSubscribeEventServer struct {
	grpc.ServerStream
}

func (x *userSessionServiceSubscribeEventServer) Send(m *SubscribeEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

// UserSessionService_ServiceDesc is the grpc.ServiceDesc for UserSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.UserSessionService",
	HandlerType: (*UserSessionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeEvent",
			Handler:       _UserSessionService_SubscribeEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sys/ingress.proto",
}
