// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: sys/btled.proto

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ButtonLedSessionService_Connect_FullMethodName = "/cloud.lazycat.apis.sys.ButtonLedSessionService/Connect"
)

// ButtonLedSessionServiceClient is the client API for ButtonLedSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ButtonLedSessionServiceClient interface {
	// 抢占一个按钮 LED 事务。
	//
	//	连接失败说明事务已经其它组件占用并且不可抢占
	//	如果连接成功后来被异常断开，大概率说明事务被其它组件抢占（所以如果有必要，需要设置 Preemptable = false 来实现该事务不可抢占）
	Connect(ctx context.Context, opts ...grpc.CallOption) (ButtonLedSessionService_ConnectClient, error)
}

type buttonLedSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewButtonLedSessionServiceClient(cc grpc.ClientConnInterface) ButtonLedSessionServiceClient {
	return &buttonLedSessionServiceClient{cc}
}

func (c *buttonLedSessionServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (ButtonLedSessionService_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ButtonLedSessionService_ServiceDesc.Streams[0], ButtonLedSessionService_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &buttonLedSessionServiceConnectClient{stream}
	return x, nil
}

type ButtonLedSessionService_ConnectClient interface {
	Send(*LedStream) error
	Recv() (*ButtonStream, error)
	grpc.ClientStream
}

type buttonLedSessionServiceConnectClient struct {
	grpc.ClientStream
}

func (x *buttonLedSessionServiceConnectClient) Send(m *LedStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *buttonLedSessionServiceConnectClient) Recv() (*ButtonStream, error) {
	m := new(ButtonStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ButtonLedSessionServiceServer is the server API for ButtonLedSessionService service.
// All implementations must embed UnimplementedButtonLedSessionServiceServer
// for forward compatibility
type ButtonLedSessionServiceServer interface {
	// 抢占一个按钮 LED 事务。
	//
	//	连接失败说明事务已经其它组件占用并且不可抢占
	//	如果连接成功后来被异常断开，大概率说明事务被其它组件抢占（所以如果有必要，需要设置 Preemptable = false 来实现该事务不可抢占）
	Connect(ButtonLedSessionService_ConnectServer) error
	mustEmbedUnimplementedButtonLedSessionServiceServer()
}

// UnimplementedButtonLedSessionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedButtonLedSessionServiceServer struct {
}

func (UnimplementedButtonLedSessionServiceServer) Connect(ButtonLedSessionService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedButtonLedSessionServiceServer) mustEmbedUnimplementedButtonLedSessionServiceServer() {
}

// UnsafeButtonLedSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ButtonLedSessionServiceServer will
// result in compilation errors.
type UnsafeButtonLedSessionServiceServer interface {
	mustEmbedUnimplementedButtonLedSessionServiceServer()
}

func RegisterButtonLedSessionServiceServer(s grpc.ServiceRegistrar, srv ButtonLedSessionServiceServer) {
	s.RegisterService(&ButtonLedSessionService_ServiceDesc, srv)
}

func _ButtonLedSessionService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ButtonLedSessionServiceServer).Connect(&buttonLedSessionServiceConnectServer{stream})
}

type ButtonLedSessionService_ConnectServer interface {
	Send(*ButtonStream) error
	Recv() (*LedStream, error)
	grpc.ServerStream
}

type buttonLedSessionServiceConnectServer struct {
	grpc.ServerStream
}

func (x *buttonLedSessionServiceConnectServer) Send(m *ButtonStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *buttonLedSessionServiceConnectServer) Recv() (*LedStream, error) {
	m := new(LedStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ButtonLedSessionService_ServiceDesc is the grpc.ServiceDesc for ButtonLedSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ButtonLedSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.ButtonLedSessionService",
	HandlerType: (*ButtonLedSessionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _ButtonLedSessionService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sys/btled.proto",
}
