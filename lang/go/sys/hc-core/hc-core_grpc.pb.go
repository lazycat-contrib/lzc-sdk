// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: sys/hc-core/hc-core.proto

package hc_core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoreSystemClient is the client API for CoreSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreSystemClient interface {
	// List 列出所有已安装的应用
	List(ctx context.Context, in *ListOptRequest, opts ...grpc.CallOption) (*AppIdList, error)
	// Apply 安装或更新一个 app
	Apply(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Remove 移除一个 app
	Remove(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Disable 禁用一个 app
	Disable(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Enable 启用一个 app
	Enable(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Query 查询 app 的元信息
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*AppMetadataArray, error)
	// 查询所有 app 的所有实例状态
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AppsStatus, error)
	// 查询 app 的所有实例状态
	AppStatus(ctx context.Context, in *AppId, opts ...grpc.CallOption) (*InstancesStatus, error)
	// 查询实例状态
	InstanceStatus(ctx context.Context, in *InstanceInfo, opts ...grpc.CallOption) (*StatusInfo, error)
	// 添加一个实例
	InstanceAdd(ctx context.Context, in *InstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除一个实例
	InstanceRemove(ctx context.Context, in *InstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 暂停一个实例
	InstancePause(ctx context.Context, in *InstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 继续一个实例
	InstanceResume(ctx context.Context, in *InstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type coreSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreSystemClient(cc grpc.ClientConnInterface) CoreSystemClient {
	return &coreSystemClient{cc}
}

func (c *coreSystemClient) List(ctx context.Context, in *ListOptRequest, opts ...grpc.CallOption) (*AppIdList, error) {
	out := new(AppIdList)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.CoreSystem/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreSystemClient) Apply(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.CoreSystem/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreSystemClient) Remove(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.CoreSystem/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreSystemClient) Disable(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.CoreSystem/Disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreSystemClient) Enable(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.CoreSystem/Enable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreSystemClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*AppMetadataArray, error) {
	out := new(AppMetadataArray)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.CoreSystem/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreSystemClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AppsStatus, error) {
	out := new(AppsStatus)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.CoreSystem/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreSystemClient) AppStatus(ctx context.Context, in *AppId, opts ...grpc.CallOption) (*InstancesStatus, error) {
	out := new(InstancesStatus)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.CoreSystem/AppStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreSystemClient) InstanceStatus(ctx context.Context, in *InstanceInfo, opts ...grpc.CallOption) (*StatusInfo, error) {
	out := new(StatusInfo)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.CoreSystem/InstanceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreSystemClient) InstanceAdd(ctx context.Context, in *InstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.CoreSystem/InstanceAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreSystemClient) InstanceRemove(ctx context.Context, in *InstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.CoreSystem/InstanceRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreSystemClient) InstancePause(ctx context.Context, in *InstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.CoreSystem/InstancePause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreSystemClient) InstanceResume(ctx context.Context, in *InstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.CoreSystem/InstanceResume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreSystemServer is the server API for CoreSystem service.
// All implementations must embed UnimplementedCoreSystemServer
// for forward compatibility
type CoreSystemServer interface {
	// List 列出所有已安装的应用
	List(context.Context, *ListOptRequest) (*AppIdList, error)
	// Apply 安装或更新一个 app
	Apply(context.Context, *RawData) (*emptypb.Empty, error)
	// Remove 移除一个 app
	Remove(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	// Disable 禁用一个 app
	Disable(context.Context, *QueryRequest) (*emptypb.Empty, error)
	// Enable 启用一个 app
	Enable(context.Context, *QueryRequest) (*emptypb.Empty, error)
	// Query 查询 app 的元信息
	Query(context.Context, *QueryRequest) (*AppMetadataArray, error)
	// 查询所有 app 的所有实例状态
	Status(context.Context, *emptypb.Empty) (*AppsStatus, error)
	// 查询 app 的所有实例状态
	AppStatus(context.Context, *AppId) (*InstancesStatus, error)
	// 查询实例状态
	InstanceStatus(context.Context, *InstanceInfo) (*StatusInfo, error)
	// 添加一个实例
	InstanceAdd(context.Context, *InstanceInfo) (*emptypb.Empty, error)
	// 删除一个实例
	InstanceRemove(context.Context, *InstanceInfo) (*emptypb.Empty, error)
	// 暂停一个实例
	InstancePause(context.Context, *InstanceInfo) (*emptypb.Empty, error)
	// 继续一个实例
	InstanceResume(context.Context, *InstanceInfo) (*emptypb.Empty, error)
	mustEmbedUnimplementedCoreSystemServer()
}

// UnimplementedCoreSystemServer must be embedded to have forward compatible implementations.
type UnimplementedCoreSystemServer struct {
}

func (UnimplementedCoreSystemServer) List(context.Context, *ListOptRequest) (*AppIdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCoreSystemServer) Apply(context.Context, *RawData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedCoreSystemServer) Remove(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedCoreSystemServer) Disable(context.Context, *QueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedCoreSystemServer) Enable(context.Context, *QueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedCoreSystemServer) Query(context.Context, *QueryRequest) (*AppMetadataArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedCoreSystemServer) Status(context.Context, *emptypb.Empty) (*AppsStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedCoreSystemServer) AppStatus(context.Context, *AppId) (*InstancesStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppStatus not implemented")
}
func (UnimplementedCoreSystemServer) InstanceStatus(context.Context, *InstanceInfo) (*StatusInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceStatus not implemented")
}
func (UnimplementedCoreSystemServer) InstanceAdd(context.Context, *InstanceInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceAdd not implemented")
}
func (UnimplementedCoreSystemServer) InstanceRemove(context.Context, *InstanceInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceRemove not implemented")
}
func (UnimplementedCoreSystemServer) InstancePause(context.Context, *InstanceInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstancePause not implemented")
}
func (UnimplementedCoreSystemServer) InstanceResume(context.Context, *InstanceInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceResume not implemented")
}
func (UnimplementedCoreSystemServer) mustEmbedUnimplementedCoreSystemServer() {}

// UnsafeCoreSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreSystemServer will
// result in compilation errors.
type UnsafeCoreSystemServer interface {
	mustEmbedUnimplementedCoreSystemServer()
}

func RegisterCoreSystemServer(s grpc.ServiceRegistrar, srv CoreSystemServer) {
	s.RegisterService(&CoreSystem_ServiceDesc, srv)
}

func _CoreSystem_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreSystemServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.CoreSystem/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreSystemServer).List(ctx, req.(*ListOptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreSystem_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreSystemServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.CoreSystem/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreSystemServer).Apply(ctx, req.(*RawData))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreSystem_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreSystemServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.CoreSystem/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreSystemServer).Remove(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreSystem_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreSystemServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.CoreSystem/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreSystemServer).Disable(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreSystem_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreSystemServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.CoreSystem/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreSystemServer).Enable(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreSystem_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreSystemServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.CoreSystem/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreSystemServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreSystem_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreSystemServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.CoreSystem/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreSystemServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreSystem_AppStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreSystemServer).AppStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.CoreSystem/AppStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreSystemServer).AppStatus(ctx, req.(*AppId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreSystem_InstanceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreSystemServer).InstanceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.CoreSystem/InstanceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreSystemServer).InstanceStatus(ctx, req.(*InstanceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreSystem_InstanceAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreSystemServer).InstanceAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.CoreSystem/InstanceAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreSystemServer).InstanceAdd(ctx, req.(*InstanceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreSystem_InstanceRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreSystemServer).InstanceRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.CoreSystem/InstanceRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreSystemServer).InstanceRemove(ctx, req.(*InstanceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreSystem_InstancePause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreSystemServer).InstancePause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.CoreSystem/InstancePause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreSystemServer).InstancePause(ctx, req.(*InstanceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreSystem_InstanceResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreSystemServer).InstanceResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.CoreSystem/InstanceResume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreSystemServer).InstanceResume(ctx, req.(*InstanceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreSystem_ServiceDesc is the grpc.ServiceDesc for CoreSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.CoreSystem",
	HandlerType: (*CoreSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CoreSystem_List_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _CoreSystem_Apply_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _CoreSystem_Remove_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _CoreSystem_Disable_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _CoreSystem_Enable_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _CoreSystem_Query_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _CoreSystem_Status_Handler,
		},
		{
			MethodName: "AppStatus",
			Handler:    _CoreSystem_AppStatus_Handler,
		},
		{
			MethodName: "InstanceStatus",
			Handler:    _CoreSystem_InstanceStatus_Handler,
		},
		{
			MethodName: "InstanceAdd",
			Handler:    _CoreSystem_InstanceAdd_Handler,
		},
		{
			MethodName: "InstanceRemove",
			Handler:    _CoreSystem_InstanceRemove_Handler,
		},
		{
			MethodName: "InstancePause",
			Handler:    _CoreSystem_InstancePause_Handler,
		},
		{
			MethodName: "InstanceResume",
			Handler:    _CoreSystem_InstanceResume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys/hc-core/hc-core.proto",
}
