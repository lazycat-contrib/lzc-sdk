// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: sys/osupgrader.proto

// ServiceName cloud.lazycat.base.daemon

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OSUpgraderService_Download_FullMethodName      = "/cloud.lazycat.apis.sys.OSUpgraderService/Download"
	OSUpgraderService_PauseDownload_FullMethodName = "/cloud.lazycat.apis.sys.OSUpgraderService/PauseDownload"
	OSUpgraderService_Install_FullMethodName       = "/cloud.lazycat.apis.sys.OSUpgraderService/Install"
	OSUpgraderService_GetInfo_FullMethodName       = "/cloud.lazycat.apis.sys.OSUpgraderService/GetInfo"
)

// OSUpgraderServiceClient is the client API for OSUpgraderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OSUpgraderServiceClient interface {
	Download(ctx context.Context, in *OSUpgraderDownloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PauseDownload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Install(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OSUpgraderInfo, error)
}

type oSUpgraderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOSUpgraderServiceClient(cc grpc.ClientConnInterface) OSUpgraderServiceClient {
	return &oSUpgraderServiceClient{cc}
}

func (c *oSUpgraderServiceClient) Download(ctx context.Context, in *OSUpgraderDownloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OSUpgraderService_Download_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSUpgraderServiceClient) PauseDownload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OSUpgraderService_PauseDownload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSUpgraderServiceClient) Install(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OSUpgraderService_Install_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSUpgraderServiceClient) GetInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OSUpgraderInfo, error) {
	out := new(OSUpgraderInfo)
	err := c.cc.Invoke(ctx, OSUpgraderService_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSUpgraderServiceServer is the server API for OSUpgraderService service.
// All implementations must embed UnimplementedOSUpgraderServiceServer
// for forward compatibility
type OSUpgraderServiceServer interface {
	Download(context.Context, *OSUpgraderDownloadRequest) (*emptypb.Empty, error)
	PauseDownload(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Install(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetInfo(context.Context, *emptypb.Empty) (*OSUpgraderInfo, error)
	mustEmbedUnimplementedOSUpgraderServiceServer()
}

// UnimplementedOSUpgraderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOSUpgraderServiceServer struct {
}

func (UnimplementedOSUpgraderServiceServer) Download(context.Context, *OSUpgraderDownloadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedOSUpgraderServiceServer) PauseDownload(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseDownload not implemented")
}
func (UnimplementedOSUpgraderServiceServer) Install(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedOSUpgraderServiceServer) GetInfo(context.Context, *emptypb.Empty) (*OSUpgraderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedOSUpgraderServiceServer) mustEmbedUnimplementedOSUpgraderServiceServer() {}

// UnsafeOSUpgraderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OSUpgraderServiceServer will
// result in compilation errors.
type UnsafeOSUpgraderServiceServer interface {
	mustEmbedUnimplementedOSUpgraderServiceServer()
}

func RegisterOSUpgraderServiceServer(s grpc.ServiceRegistrar, srv OSUpgraderServiceServer) {
	s.RegisterService(&OSUpgraderService_ServiceDesc, srv)
}

func _OSUpgraderService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSUpgraderDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSUpgraderServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSUpgraderService_Download_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSUpgraderServiceServer).Download(ctx, req.(*OSUpgraderDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSUpgraderService_PauseDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSUpgraderServiceServer).PauseDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSUpgraderService_PauseDownload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSUpgraderServiceServer).PauseDownload(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSUpgraderService_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSUpgraderServiceServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSUpgraderService_Install_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSUpgraderServiceServer).Install(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSUpgraderService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSUpgraderServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSUpgraderService_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSUpgraderServiceServer).GetInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OSUpgraderService_ServiceDesc is the grpc.ServiceDesc for OSUpgraderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OSUpgraderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.OSUpgraderService",
	HandlerType: (*OSUpgraderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Download",
			Handler:    _OSUpgraderService_Download_Handler,
		},
		{
			MethodName: "PauseDownload",
			Handler:    _OSUpgraderService_PauseDownload_Handler,
		},
		{
			MethodName: "Install",
			Handler:    _OSUpgraderService_Install_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _OSUpgraderService_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys/osupgrader.proto",
}
