// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: sys/hal.proto

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HalService_SetPLed_FullMethodName               = "/cloud.lazycat.apis.sys.HalService/SetPLed"
	HalService_GetPLed_FullMethodName               = "/cloud.lazycat.apis.sys.HalService/GetPLed"
	HalService_ActivateButtonMonitor_FullMethodName = "/cloud.lazycat.apis.sys.HalService/ActivateButtonMonitor"
	HalService_GetButtonEventQueue_FullMethodName   = "/cloud.lazycat.apis.sys.HalService/GetButtonEventQueue"
)

// HalServiceClient is the client API for HalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HalServiceClient interface {
	// 目前只用到了这两个
	SetPLed(ctx context.Context, in *PLedState, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPLed(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PLedState, error)
	// 续命 Button 监测，续命到 当前时间+30s
	ActivateButtonMonitor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 得到最近 Button 事件队列，最近 30s 内
	GetButtonEventQueue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ButtonEventQueue, error)
}

type halServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHalServiceClient(cc grpc.ClientConnInterface) HalServiceClient {
	return &halServiceClient{cc}
}

func (c *halServiceClient) SetPLed(ctx context.Context, in *PLedState, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HalService_SetPLed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *halServiceClient) GetPLed(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PLedState, error) {
	out := new(PLedState)
	err := c.cc.Invoke(ctx, HalService_GetPLed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *halServiceClient) ActivateButtonMonitor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HalService_ActivateButtonMonitor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *halServiceClient) GetButtonEventQueue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ButtonEventQueue, error) {
	out := new(ButtonEventQueue)
	err := c.cc.Invoke(ctx, HalService_GetButtonEventQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HalServiceServer is the server API for HalService service.
// All implementations must embed UnimplementedHalServiceServer
// for forward compatibility
type HalServiceServer interface {
	// 目前只用到了这两个
	SetPLed(context.Context, *PLedState) (*emptypb.Empty, error)
	GetPLed(context.Context, *emptypb.Empty) (*PLedState, error)
	// 续命 Button 监测，续命到 当前时间+30s
	ActivateButtonMonitor(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 得到最近 Button 事件队列，最近 30s 内
	GetButtonEventQueue(context.Context, *emptypb.Empty) (*ButtonEventQueue, error)
	mustEmbedUnimplementedHalServiceServer()
}

// UnimplementedHalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHalServiceServer struct {
}

func (UnimplementedHalServiceServer) SetPLed(context.Context, *PLedState) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPLed not implemented")
}
func (UnimplementedHalServiceServer) GetPLed(context.Context, *emptypb.Empty) (*PLedState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPLed not implemented")
}
func (UnimplementedHalServiceServer) ActivateButtonMonitor(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateButtonMonitor not implemented")
}
func (UnimplementedHalServiceServer) GetButtonEventQueue(context.Context, *emptypb.Empty) (*ButtonEventQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetButtonEventQueue not implemented")
}
func (UnimplementedHalServiceServer) mustEmbedUnimplementedHalServiceServer() {}

// UnsafeHalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HalServiceServer will
// result in compilation errors.
type UnsafeHalServiceServer interface {
	mustEmbedUnimplementedHalServiceServer()
}

func RegisterHalServiceServer(s grpc.ServiceRegistrar, srv HalServiceServer) {
	s.RegisterService(&HalService_ServiceDesc, srv)
}

func _HalService_SetPLed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PLedState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalServiceServer).SetPLed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HalService_SetPLed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalServiceServer).SetPLed(ctx, req.(*PLedState))
	}
	return interceptor(ctx, in, info, handler)
}

func _HalService_GetPLed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalServiceServer).GetPLed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HalService_GetPLed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalServiceServer).GetPLed(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HalService_ActivateButtonMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalServiceServer).ActivateButtonMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HalService_ActivateButtonMonitor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalServiceServer).ActivateButtonMonitor(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HalService_GetButtonEventQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalServiceServer).GetButtonEventQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HalService_GetButtonEventQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalServiceServer).GetButtonEventQueue(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HalService_ServiceDesc is the grpc.ServiceDesc for HalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.HalService",
	HandlerType: (*HalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPLed",
			Handler:    _HalService_SetPLed_Handler,
		},
		{
			MethodName: "GetPLed",
			Handler:    _HalService_GetPLed_Handler,
		},
		{
			MethodName: "ActivateButtonMonitor",
			Handler:    _HalService_ActivateButtonMonitor_Handler,
		},
		{
			MethodName: "GetButtonEventQueue",
			Handler:    _HalService_GetButtonEventQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys/hal.proto",
}
