// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: sys/OS_daemon.proto

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OsDaemonServiceClient is the client API for OsDaemonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OsDaemonServiceClient interface {
	GetOption(ctx context.Context, in *OptionKey, opts ...grpc.CallOption) (*OptionValue, error)
	SetOption(ctx context.Context, in *OptionKeyValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type osDaemonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOsDaemonServiceClient(cc grpc.ClientConnInterface) OsDaemonServiceClient {
	return &osDaemonServiceClient{cc}
}

func (c *osDaemonServiceClient) GetOption(ctx context.Context, in *OptionKey, opts ...grpc.CallOption) (*OptionValue, error) {
	out := new(OptionValue)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.OsDaemonService/GetOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osDaemonServiceClient) SetOption(ctx context.Context, in *OptionKeyValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.OsDaemonService/SetOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OsDaemonServiceServer is the server API for OsDaemonService service.
// All implementations must embed UnimplementedOsDaemonServiceServer
// for forward compatibility
type OsDaemonServiceServer interface {
	GetOption(context.Context, *OptionKey) (*OptionValue, error)
	SetOption(context.Context, *OptionKeyValue) (*emptypb.Empty, error)
	mustEmbedUnimplementedOsDaemonServiceServer()
}

// UnimplementedOsDaemonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOsDaemonServiceServer struct {
}

func (UnimplementedOsDaemonServiceServer) GetOption(context.Context, *OptionKey) (*OptionValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOption not implemented")
}
func (UnimplementedOsDaemonServiceServer) SetOption(context.Context, *OptionKeyValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOption not implemented")
}
func (UnimplementedOsDaemonServiceServer) mustEmbedUnimplementedOsDaemonServiceServer() {}

// UnsafeOsDaemonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OsDaemonServiceServer will
// result in compilation errors.
type UnsafeOsDaemonServiceServer interface {
	mustEmbedUnimplementedOsDaemonServiceServer()
}

func RegisterOsDaemonServiceServer(s grpc.ServiceRegistrar, srv OsDaemonServiceServer) {
	s.RegisterService(&OsDaemonService_ServiceDesc, srv)
}

func _OsDaemonService_GetOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsDaemonServiceServer).GetOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.OsDaemonService/GetOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsDaemonServiceServer).GetOption(ctx, req.(*OptionKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsDaemonService_SetOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionKeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsDaemonServiceServer).SetOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.OsDaemonService/SetOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsDaemonServiceServer).SetOption(ctx, req.(*OptionKeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

// OsDaemonService_ServiceDesc is the grpc.ServiceDesc for OsDaemonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OsDaemonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.OsDaemonService",
	HandlerType: (*OsDaemonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOption",
			Handler:    _OsDaemonService_GetOption_Handler,
		},
		{
			MethodName: "SetOption",
			Handler:    _OsDaemonService_SetOption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys/OS_daemon.proto",
}
