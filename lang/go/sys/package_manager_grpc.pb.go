// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: sys/package_manager.proto

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PackageManagerClient is the client API for PackageManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackageManagerClient interface {
	Install(ctx context.Context, in *PkgURL, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Uninstall(ctx context.Context, in *PkgDescription, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListApplication(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (PackageManager_ListApplicationClient, error)
}

type packageManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageManagerClient(cc grpc.ClientConnInterface) PackageManagerClient {
	return &packageManagerClient{cc}
}

func (c *packageManagerClient) Install(ctx context.Context, in *PkgURL, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.PackageManager/Install", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageManagerClient) Uninstall(ctx context.Context, in *PkgDescription, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.PackageManager/Uninstall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageManagerClient) ListApplication(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (PackageManager_ListApplicationClient, error) {
	stream, err := c.cc.NewStream(ctx, &PackageManager_ServiceDesc.Streams[0], "/cloud.lazycat.apis.sys.PackageManager/ListApplication", opts...)
	if err != nil {
		return nil, err
	}
	x := &packageManagerListApplicationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PackageManager_ListApplicationClient interface {
	Recv() (*AppDescription, error)
	grpc.ClientStream
}

type packageManagerListApplicationClient struct {
	grpc.ClientStream
}

func (x *packageManagerListApplicationClient) Recv() (*AppDescription, error) {
	m := new(AppDescription)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PackageManagerServer is the server API for PackageManager service.
// All implementations must embed UnimplementedPackageManagerServer
// for forward compatibility
type PackageManagerServer interface {
	Install(context.Context, *PkgURL) (*emptypb.Empty, error)
	Uninstall(context.Context, *PkgDescription) (*emptypb.Empty, error)
	ListApplication(*emptypb.Empty, PackageManager_ListApplicationServer) error
	mustEmbedUnimplementedPackageManagerServer()
}

// UnimplementedPackageManagerServer must be embedded to have forward compatible implementations.
type UnimplementedPackageManagerServer struct {
}

func (UnimplementedPackageManagerServer) Install(context.Context, *PkgURL) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedPackageManagerServer) Uninstall(context.Context, *PkgDescription) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uninstall not implemented")
}
func (UnimplementedPackageManagerServer) ListApplication(*emptypb.Empty, PackageManager_ListApplicationServer) error {
	return status.Errorf(codes.Unimplemented, "method ListApplication not implemented")
}
func (UnimplementedPackageManagerServer) mustEmbedUnimplementedPackageManagerServer() {}

// UnsafePackageManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageManagerServer will
// result in compilation errors.
type UnsafePackageManagerServer interface {
	mustEmbedUnimplementedPackageManagerServer()
}

func RegisterPackageManagerServer(s grpc.ServiceRegistrar, srv PackageManagerServer) {
	s.RegisterService(&PackageManager_ServiceDesc, srv)
}

func _PackageManager_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PkgURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageManagerServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.PackageManager/Install",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageManagerServer).Install(ctx, req.(*PkgURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageManager_Uninstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PkgDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageManagerServer).Uninstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.PackageManager/Uninstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageManagerServer).Uninstall(ctx, req.(*PkgDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageManager_ListApplication_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PackageManagerServer).ListApplication(m, &packageManagerListApplicationServer{stream})
}

type PackageManager_ListApplicationServer interface {
	Send(*AppDescription) error
	grpc.ServerStream
}

type packageManagerListApplicationServer struct {
	grpc.ServerStream
}

func (x *packageManagerListApplicationServer) Send(m *AppDescription) error {
	return x.ServerStream.SendMsg(m)
}

// PackageManager_ServiceDesc is the grpc.ServiceDesc for PackageManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.PackageManager",
	HandlerType: (*PackageManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Install",
			Handler:    _PackageManager_Install_Handler,
		},
		{
			MethodName: "Uninstall",
			Handler:    _PackageManager_Uninstall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListApplication",
			Handler:       _PackageManager_ListApplication_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sys/package_manager.proto",
}
