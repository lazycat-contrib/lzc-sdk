// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: sys/box-status.proto

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BoxStatusServiceClient is the client API for BoxStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoxStatusServiceClient interface {
	GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoxStatus, error)
	Format(ctx context.Context, in *Disks, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type boxStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoxStatusServiceClient(cc grpc.ClientConnInterface) BoxStatusServiceClient {
	return &boxStatusServiceClient{cc}
}

func (c *boxStatusServiceClient) GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoxStatus, error) {
	out := new(BoxStatus)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.BoxStatusService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxStatusServiceClient) Format(ctx context.Context, in *Disks, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.BoxStatusService/Format", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoxStatusServiceServer is the server API for BoxStatusService service.
// All implementations must embed UnimplementedBoxStatusServiceServer
// for forward compatibility
type BoxStatusServiceServer interface {
	GetAll(context.Context, *emptypb.Empty) (*BoxStatus, error)
	Format(context.Context, *Disks) (*emptypb.Empty, error)
	mustEmbedUnimplementedBoxStatusServiceServer()
}

// UnimplementedBoxStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBoxStatusServiceServer struct {
}

func (UnimplementedBoxStatusServiceServer) GetAll(context.Context, *emptypb.Empty) (*BoxStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedBoxStatusServiceServer) Format(context.Context, *Disks) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Format not implemented")
}
func (UnimplementedBoxStatusServiceServer) mustEmbedUnimplementedBoxStatusServiceServer() {}

// UnsafeBoxStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoxStatusServiceServer will
// result in compilation errors.
type UnsafeBoxStatusServiceServer interface {
	mustEmbedUnimplementedBoxStatusServiceServer()
}

func RegisterBoxStatusServiceServer(s grpc.ServiceRegistrar, srv BoxStatusServiceServer) {
	s.RegisterService(&BoxStatusService_ServiceDesc, srv)
}

func _BoxStatusService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxStatusServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.BoxStatusService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxStatusServiceServer).GetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxStatusService_Format_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Disks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxStatusServiceServer).Format(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.BoxStatusService/Format",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxStatusServiceServer).Format(ctx, req.(*Disks))
	}
	return interceptor(ctx, in, info, handler)
}

// BoxStatusService_ServiceDesc is the grpc.ServiceDesc for BoxStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoxStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.BoxStatusService",
	HandlerType: (*BoxStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _BoxStatusService_GetAll_Handler,
		},
		{
			MethodName: "Format",
			Handler:    _BoxStatusService_Format_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys/box-status.proto",
}
