// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: sys/btrfs.proto

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BtrfsUtilClient is the client API for BtrfsUtil service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BtrfsUtilClient interface {
	SubvolCreate(ctx context.Context, in *BtrfsSubvolCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SubvolInfo(ctx context.Context, in *BtrfsSubvolInfoRequest, opts ...grpc.CallOption) (*BtrfsSubvolInfoResponse, error)
	SubvolFindNew(ctx context.Context, in *BtrfsSubvolFindNewRequest, opts ...grpc.CallOption) (*BtrfsSubvolFindNewResponse, error)
	Rename(ctx context.Context, in *BtrfsRenameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type btrfsUtilClient struct {
	cc grpc.ClientConnInterface
}

func NewBtrfsUtilClient(cc grpc.ClientConnInterface) BtrfsUtilClient {
	return &btrfsUtilClient{cc}
}

func (c *btrfsUtilClient) SubvolCreate(ctx context.Context, in *BtrfsSubvolCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.BtrfsUtil/SubvolCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btrfsUtilClient) SubvolInfo(ctx context.Context, in *BtrfsSubvolInfoRequest, opts ...grpc.CallOption) (*BtrfsSubvolInfoResponse, error) {
	out := new(BtrfsSubvolInfoResponse)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.BtrfsUtil/SubvolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btrfsUtilClient) SubvolFindNew(ctx context.Context, in *BtrfsSubvolFindNewRequest, opts ...grpc.CallOption) (*BtrfsSubvolFindNewResponse, error) {
	out := new(BtrfsSubvolFindNewResponse)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.BtrfsUtil/SubvolFindNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btrfsUtilClient) Rename(ctx context.Context, in *BtrfsRenameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.BtrfsUtil/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BtrfsUtilServer is the server API for BtrfsUtil service.
// All implementations must embed UnimplementedBtrfsUtilServer
// for forward compatibility
type BtrfsUtilServer interface {
	SubvolCreate(context.Context, *BtrfsSubvolCreateRequest) (*emptypb.Empty, error)
	SubvolInfo(context.Context, *BtrfsSubvolInfoRequest) (*BtrfsSubvolInfoResponse, error)
	SubvolFindNew(context.Context, *BtrfsSubvolFindNewRequest) (*BtrfsSubvolFindNewResponse, error)
	Rename(context.Context, *BtrfsRenameRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBtrfsUtilServer()
}

// UnimplementedBtrfsUtilServer must be embedded to have forward compatible implementations.
type UnimplementedBtrfsUtilServer struct {
}

func (UnimplementedBtrfsUtilServer) SubvolCreate(context.Context, *BtrfsSubvolCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubvolCreate not implemented")
}
func (UnimplementedBtrfsUtilServer) SubvolInfo(context.Context, *BtrfsSubvolInfoRequest) (*BtrfsSubvolInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubvolInfo not implemented")
}
func (UnimplementedBtrfsUtilServer) SubvolFindNew(context.Context, *BtrfsSubvolFindNewRequest) (*BtrfsSubvolFindNewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubvolFindNew not implemented")
}
func (UnimplementedBtrfsUtilServer) Rename(context.Context, *BtrfsRenameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedBtrfsUtilServer) mustEmbedUnimplementedBtrfsUtilServer() {}

// UnsafeBtrfsUtilServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BtrfsUtilServer will
// result in compilation errors.
type UnsafeBtrfsUtilServer interface {
	mustEmbedUnimplementedBtrfsUtilServer()
}

func RegisterBtrfsUtilServer(s grpc.ServiceRegistrar, srv BtrfsUtilServer) {
	s.RegisterService(&BtrfsUtil_ServiceDesc, srv)
}

func _BtrfsUtil_SubvolCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BtrfsSubvolCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtrfsUtilServer).SubvolCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.BtrfsUtil/SubvolCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtrfsUtilServer).SubvolCreate(ctx, req.(*BtrfsSubvolCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BtrfsUtil_SubvolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BtrfsSubvolInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtrfsUtilServer).SubvolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.BtrfsUtil/SubvolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtrfsUtilServer).SubvolInfo(ctx, req.(*BtrfsSubvolInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BtrfsUtil_SubvolFindNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BtrfsSubvolFindNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtrfsUtilServer).SubvolFindNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.BtrfsUtil/SubvolFindNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtrfsUtilServer).SubvolFindNew(ctx, req.(*BtrfsSubvolFindNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BtrfsUtil_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BtrfsRenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtrfsUtilServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.BtrfsUtil/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtrfsUtilServer).Rename(ctx, req.(*BtrfsRenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BtrfsUtil_ServiceDesc is the grpc.ServiceDesc for BtrfsUtil service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BtrfsUtil_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.BtrfsUtil",
	HandlerType: (*BtrfsUtilServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubvolCreate",
			Handler:    _BtrfsUtil_SubvolCreate_Handler,
		},
		{
			MethodName: "SubvolInfo",
			Handler:    _BtrfsUtil_SubvolInfo_Handler,
		},
		{
			MethodName: "SubvolFindNew",
			Handler:    _BtrfsUtil_SubvolFindNew_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _BtrfsUtil_Rename_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys/btrfs.proto",
}
