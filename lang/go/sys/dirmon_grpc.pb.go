// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: sys/dirmon.proto

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DirMonitor_FindNew_FullMethodName       = "/cloud.lazycat.apis.sys.DirMonitor/FindNew"
	DirMonitor_FindNewStream_FullMethodName = "/cloud.lazycat.apis.sys.DirMonitor/FindNewStream"
)

// DirMonitorClient is the client API for DirMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirMonitorClient interface {
	FindNew(ctx context.Context, in *DirMonitorFindNewRequest, opts ...grpc.CallOption) (*DirMonitorFindNewResponse, error)
	FindNewStream(ctx context.Context, in *DirMonitorFindNewRequest, opts ...grpc.CallOption) (DirMonitor_FindNewStreamClient, error)
}

type dirMonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewDirMonitorClient(cc grpc.ClientConnInterface) DirMonitorClient {
	return &dirMonitorClient{cc}
}

func (c *dirMonitorClient) FindNew(ctx context.Context, in *DirMonitorFindNewRequest, opts ...grpc.CallOption) (*DirMonitorFindNewResponse, error) {
	out := new(DirMonitorFindNewResponse)
	err := c.cc.Invoke(ctx, DirMonitor_FindNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dirMonitorClient) FindNewStream(ctx context.Context, in *DirMonitorFindNewRequest, opts ...grpc.CallOption) (DirMonitor_FindNewStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DirMonitor_ServiceDesc.Streams[0], DirMonitor_FindNewStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dirMonitorFindNewStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DirMonitor_FindNewStreamClient interface {
	Recv() (*StreamDirMonitorFindNewResp, error)
	grpc.ClientStream
}

type dirMonitorFindNewStreamClient struct {
	grpc.ClientStream
}

func (x *dirMonitorFindNewStreamClient) Recv() (*StreamDirMonitorFindNewResp, error) {
	m := new(StreamDirMonitorFindNewResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DirMonitorServer is the server API for DirMonitor service.
// All implementations must embed UnimplementedDirMonitorServer
// for forward compatibility
type DirMonitorServer interface {
	FindNew(context.Context, *DirMonitorFindNewRequest) (*DirMonitorFindNewResponse, error)
	FindNewStream(*DirMonitorFindNewRequest, DirMonitor_FindNewStreamServer) error
	mustEmbedUnimplementedDirMonitorServer()
}

// UnimplementedDirMonitorServer must be embedded to have forward compatible implementations.
type UnimplementedDirMonitorServer struct {
}

func (UnimplementedDirMonitorServer) FindNew(context.Context, *DirMonitorFindNewRequest) (*DirMonitorFindNewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNew not implemented")
}
func (UnimplementedDirMonitorServer) FindNewStream(*DirMonitorFindNewRequest, DirMonitor_FindNewStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method FindNewStream not implemented")
}
func (UnimplementedDirMonitorServer) mustEmbedUnimplementedDirMonitorServer() {}

// UnsafeDirMonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirMonitorServer will
// result in compilation errors.
type UnsafeDirMonitorServer interface {
	mustEmbedUnimplementedDirMonitorServer()
}

func RegisterDirMonitorServer(s grpc.ServiceRegistrar, srv DirMonitorServer) {
	s.RegisterService(&DirMonitor_ServiceDesc, srv)
}

func _DirMonitor_FindNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirMonitorFindNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirMonitorServer).FindNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirMonitor_FindNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirMonitorServer).FindNew(ctx, req.(*DirMonitorFindNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirMonitor_FindNewStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DirMonitorFindNewRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DirMonitorServer).FindNewStream(m, &dirMonitorFindNewStreamServer{stream})
}

type DirMonitor_FindNewStreamServer interface {
	Send(*StreamDirMonitorFindNewResp) error
	grpc.ServerStream
}

type dirMonitorFindNewStreamServer struct {
	grpc.ServerStream
}

func (x *dirMonitorFindNewStreamServer) Send(m *StreamDirMonitorFindNewResp) error {
	return x.ServerStream.SendMsg(m)
}

// DirMonitor_ServiceDesc is the grpc.ServiceDesc for DirMonitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirMonitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.DirMonitor",
	HandlerType: (*DirMonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindNew",
			Handler:    _DirMonitor_FindNew_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindNewStream",
			Handler:       _DirMonitor_FindNewStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sys/dirmon.proto",
}
