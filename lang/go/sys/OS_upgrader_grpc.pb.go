// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: sys/OS_upgrader.proto

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OSUpgradeService_Local_FullMethodName       = "/cloud.lazycat.apis.sys.OSUpgradeService/Local"
	OSUpgradeService_Remote_FullMethodName      = "/cloud.lazycat.apis.sys.OSUpgradeService/Remote"
	OSUpgradeService_GetLatest_FullMethodName   = "/cloud.lazycat.apis.sys.OSUpgradeService/GetLatest"
	OSUpgradeService_Select_FullMethodName      = "/cloud.lazycat.apis.sys.OSUpgradeService/Select"
	OSUpgradeService_GetSelected_FullMethodName = "/cloud.lazycat.apis.sys.OSUpgradeService/GetSelected"
	OSUpgradeService_Start_FullMethodName       = "/cloud.lazycat.apis.sys.OSUpgradeService/Start"
	OSUpgradeService_Pause_FullMethodName       = "/cloud.lazycat.apis.sys.OSUpgradeService/Pause"
	OSUpgradeService_Progress_FullMethodName    = "/cloud.lazycat.apis.sys.OSUpgradeService/Progress"
	OSUpgradeService_Prune_FullMethodName       = "/cloud.lazycat.apis.sys.OSUpgradeService/Prune"
)

// OSUpgradeServiceClient is the client API for OSUpgradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OSUpgradeServiceClient interface {
	// 获取当前系统的版本状态
	Local(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemVersionInfo, error)
	// 获取指定版本系统信息
	Remote(ctx context.Context, in *SystemVersion, opts ...grpc.CallOption) (*SystemVersionInfo, error)
	// 获取指定发行类型的最新系统信息
	GetLatest(ctx context.Context, in *GetLatestRequest, opts ...grpc.CallOption) (*SystemVersionInfo, error)
	// 选择远程某个版本，获取到大小准备下载
	Select(ctx context.Context, in *SystemVersion, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取下载器当前已选择的版本
	GetSelected(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemVersionInfo, error)
	// 开始下载
	Start(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 暂停下载
	Pause(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取下载进度
	Progress(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UpgradeProgressInfo, error)
	// 清理（阻塞）
	Prune(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type oSUpgradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOSUpgradeServiceClient(cc grpc.ClientConnInterface) OSUpgradeServiceClient {
	return &oSUpgradeServiceClient{cc}
}

func (c *oSUpgradeServiceClient) Local(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemVersionInfo, error) {
	out := new(SystemVersionInfo)
	err := c.cc.Invoke(ctx, OSUpgradeService_Local_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSUpgradeServiceClient) Remote(ctx context.Context, in *SystemVersion, opts ...grpc.CallOption) (*SystemVersionInfo, error) {
	out := new(SystemVersionInfo)
	err := c.cc.Invoke(ctx, OSUpgradeService_Remote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSUpgradeServiceClient) GetLatest(ctx context.Context, in *GetLatestRequest, opts ...grpc.CallOption) (*SystemVersionInfo, error) {
	out := new(SystemVersionInfo)
	err := c.cc.Invoke(ctx, OSUpgradeService_GetLatest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSUpgradeServiceClient) Select(ctx context.Context, in *SystemVersion, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OSUpgradeService_Select_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSUpgradeServiceClient) GetSelected(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemVersionInfo, error) {
	out := new(SystemVersionInfo)
	err := c.cc.Invoke(ctx, OSUpgradeService_GetSelected_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSUpgradeServiceClient) Start(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OSUpgradeService_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSUpgradeServiceClient) Pause(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OSUpgradeService_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSUpgradeServiceClient) Progress(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UpgradeProgressInfo, error) {
	out := new(UpgradeProgressInfo)
	err := c.cc.Invoke(ctx, OSUpgradeService_Progress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSUpgradeServiceClient) Prune(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OSUpgradeService_Prune_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSUpgradeServiceServer is the server API for OSUpgradeService service.
// All implementations must embed UnimplementedOSUpgradeServiceServer
// for forward compatibility
type OSUpgradeServiceServer interface {
	// 获取当前系统的版本状态
	Local(context.Context, *emptypb.Empty) (*SystemVersionInfo, error)
	// 获取指定版本系统信息
	Remote(context.Context, *SystemVersion) (*SystemVersionInfo, error)
	// 获取指定发行类型的最新系统信息
	GetLatest(context.Context, *GetLatestRequest) (*SystemVersionInfo, error)
	// 选择远程某个版本，获取到大小准备下载
	Select(context.Context, *SystemVersion) (*emptypb.Empty, error)
	// 获取下载器当前已选择的版本
	GetSelected(context.Context, *emptypb.Empty) (*SystemVersionInfo, error)
	// 开始下载
	Start(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 暂停下载
	Pause(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 获取下载进度
	Progress(context.Context, *emptypb.Empty) (*UpgradeProgressInfo, error)
	// 清理（阻塞）
	Prune(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedOSUpgradeServiceServer()
}

// UnimplementedOSUpgradeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOSUpgradeServiceServer struct {
}

func (UnimplementedOSUpgradeServiceServer) Local(context.Context, *emptypb.Empty) (*SystemVersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Local not implemented")
}
func (UnimplementedOSUpgradeServiceServer) Remote(context.Context, *SystemVersion) (*SystemVersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remote not implemented")
}
func (UnimplementedOSUpgradeServiceServer) GetLatest(context.Context, *GetLatestRequest) (*SystemVersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatest not implemented")
}
func (UnimplementedOSUpgradeServiceServer) Select(context.Context, *SystemVersion) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Select not implemented")
}
func (UnimplementedOSUpgradeServiceServer) GetSelected(context.Context, *emptypb.Empty) (*SystemVersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelected not implemented")
}
func (UnimplementedOSUpgradeServiceServer) Start(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedOSUpgradeServiceServer) Pause(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedOSUpgradeServiceServer) Progress(context.Context, *emptypb.Empty) (*UpgradeProgressInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Progress not implemented")
}
func (UnimplementedOSUpgradeServiceServer) Prune(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prune not implemented")
}
func (UnimplementedOSUpgradeServiceServer) mustEmbedUnimplementedOSUpgradeServiceServer() {}

// UnsafeOSUpgradeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OSUpgradeServiceServer will
// result in compilation errors.
type UnsafeOSUpgradeServiceServer interface {
	mustEmbedUnimplementedOSUpgradeServiceServer()
}

func RegisterOSUpgradeServiceServer(s grpc.ServiceRegistrar, srv OSUpgradeServiceServer) {
	s.RegisterService(&OSUpgradeService_ServiceDesc, srv)
}

func _OSUpgradeService_Local_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSUpgradeServiceServer).Local(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSUpgradeService_Local_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSUpgradeServiceServer).Local(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSUpgradeService_Remote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSUpgradeServiceServer).Remote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSUpgradeService_Remote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSUpgradeServiceServer).Remote(ctx, req.(*SystemVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSUpgradeService_GetLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSUpgradeServiceServer).GetLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSUpgradeService_GetLatest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSUpgradeServiceServer).GetLatest(ctx, req.(*GetLatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSUpgradeService_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSUpgradeServiceServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSUpgradeService_Select_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSUpgradeServiceServer).Select(ctx, req.(*SystemVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSUpgradeService_GetSelected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSUpgradeServiceServer).GetSelected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSUpgradeService_GetSelected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSUpgradeServiceServer).GetSelected(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSUpgradeService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSUpgradeServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSUpgradeService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSUpgradeServiceServer).Start(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSUpgradeService_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSUpgradeServiceServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSUpgradeService_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSUpgradeServiceServer).Pause(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSUpgradeService_Progress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSUpgradeServiceServer).Progress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSUpgradeService_Progress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSUpgradeServiceServer).Progress(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSUpgradeService_Prune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSUpgradeServiceServer).Prune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSUpgradeService_Prune_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSUpgradeServiceServer).Prune(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OSUpgradeService_ServiceDesc is the grpc.ServiceDesc for OSUpgradeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OSUpgradeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.OSUpgradeService",
	HandlerType: (*OSUpgradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Local",
			Handler:    _OSUpgradeService_Local_Handler,
		},
		{
			MethodName: "Remote",
			Handler:    _OSUpgradeService_Remote_Handler,
		},
		{
			MethodName: "GetLatest",
			Handler:    _OSUpgradeService_GetLatest_Handler,
		},
		{
			MethodName: "Select",
			Handler:    _OSUpgradeService_Select_Handler,
		},
		{
			MethodName: "GetSelected",
			Handler:    _OSUpgradeService_GetSelected_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _OSUpgradeService_Start_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _OSUpgradeService_Pause_Handler,
		},
		{
			MethodName: "Progress",
			Handler:    _OSUpgradeService_Progress_Handler,
		},
		{
			MethodName: "Prune",
			Handler:    _OSUpgradeService_Prune_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys/OS_upgrader.proto",
}
