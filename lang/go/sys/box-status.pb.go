// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.1
// source: sys/box-status.proto

package sys

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataPartitionStatusType int32

const (
	// 数据盘正常、分区正常、挂载正常
	DataPartitionStatusType_DATA_PARTITION_STATUS_OK DataPartitionStatusType = 0
	// 数据盘正常、未分区或未格式化
	DataPartitionStatusType_DATA_PARTITION_STATUS_RAW DataPartitionStatusType = 1
	// 数据盘不存在
	DataPartitionStatusType_DATA_PARTITION_STATUS_NOT_FOUND DataPartitionStatusType = 2
	// 数据盘需要解密
	DataPartitionStatusType_DATA_PARTITION_STATUS_ENCRYPTED DataPartitionStatusType = 3
	// 数据盘异常（硬盘不健康、分区存在但无法挂载、分区挂载但无法使用、文件系统逻辑错误）
	DataPartitionStatusType_DATA_PARTITION_STATUS_EXCEPTION DataPartitionStatusType = 4
)

// Enum value maps for DataPartitionStatusType.
var (
	DataPartitionStatusType_name = map[int32]string{
		0: "DATA_PARTITION_STATUS_OK",
		1: "DATA_PARTITION_STATUS_RAW",
		2: "DATA_PARTITION_STATUS_NOT_FOUND",
		3: "DATA_PARTITION_STATUS_ENCRYPTED",
		4: "DATA_PARTITION_STATUS_EXCEPTION",
	}
	DataPartitionStatusType_value = map[string]int32{
		"DATA_PARTITION_STATUS_OK":        0,
		"DATA_PARTITION_STATUS_RAW":       1,
		"DATA_PARTITION_STATUS_NOT_FOUND": 2,
		"DATA_PARTITION_STATUS_ENCRYPTED": 3,
		"DATA_PARTITION_STATUS_EXCEPTION": 4,
	}
)

func (x DataPartitionStatusType) Enum() *DataPartitionStatusType {
	p := new(DataPartitionStatusType)
	*p = x
	return p
}

func (x DataPartitionStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataPartitionStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_sys_box_status_proto_enumTypes[0].Descriptor()
}

func (DataPartitionStatusType) Type() protoreflect.EnumType {
	return &file_sys_box_status_proto_enumTypes[0]
}

func (x DataPartitionStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataPartitionStatusType.Descriptor instead.
func (DataPartitionStatusType) EnumDescriptor() ([]byte, []int) {
	return file_sys_box_status_proto_rawDescGZIP(), []int{0}
}

type DataPartitionExceptionType int32

const (
	DataPartitionExceptionType_DATA_PARTITION_EXCEPTION_OK DataPartitionExceptionType = 0
	// 不支持的系统环境
	DataPartitionExceptionType_DATA_PARTITION_EXCEPTION_NO_SUPPORTED DataPartitionExceptionType = 1
	// 执行 lsblk 出错
	DataPartitionExceptionType_DATA_PARTITION_EXCEPTION_LSBLK DataPartitionExceptionType = 2
	// 数据盘已被异常拔出（未找到数据盘挂载点对应的设备）
	DataPartitionExceptionType_DATA_PARTITION_EXCEPTION_EJECTED DataPartitionExceptionType = 3
	// 数据盘已初始化但未挂载
	DataPartitionExceptionType_DATA_PARTITION_EXCEPTION_NOT_MOUNTED DataPartitionExceptionType = 4
)

// Enum value maps for DataPartitionExceptionType.
var (
	DataPartitionExceptionType_name = map[int32]string{
		0: "DATA_PARTITION_EXCEPTION_OK",
		1: "DATA_PARTITION_EXCEPTION_NO_SUPPORTED",
		2: "DATA_PARTITION_EXCEPTION_LSBLK",
		3: "DATA_PARTITION_EXCEPTION_EJECTED",
		4: "DATA_PARTITION_EXCEPTION_NOT_MOUNTED",
	}
	DataPartitionExceptionType_value = map[string]int32{
		"DATA_PARTITION_EXCEPTION_OK":           0,
		"DATA_PARTITION_EXCEPTION_NO_SUPPORTED": 1,
		"DATA_PARTITION_EXCEPTION_LSBLK":        2,
		"DATA_PARTITION_EXCEPTION_EJECTED":      3,
		"DATA_PARTITION_EXCEPTION_NOT_MOUNTED":  4,
	}
)

func (x DataPartitionExceptionType) Enum() *DataPartitionExceptionType {
	p := new(DataPartitionExceptionType)
	*p = x
	return p
}

func (x DataPartitionExceptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataPartitionExceptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_sys_box_status_proto_enumTypes[1].Descriptor()
}

func (DataPartitionExceptionType) Type() protoreflect.EnumType {
	return &file_sys_box_status_proto_enumTypes[1]
}

func (x DataPartitionExceptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataPartitionExceptionType.Descriptor instead.
func (DataPartitionExceptionType) EnumDescriptor() ([]byte, []int) {
	return file_sys_box_status_proto_rawDescGZIP(), []int{1}
}

type StartupStatusType int32

const (
	// 盒子已正常启动，所有系统应用的状态都正常
	StartupStatusType_STARTUP_STATUS_OK StartupStatusType = 0
	// 盒子启动过程被阻塞，等待用户处理（如需要hportal初始化、需要网络连接、需要格式化数据盘）
	StartupStatusType_STARTUP_STATUS_PENDING StartupStatusType = 1
	// 盒子正在启动
	StartupStatusType_STARTUP_STATUS_STARTING StartupStatusType = 2
	// 盒子启动异常（某系统应用挂了）
	StartupStatusType_STARTUP_STATUS_EXCEPTION StartupStatusType = 3
)

// Enum value maps for StartupStatusType.
var (
	StartupStatusType_name = map[int32]string{
		0: "STARTUP_STATUS_OK",
		1: "STARTUP_STATUS_PENDING",
		2: "STARTUP_STATUS_STARTING",
		3: "STARTUP_STATUS_EXCEPTION",
	}
	StartupStatusType_value = map[string]int32{
		"STARTUP_STATUS_OK":        0,
		"STARTUP_STATUS_PENDING":   1,
		"STARTUP_STATUS_STARTING":  2,
		"STARTUP_STATUS_EXCEPTION": 3,
	}
)

func (x StartupStatusType) Enum() *StartupStatusType {
	p := new(StartupStatusType)
	*p = x
	return p
}

func (x StartupStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartupStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_sys_box_status_proto_enumTypes[2].Descriptor()
}

func (StartupStatusType) Type() protoreflect.EnumType {
	return &file_sys_box_status_proto_enumTypes[2]
}

func (x StartupStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartupStatusType.Descriptor instead.
func (StartupStatusType) EnumDescriptor() ([]byte, []int) {
	return file_sys_box_status_proto_rawDescGZIP(), []int{2}
}

type StartupExceptionType int32

const (
	StartupExceptionType_STARTUP_EXCEPTION_OK StartupExceptionType = 0
	// 未知异常
	StartupExceptionType_STARTUP_EXCEPTION_UNKNOWN_EXCEPTION StartupExceptionType = 1
	// 测试异常
	StartupExceptionType_STARTUP_EXCEPTION_TEST StartupExceptionType = 2
	// 等待系统应用启动
	StartupExceptionType_STARTUP_EXCEPTION_SYS_APP_WAITING StartupExceptionType = 3
	// 系统应用异常
	StartupExceptionType_STARTUP_EXCEPTION_SYS_APP_EXCEPTION StartupExceptionType = 4
	// hc-core 异常
	StartupExceptionType_STARTUP_EXCEPTION_CORE_EXCEPTION StartupExceptionType = 5
	// 系统关键组件异常（hportal/ldap等异常）
	StartupExceptionType_STARTUP_EXCEPTION_INIT_EXCEPTION StartupExceptionType = 6
)

// Enum value maps for StartupExceptionType.
var (
	StartupExceptionType_name = map[int32]string{
		0: "STARTUP_EXCEPTION_OK",
		1: "STARTUP_EXCEPTION_UNKNOWN_EXCEPTION",
		2: "STARTUP_EXCEPTION_TEST",
		3: "STARTUP_EXCEPTION_SYS_APP_WAITING",
		4: "STARTUP_EXCEPTION_SYS_APP_EXCEPTION",
		5: "STARTUP_EXCEPTION_CORE_EXCEPTION",
		6: "STARTUP_EXCEPTION_INIT_EXCEPTION",
	}
	StartupExceptionType_value = map[string]int32{
		"STARTUP_EXCEPTION_OK":                0,
		"STARTUP_EXCEPTION_UNKNOWN_EXCEPTION": 1,
		"STARTUP_EXCEPTION_TEST":              2,
		"STARTUP_EXCEPTION_SYS_APP_WAITING":   3,
		"STARTUP_EXCEPTION_SYS_APP_EXCEPTION": 4,
		"STARTUP_EXCEPTION_CORE_EXCEPTION":    5,
		"STARTUP_EXCEPTION_INIT_EXCEPTION":    6,
	}
)

func (x StartupExceptionType) Enum() *StartupExceptionType {
	p := new(StartupExceptionType)
	*p = x
	return p
}

func (x StartupExceptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartupExceptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_sys_box_status_proto_enumTypes[3].Descriptor()
}

func (StartupExceptionType) Type() protoreflect.EnumType {
	return &file_sys_box_status_proto_enumTypes[3]
}

func (x StartupExceptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartupExceptionType.Descriptor instead.
func (StartupExceptionType) EnumDescriptor() ([]byte, []int) {
	return file_sys_box_status_proto_rawDescGZIP(), []int{3}
}

type ShutdownReasonType int32

const (
	// 盒子正常关机而重启
	ShutdownReasonType_SHUTDOWN_REASON_NORMAL ShutdownReasonType = 0
	// 盒子需要升级而重启
	ShutdownReasonType_SHUTDOWN_REASON_UPDATE ShutdownReasonType = 1
	// 恢复出厂设置而重启
	ShutdownReasonType_SHUTDOWN_REASON_RESET ShutdownReasonType = 2
	// 非正常关机而重启（突然断电、用户强制关机等）
	ShutdownReasonType_SHUTDOWN_REASON_ABNORMAL ShutdownReasonType = 3
)

// Enum value maps for ShutdownReasonType.
var (
	ShutdownReasonType_name = map[int32]string{
		0: "SHUTDOWN_REASON_NORMAL",
		1: "SHUTDOWN_REASON_UPDATE",
		2: "SHUTDOWN_REASON_RESET",
		3: "SHUTDOWN_REASON_ABNORMAL",
	}
	ShutdownReasonType_value = map[string]int32{
		"SHUTDOWN_REASON_NORMAL":   0,
		"SHUTDOWN_REASON_UPDATE":   1,
		"SHUTDOWN_REASON_RESET":    2,
		"SHUTDOWN_REASON_ABNORMAL": 3,
	}
)

func (x ShutdownReasonType) Enum() *ShutdownReasonType {
	p := new(ShutdownReasonType)
	*p = x
	return p
}

func (x ShutdownReasonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShutdownReasonType) Descriptor() protoreflect.EnumDescriptor {
	return file_sys_box_status_proto_enumTypes[4].Descriptor()
}

func (ShutdownReasonType) Type() protoreflect.EnumType {
	return &file_sys_box_status_proto_enumTypes[4]
}

func (x ShutdownReasonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShutdownReasonType.Descriptor instead.
func (ShutdownReasonType) EnumDescriptor() ([]byte, []int) {
	return file_sys_box_status_proto_rawDescGZIP(), []int{4}
}

type DiskSmartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Temperature int32 `protobuf:"varint,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	UsedTime    int64 `protobuf:"varint,2,opt,name=used_time,json=usedTime,proto3" json:"used_time,omitempty"`
}

func (x *DiskSmartInfo) Reset() {
	*x = DiskSmartInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sys_box_status_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskSmartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskSmartInfo) ProtoMessage() {}

func (x *DiskSmartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sys_box_status_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskSmartInfo.ProtoReflect.Descriptor instead.
func (*DiskSmartInfo) Descriptor() ([]byte, []int) {
	return file_sys_box_status_proto_rawDescGZIP(), []int{0}
}

func (x *DiskSmartInfo) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *DiskSmartInfo) GetUsedTime() int64 {
	if x != nil {
		return x.UsedTime
	}
	return 0
}

type DiskDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []string `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	Total   uint64   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Used    uint64   `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
	// smart info
	Smart *DiskSmartInfo `protobuf:"bytes,4,opt,name=smart,proto3" json:"smart,omitempty"`
}

func (x *DiskDetail) Reset() {
	*x = DiskDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sys_box_status_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskDetail) ProtoMessage() {}

func (x *DiskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_sys_box_status_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskDetail.ProtoReflect.Descriptor instead.
func (*DiskDetail) Descriptor() ([]byte, []int) {
	return file_sys_box_status_proto_rawDescGZIP(), []int{1}
}

func (x *DiskDetail) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *DiskDetail) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DiskDetail) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *DiskDetail) GetSmart() *DiskSmartInfo {
	if x != nil {
		return x.Smart
	}
	return nil
}

type DataPartitionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    DataPartitionStatusType    `protobuf:"varint,1,opt,name=status,proto3,enum=cloud.lazycat.apis.sys.DataPartitionStatusType" json:"status,omitempty"`
	Exception DataPartitionExceptionType `protobuf:"varint,2,opt,name=exception,proto3,enum=cloud.lazycat.apis.sys.DataPartitionExceptionType" json:"exception,omitempty"`
	Msg       string                     `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Disks     []string                   `protobuf:"bytes,4,rep,name=disks,proto3" json:"disks,omitempty"`
	Details   []*DiskDetail              `protobuf:"bytes,5,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *DataPartitionStatus) Reset() {
	*x = DataPartitionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sys_box_status_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPartitionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPartitionStatus) ProtoMessage() {}

func (x *DataPartitionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sys_box_status_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPartitionStatus.ProtoReflect.Descriptor instead.
func (*DataPartitionStatus) Descriptor() ([]byte, []int) {
	return file_sys_box_status_proto_rawDescGZIP(), []int{2}
}

func (x *DataPartitionStatus) GetStatus() DataPartitionStatusType {
	if x != nil {
		return x.Status
	}
	return DataPartitionStatusType_DATA_PARTITION_STATUS_OK
}

func (x *DataPartitionStatus) GetException() DataPartitionExceptionType {
	if x != nil {
		return x.Exception
	}
	return DataPartitionExceptionType_DATA_PARTITION_EXCEPTION_OK
}

func (x *DataPartitionStatus) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DataPartitionStatus) GetDisks() []string {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *DataPartitionStatus) GetDetails() []*DiskDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type DataDiskFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用于数据盘的磁盘（例如 /dev/vdb。如果留空，则自动扫描并使用所有的空盘）
	Disks []string `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty"`
	// 数据盘的密码（如果留空，则不加密）
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *DataDiskFormat) Reset() {
	*x = DataDiskFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sys_box_status_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataDiskFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataDiskFormat) ProtoMessage() {}

func (x *DataDiskFormat) ProtoReflect() protoreflect.Message {
	mi := &file_sys_box_status_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataDiskFormat.ProtoReflect.Descriptor instead.
func (*DataDiskFormat) Descriptor() ([]byte, []int) {
	return file_sys_box_status_proto_rawDescGZIP(), []int{3}
}

func (x *DataDiskFormat) GetDisks() []string {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *DataDiskFormat) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type DataDiskDecrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *DataDiskDecrypt) Reset() {
	*x = DataDiskDecrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sys_box_status_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataDiskDecrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataDiskDecrypt) ProtoMessage() {}

func (x *DataDiskDecrypt) ProtoReflect() protoreflect.Message {
	mi := &file_sys_box_status_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataDiskDecrypt.ProtoReflect.Descriptor instead.
func (*DataDiskDecrypt) Descriptor() ([]byte, []int) {
	return file_sys_box_status_proto_rawDescGZIP(), []int{4}
}

func (x *DataDiskDecrypt) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type StartupStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StartupStatusType    `protobuf:"varint,1,opt,name=status,proto3,enum=cloud.lazycat.apis.sys.StartupStatusType" json:"status,omitempty"`
	Exception     StartupExceptionType `protobuf:"varint,2,opt,name=exception,proto3,enum=cloud.lazycat.apis.sys.StartupExceptionType" json:"exception,omitempty"`
	ExceptionData string               `protobuf:"bytes,3,opt,name=exceptionData,proto3" json:"exceptionData,omitempty"` // json string
}

func (x *StartupStatus) Reset() {
	*x = StartupStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sys_box_status_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartupStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartupStatus) ProtoMessage() {}

func (x *StartupStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sys_box_status_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartupStatus.ProtoReflect.Descriptor instead.
func (*StartupStatus) Descriptor() ([]byte, []int) {
	return file_sys_box_status_proto_rawDescGZIP(), []int{5}
}

func (x *StartupStatus) GetStatus() StartupStatusType {
	if x != nil {
		return x.Status
	}
	return StartupStatusType_STARTUP_STATUS_OK
}

func (x *StartupStatus) GetException() StartupExceptionType {
	if x != nil {
		return x.Exception
	}
	return StartupExceptionType_STARTUP_EXCEPTION_OK
}

func (x *StartupStatus) GetExceptionData() string {
	if x != nil {
		return x.ExceptionData
	}
	return ""
}

type BoxStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataPartition      *DataPartitionStatus `protobuf:"bytes,1,opt,name=dataPartition,proto3" json:"dataPartition,omitempty"`
	HasInternet        bool                 `protobuf:"varint,2,opt,name=hasInternet,proto3" json:"hasInternet,omitempty"`
	HportalInitialized bool                 `protobuf:"varint,3,opt,name=hportalInitialized,proto3" json:"hportalInitialized,omitempty"`
	StartupStatus      *StartupStatus       `protobuf:"bytes,4,opt,name=startupStatus,proto3" json:"startupStatus,omitempty"`
	ShutdownReason     ShutdownReasonType   `protobuf:"varint,5,opt,name=shutdownReason,proto3,enum=cloud.lazycat.apis.sys.ShutdownReasonType" json:"shutdownReason,omitempty"`
}

func (x *BoxStatus) Reset() {
	*x = BoxStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sys_box_status_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoxStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoxStatus) ProtoMessage() {}

func (x *BoxStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sys_box_status_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoxStatus.ProtoReflect.Descriptor instead.
func (*BoxStatus) Descriptor() ([]byte, []int) {
	return file_sys_box_status_proto_rawDescGZIP(), []int{6}
}

func (x *BoxStatus) GetDataPartition() *DataPartitionStatus {
	if x != nil {
		return x.DataPartition
	}
	return nil
}

func (x *BoxStatus) GetHasInternet() bool {
	if x != nil {
		return x.HasInternet
	}
	return false
}

func (x *BoxStatus) GetHportalInitialized() bool {
	if x != nil {
		return x.HportalInitialized
	}
	return false
}

func (x *BoxStatus) GetStartupStatus() *StartupStatus {
	if x != nil {
		return x.StartupStatus
	}
	return nil
}

func (x *BoxStatus) GetShutdownReason() ShutdownReasonType {
	if x != nil {
		return x.ShutdownReason
	}
	return ShutdownReasonType_SHUTDOWN_REASON_NORMAL
}

var File_sys_box_status_proto protoreflect.FileDescriptor

var file_sys_box_status_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x79, 0x73, 0x2f, 0x62, 0x6f, 0x78, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61,
	0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x0d, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0a,
	0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x3b,
	0x0a, 0x05, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x13,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79,
	0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x09,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x79, 0x73,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x42, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x2d, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73,
	0x79, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x09,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd1,
	0x02, 0x0a, 0x09, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79,
	0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x79,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52,
	0x0a, 0x0e, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c,
	0x61, 0x7a, 0x79, 0x63, 0x61, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x2e,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x2a, 0xc5, 0x01, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0xdc, 0x01, 0x0a, 0x1a, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x53, 0x42, 0x4c, 0x4b, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x28, 0x0a, 0x24, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x81, 0x01, 0x0a, 0x11, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55,
	0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x91, 0x02,
	0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55,
	0x50, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x55, 0x50, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x41,
	0x50, 0x50, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x06, 0x2a, 0x85, 0x01, 0x0a, 0x12, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x48, 0x55, 0x54,
	0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41,
	0x42, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x03, 0x32, 0xf5, 0x01, 0x0a, 0x10, 0x42, 0x6f,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x2e, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x69, 0x73, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x4e, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x12, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x63, 0x61, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69,
	0x73, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c,
	0x69, 0x6e, 0x61, 0x6b, 0x65, 0x73, 0x69, 0x2f, 0x6c, 0x7a, 0x63, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x79, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_sys_box_status_proto_rawDescOnce sync.Once
	file_sys_box_status_proto_rawDescData = file_sys_box_status_proto_rawDesc
)

func file_sys_box_status_proto_rawDescGZIP() []byte {
	file_sys_box_status_proto_rawDescOnce.Do(func() {
		file_sys_box_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_sys_box_status_proto_rawDescData)
	})
	return file_sys_box_status_proto_rawDescData
}

var file_sys_box_status_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_sys_box_status_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_sys_box_status_proto_goTypes = []interface{}{
	(DataPartitionStatusType)(0),    // 0: cloud.lazycat.apis.sys.DataPartitionStatusType
	(DataPartitionExceptionType)(0), // 1: cloud.lazycat.apis.sys.DataPartitionExceptionType
	(StartupStatusType)(0),          // 2: cloud.lazycat.apis.sys.StartupStatusType
	(StartupExceptionType)(0),       // 3: cloud.lazycat.apis.sys.StartupExceptionType
	(ShutdownReasonType)(0),         // 4: cloud.lazycat.apis.sys.ShutdownReasonType
	(*DiskSmartInfo)(nil),           // 5: cloud.lazycat.apis.sys.DiskSmartInfo
	(*DiskDetail)(nil),              // 6: cloud.lazycat.apis.sys.DiskDetail
	(*DataPartitionStatus)(nil),     // 7: cloud.lazycat.apis.sys.DataPartitionStatus
	(*DataDiskFormat)(nil),          // 8: cloud.lazycat.apis.sys.DataDiskFormat
	(*DataDiskDecrypt)(nil),         // 9: cloud.lazycat.apis.sys.DataDiskDecrypt
	(*StartupStatus)(nil),           // 10: cloud.lazycat.apis.sys.StartupStatus
	(*BoxStatus)(nil),               // 11: cloud.lazycat.apis.sys.BoxStatus
	(*emptypb.Empty)(nil),           // 12: google.protobuf.Empty
}
var file_sys_box_status_proto_depIdxs = []int32{
	5,  // 0: cloud.lazycat.apis.sys.DiskDetail.smart:type_name -> cloud.lazycat.apis.sys.DiskSmartInfo
	0,  // 1: cloud.lazycat.apis.sys.DataPartitionStatus.status:type_name -> cloud.lazycat.apis.sys.DataPartitionStatusType
	1,  // 2: cloud.lazycat.apis.sys.DataPartitionStatus.exception:type_name -> cloud.lazycat.apis.sys.DataPartitionExceptionType
	6,  // 3: cloud.lazycat.apis.sys.DataPartitionStatus.details:type_name -> cloud.lazycat.apis.sys.DiskDetail
	2,  // 4: cloud.lazycat.apis.sys.StartupStatus.status:type_name -> cloud.lazycat.apis.sys.StartupStatusType
	3,  // 5: cloud.lazycat.apis.sys.StartupStatus.exception:type_name -> cloud.lazycat.apis.sys.StartupExceptionType
	7,  // 6: cloud.lazycat.apis.sys.BoxStatus.dataPartition:type_name -> cloud.lazycat.apis.sys.DataPartitionStatus
	10, // 7: cloud.lazycat.apis.sys.BoxStatus.startupStatus:type_name -> cloud.lazycat.apis.sys.StartupStatus
	4,  // 8: cloud.lazycat.apis.sys.BoxStatus.shutdownReason:type_name -> cloud.lazycat.apis.sys.ShutdownReasonType
	12, // 9: cloud.lazycat.apis.sys.BoxStatusService.GetAll:input_type -> google.protobuf.Empty
	8,  // 10: cloud.lazycat.apis.sys.BoxStatusService.DataFormat:input_type -> cloud.lazycat.apis.sys.DataDiskFormat
	9,  // 11: cloud.lazycat.apis.sys.BoxStatusService.DataDecrypt:input_type -> cloud.lazycat.apis.sys.DataDiskDecrypt
	11, // 12: cloud.lazycat.apis.sys.BoxStatusService.GetAll:output_type -> cloud.lazycat.apis.sys.BoxStatus
	12, // 13: cloud.lazycat.apis.sys.BoxStatusService.DataFormat:output_type -> google.protobuf.Empty
	12, // 14: cloud.lazycat.apis.sys.BoxStatusService.DataDecrypt:output_type -> google.protobuf.Empty
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_sys_box_status_proto_init() }
func file_sys_box_status_proto_init() {
	if File_sys_box_status_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sys_box_status_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskSmartInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sys_box_status_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sys_box_status_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPartitionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sys_box_status_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataDiskFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sys_box_status_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataDiskDecrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sys_box_status_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartupStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sys_box_status_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoxStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sys_box_status_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sys_box_status_proto_goTypes,
		DependencyIndexes: file_sys_box_status_proto_depIdxs,
		EnumInfos:         file_sys_box_status_proto_enumTypes,
		MessageInfos:      file_sys_box_status_proto_msgTypes,
	}.Build()
	File_sys_box_status_proto = out.File
	file_sys_box_status_proto_rawDesc = nil
	file_sys_box_status_proto_goTypes = nil
	file_sys_box_status_proto_depIdxs = nil
}
