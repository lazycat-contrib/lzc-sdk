// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: sys/btrfsutil.proto

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BtrfsSubvolUtilClient is the client API for BtrfsSubvolUtil service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BtrfsSubvolUtilClient interface {
	Register(ctx context.Context, in *BtrfsSubvolUtilRegisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Probe(ctx context.Context, in *BtrfsSubvolUtilProbeRequest, opts ...grpc.CallOption) (*BtrfsSubvolUtilProbeResponse, error)
	FindNew(ctx context.Context, in *BtrfsSubvolUtilFindNewRequest, opts ...grpc.CallOption) (*BtrfsSubvolUtilFindNewResponse, error)
}

type btrfsSubvolUtilClient struct {
	cc grpc.ClientConnInterface
}

func NewBtrfsSubvolUtilClient(cc grpc.ClientConnInterface) BtrfsSubvolUtilClient {
	return &btrfsSubvolUtilClient{cc}
}

func (c *btrfsSubvolUtilClient) Register(ctx context.Context, in *BtrfsSubvolUtilRegisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.BtrfsSubvolUtil/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btrfsSubvolUtilClient) Probe(ctx context.Context, in *BtrfsSubvolUtilProbeRequest, opts ...grpc.CallOption) (*BtrfsSubvolUtilProbeResponse, error) {
	out := new(BtrfsSubvolUtilProbeResponse)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.BtrfsSubvolUtil/Probe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btrfsSubvolUtilClient) FindNew(ctx context.Context, in *BtrfsSubvolUtilFindNewRequest, opts ...grpc.CallOption) (*BtrfsSubvolUtilFindNewResponse, error) {
	out := new(BtrfsSubvolUtilFindNewResponse)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.BtrfsSubvolUtil/FindNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BtrfsSubvolUtilServer is the server API for BtrfsSubvolUtil service.
// All implementations must embed UnimplementedBtrfsSubvolUtilServer
// for forward compatibility
type BtrfsSubvolUtilServer interface {
	Register(context.Context, *BtrfsSubvolUtilRegisterRequest) (*emptypb.Empty, error)
	Probe(context.Context, *BtrfsSubvolUtilProbeRequest) (*BtrfsSubvolUtilProbeResponse, error)
	FindNew(context.Context, *BtrfsSubvolUtilFindNewRequest) (*BtrfsSubvolUtilFindNewResponse, error)
	mustEmbedUnimplementedBtrfsSubvolUtilServer()
}

// UnimplementedBtrfsSubvolUtilServer must be embedded to have forward compatible implementations.
type UnimplementedBtrfsSubvolUtilServer struct {
}

func (UnimplementedBtrfsSubvolUtilServer) Register(context.Context, *BtrfsSubvolUtilRegisterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedBtrfsSubvolUtilServer) Probe(context.Context, *BtrfsSubvolUtilProbeRequest) (*BtrfsSubvolUtilProbeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Probe not implemented")
}
func (UnimplementedBtrfsSubvolUtilServer) FindNew(context.Context, *BtrfsSubvolUtilFindNewRequest) (*BtrfsSubvolUtilFindNewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNew not implemented")
}
func (UnimplementedBtrfsSubvolUtilServer) mustEmbedUnimplementedBtrfsSubvolUtilServer() {}

// UnsafeBtrfsSubvolUtilServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BtrfsSubvolUtilServer will
// result in compilation errors.
type UnsafeBtrfsSubvolUtilServer interface {
	mustEmbedUnimplementedBtrfsSubvolUtilServer()
}

func RegisterBtrfsSubvolUtilServer(s grpc.ServiceRegistrar, srv BtrfsSubvolUtilServer) {
	s.RegisterService(&BtrfsSubvolUtil_ServiceDesc, srv)
}

func _BtrfsSubvolUtil_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BtrfsSubvolUtilRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtrfsSubvolUtilServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.BtrfsSubvolUtil/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtrfsSubvolUtilServer).Register(ctx, req.(*BtrfsSubvolUtilRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BtrfsSubvolUtil_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BtrfsSubvolUtilProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtrfsSubvolUtilServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.BtrfsSubvolUtil/Probe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtrfsSubvolUtilServer).Probe(ctx, req.(*BtrfsSubvolUtilProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BtrfsSubvolUtil_FindNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BtrfsSubvolUtilFindNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtrfsSubvolUtilServer).FindNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.BtrfsSubvolUtil/FindNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtrfsSubvolUtilServer).FindNew(ctx, req.(*BtrfsSubvolUtilFindNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BtrfsSubvolUtil_ServiceDesc is the grpc.ServiceDesc for BtrfsSubvolUtil service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BtrfsSubvolUtil_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.BtrfsSubvolUtil",
	HandlerType: (*BtrfsSubvolUtilServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _BtrfsSubvolUtil_Register_Handler,
		},
		{
			MethodName: "Probe",
			Handler:    _BtrfsSubvolUtil_Probe_Handler,
		},
		{
			MethodName: "FindNew",
			Handler:    _BtrfsSubvolUtil_FindNew_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys/btrfsutil.proto",
}
