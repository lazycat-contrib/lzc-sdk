// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: sys/snapd.proto

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnapdServiceClient is the client API for SnapdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapdServiceClient interface {
	// 启用备份
	SnapdEnable(ctx context.Context, in *SnapdEnableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 禁用备份
	SnapdDisable(ctx context.Context, in *SnapdTargetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取快照备份配置
	SnapdConfGet(ctx context.Context, in *SnapdTargetRequest, opts ...grpc.CallOption) (*SnapdConf, error)
	// 修改快照备份配置
	SnapdConfSet(ctx context.Context, in *SnapdConfSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 列举快照信息
	SnapdListSnap(ctx context.Context, in *SnapdListSnapRequest, opts ...grpc.CallOption) (*SnapdListSnapResponse, error)
	// 手动创建快照/备份。以该方式创建的快照/备份会被自动策略忽略
	SnapdTakeSnap(ctx context.Context, in *SnapdSnapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 手动删除快照。目标快照可以是通过自动策略创建的，也可以是手动创建的
	SnapdDelSnap(ctx context.Context, in *SnapdSnapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 将数据回滚到指定快照
	SnapdRestoreSnap(ctx context.Context, in *SnapdSnapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type snapdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapdServiceClient(cc grpc.ClientConnInterface) SnapdServiceClient {
	return &snapdServiceClient{cc}
}

func (c *snapdServiceClient) SnapdEnable(ctx context.Context, in *SnapdEnableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdDisable(ctx context.Context, in *SnapdTargetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdDisable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdConfGet(ctx context.Context, in *SnapdTargetRequest, opts ...grpc.CallOption) (*SnapdConf, error) {
	out := new(SnapdConf)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdConfGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdConfSet(ctx context.Context, in *SnapdConfSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdConfSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdListSnap(ctx context.Context, in *SnapdListSnapRequest, opts ...grpc.CallOption) (*SnapdListSnapResponse, error) {
	out := new(SnapdListSnapResponse)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdListSnap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdTakeSnap(ctx context.Context, in *SnapdSnapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdTakeSnap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdDelSnap(ctx context.Context, in *SnapdSnapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdDelSnap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdRestoreSnap(ctx context.Context, in *SnapdSnapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdRestoreSnap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapdServiceServer is the server API for SnapdService service.
// All implementations must embed UnimplementedSnapdServiceServer
// for forward compatibility
type SnapdServiceServer interface {
	// 启用备份
	SnapdEnable(context.Context, *SnapdEnableRequest) (*emptypb.Empty, error)
	// 禁用备份
	SnapdDisable(context.Context, *SnapdTargetRequest) (*emptypb.Empty, error)
	// 获取快照备份配置
	SnapdConfGet(context.Context, *SnapdTargetRequest) (*SnapdConf, error)
	// 修改快照备份配置
	SnapdConfSet(context.Context, *SnapdConfSetRequest) (*emptypb.Empty, error)
	// 列举快照信息
	SnapdListSnap(context.Context, *SnapdListSnapRequest) (*SnapdListSnapResponse, error)
	// 手动创建快照/备份。以该方式创建的快照/备份会被自动策略忽略
	SnapdTakeSnap(context.Context, *SnapdSnapRequest) (*emptypb.Empty, error)
	// 手动删除快照。目标快照可以是通过自动策略创建的，也可以是手动创建的
	SnapdDelSnap(context.Context, *SnapdSnapRequest) (*emptypb.Empty, error)
	// 将数据回滚到指定快照
	SnapdRestoreSnap(context.Context, *SnapdSnapRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSnapdServiceServer()
}

// UnimplementedSnapdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnapdServiceServer struct {
}

func (UnimplementedSnapdServiceServer) SnapdEnable(context.Context, *SnapdEnableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdEnable not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdDisable(context.Context, *SnapdTargetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdDisable not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdConfGet(context.Context, *SnapdTargetRequest) (*SnapdConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdConfGet not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdConfSet(context.Context, *SnapdConfSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdConfSet not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdListSnap(context.Context, *SnapdListSnapRequest) (*SnapdListSnapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdListSnap not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdTakeSnap(context.Context, *SnapdSnapRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdTakeSnap not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdDelSnap(context.Context, *SnapdSnapRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdDelSnap not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdRestoreSnap(context.Context, *SnapdSnapRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdRestoreSnap not implemented")
}
func (UnimplementedSnapdServiceServer) mustEmbedUnimplementedSnapdServiceServer() {}

// UnsafeSnapdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapdServiceServer will
// result in compilation errors.
type UnsafeSnapdServiceServer interface {
	mustEmbedUnimplementedSnapdServiceServer()
}

func RegisterSnapdServiceServer(s grpc.ServiceRegistrar, srv SnapdServiceServer) {
	s.RegisterService(&SnapdService_ServiceDesc, srv)
}

func _SnapdService_SnapdEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdEnableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdEnable(ctx, req.(*SnapdEnableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdDisable(ctx, req.(*SnapdTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdConfGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdConfGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdConfGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdConfGet(ctx, req.(*SnapdTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdConfSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdConfSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdConfSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdConfSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdConfSet(ctx, req.(*SnapdConfSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdListSnap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdListSnapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdListSnap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdListSnap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdListSnap(ctx, req.(*SnapdListSnapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdTakeSnap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdSnapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdTakeSnap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdTakeSnap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdTakeSnap(ctx, req.(*SnapdSnapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdDelSnap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdSnapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdDelSnap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdDelSnap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdDelSnap(ctx, req.(*SnapdSnapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdRestoreSnap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdSnapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdRestoreSnap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdRestoreSnap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdRestoreSnap(ctx, req.(*SnapdSnapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnapdService_ServiceDesc is the grpc.ServiceDesc for SnapdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.SnapdService",
	HandlerType: (*SnapdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SnapdEnable",
			Handler:    _SnapdService_SnapdEnable_Handler,
		},
		{
			MethodName: "SnapdDisable",
			Handler:    _SnapdService_SnapdDisable_Handler,
		},
		{
			MethodName: "SnapdConfGet",
			Handler:    _SnapdService_SnapdConfGet_Handler,
		},
		{
			MethodName: "SnapdConfSet",
			Handler:    _SnapdService_SnapdConfSet_Handler,
		},
		{
			MethodName: "SnapdListSnap",
			Handler:    _SnapdService_SnapdListSnap_Handler,
		},
		{
			MethodName: "SnapdTakeSnap",
			Handler:    _SnapdService_SnapdTakeSnap_Handler,
		},
		{
			MethodName: "SnapdDelSnap",
			Handler:    _SnapdService_SnapdDelSnap_Handler,
		},
		{
			MethodName: "SnapdRestoreSnap",
			Handler:    _SnapdService_SnapdRestoreSnap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys/snapd.proto",
}
