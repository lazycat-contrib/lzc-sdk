// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: sys/snapd.proto

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnapdServiceClient is the client API for SnapdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapdServiceClient interface {
	// 启用备份
	SnapdEnable(ctx context.Context, in *SnapdEnableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 禁用备份
	SnapdDisable(ctx context.Context, in *SnapdTargetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取快照备份配置
	SnapdConfGet(ctx context.Context, in *SnapdTargetRequest, opts ...grpc.CallOption) (*SnapdConf, error)
	// 修改快照备份配置
	SnapdConfSet(ctx context.Context, in *SnapdConfSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 注册备份池
	SnapdPoolAdd(ctx context.Context, in *SnapdPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取消注册备份池
	SnapdPoolDel(ctx context.Context, in *SnapdPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 列举已注册的备份池
	SnapdPoolList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SnapdPoolListResponse, error)
	// 列举快照信息
	SnapdSnapList(ctx context.Context, in *SnapdListSnapRequest, opts ...grpc.CallOption) (*SnapdListSnapResponse, error)
	// 手动创建快照/备份。以该方式创建的快照/备份会被自动策略忽略
	SnapdSnapAdd(ctx context.Context, in *SnapdSnapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 手动删除快照。目标快照可以是通过自动策略创建的，也可以是手动创建的
	SnapdSnapDel(ctx context.Context, in *SnapdSnapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 将数据回滚到指定快照
	SnapdSnapRestore(ctx context.Context, in *SnapdSnapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type snapdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapdServiceClient(cc grpc.ClientConnInterface) SnapdServiceClient {
	return &snapdServiceClient{cc}
}

func (c *snapdServiceClient) SnapdEnable(ctx context.Context, in *SnapdEnableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdDisable(ctx context.Context, in *SnapdTargetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdDisable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdConfGet(ctx context.Context, in *SnapdTargetRequest, opts ...grpc.CallOption) (*SnapdConf, error) {
	out := new(SnapdConf)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdConfGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdConfSet(ctx context.Context, in *SnapdConfSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdConfSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdPoolAdd(ctx context.Context, in *SnapdPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdPoolAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdPoolDel(ctx context.Context, in *SnapdPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdPoolDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdPoolList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SnapdPoolListResponse, error) {
	out := new(SnapdPoolListResponse)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdPoolList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdSnapList(ctx context.Context, in *SnapdListSnapRequest, opts ...grpc.CallOption) (*SnapdListSnapResponse, error) {
	out := new(SnapdListSnapResponse)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdSnapList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdSnapAdd(ctx context.Context, in *SnapdSnapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdSnapAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdSnapDel(ctx context.Context, in *SnapdSnapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdSnapDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapdServiceClient) SnapdSnapRestore(ctx context.Context, in *SnapdSnapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.sys.SnapdService/SnapdSnapRestore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapdServiceServer is the server API for SnapdService service.
// All implementations must embed UnimplementedSnapdServiceServer
// for forward compatibility
type SnapdServiceServer interface {
	// 启用备份
	SnapdEnable(context.Context, *SnapdEnableRequest) (*emptypb.Empty, error)
	// 禁用备份
	SnapdDisable(context.Context, *SnapdTargetRequest) (*emptypb.Empty, error)
	// 获取快照备份配置
	SnapdConfGet(context.Context, *SnapdTargetRequest) (*SnapdConf, error)
	// 修改快照备份配置
	SnapdConfSet(context.Context, *SnapdConfSetRequest) (*emptypb.Empty, error)
	// 注册备份池
	SnapdPoolAdd(context.Context, *SnapdPoolRequest) (*emptypb.Empty, error)
	// 取消注册备份池
	SnapdPoolDel(context.Context, *SnapdPoolRequest) (*emptypb.Empty, error)
	// 列举已注册的备份池
	SnapdPoolList(context.Context, *emptypb.Empty) (*SnapdPoolListResponse, error)
	// 列举快照信息
	SnapdSnapList(context.Context, *SnapdListSnapRequest) (*SnapdListSnapResponse, error)
	// 手动创建快照/备份。以该方式创建的快照/备份会被自动策略忽略
	SnapdSnapAdd(context.Context, *SnapdSnapRequest) (*emptypb.Empty, error)
	// 手动删除快照。目标快照可以是通过自动策略创建的，也可以是手动创建的
	SnapdSnapDel(context.Context, *SnapdSnapRequest) (*emptypb.Empty, error)
	// 将数据回滚到指定快照
	SnapdSnapRestore(context.Context, *SnapdSnapRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSnapdServiceServer()
}

// UnimplementedSnapdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnapdServiceServer struct {
}

func (UnimplementedSnapdServiceServer) SnapdEnable(context.Context, *SnapdEnableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdEnable not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdDisable(context.Context, *SnapdTargetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdDisable not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdConfGet(context.Context, *SnapdTargetRequest) (*SnapdConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdConfGet not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdConfSet(context.Context, *SnapdConfSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdConfSet not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdPoolAdd(context.Context, *SnapdPoolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdPoolAdd not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdPoolDel(context.Context, *SnapdPoolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdPoolDel not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdPoolList(context.Context, *emptypb.Empty) (*SnapdPoolListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdPoolList not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdSnapList(context.Context, *SnapdListSnapRequest) (*SnapdListSnapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdSnapList not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdSnapAdd(context.Context, *SnapdSnapRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdSnapAdd not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdSnapDel(context.Context, *SnapdSnapRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdSnapDel not implemented")
}
func (UnimplementedSnapdServiceServer) SnapdSnapRestore(context.Context, *SnapdSnapRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapdSnapRestore not implemented")
}
func (UnimplementedSnapdServiceServer) mustEmbedUnimplementedSnapdServiceServer() {}

// UnsafeSnapdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapdServiceServer will
// result in compilation errors.
type UnsafeSnapdServiceServer interface {
	mustEmbedUnimplementedSnapdServiceServer()
}

func RegisterSnapdServiceServer(s grpc.ServiceRegistrar, srv SnapdServiceServer) {
	s.RegisterService(&SnapdService_ServiceDesc, srv)
}

func _SnapdService_SnapdEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdEnableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdEnable(ctx, req.(*SnapdEnableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdDisable(ctx, req.(*SnapdTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdConfGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdConfGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdConfGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdConfGet(ctx, req.(*SnapdTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdConfSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdConfSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdConfSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdConfSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdConfSet(ctx, req.(*SnapdConfSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdPoolAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdPoolAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdPoolAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdPoolAdd(ctx, req.(*SnapdPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdPoolDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdPoolDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdPoolDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdPoolDel(ctx, req.(*SnapdPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdPoolList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdPoolList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdPoolList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdPoolList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdSnapList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdListSnapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdSnapList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdSnapList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdSnapList(ctx, req.(*SnapdListSnapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdSnapAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdSnapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdSnapAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdSnapAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdSnapAdd(ctx, req.(*SnapdSnapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdSnapDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdSnapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdSnapDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdSnapDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdSnapDel(ctx, req.(*SnapdSnapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapdService_SnapdSnapRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapdSnapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapdServiceServer).SnapdSnapRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.sys.SnapdService/SnapdSnapRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapdServiceServer).SnapdSnapRestore(ctx, req.(*SnapdSnapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnapdService_ServiceDesc is the grpc.ServiceDesc for SnapdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.sys.SnapdService",
	HandlerType: (*SnapdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SnapdEnable",
			Handler:    _SnapdService_SnapdEnable_Handler,
		},
		{
			MethodName: "SnapdDisable",
			Handler:    _SnapdService_SnapdDisable_Handler,
		},
		{
			MethodName: "SnapdConfGet",
			Handler:    _SnapdService_SnapdConfGet_Handler,
		},
		{
			MethodName: "SnapdConfSet",
			Handler:    _SnapdService_SnapdConfSet_Handler,
		},
		{
			MethodName: "SnapdPoolAdd",
			Handler:    _SnapdService_SnapdPoolAdd_Handler,
		},
		{
			MethodName: "SnapdPoolDel",
			Handler:    _SnapdService_SnapdPoolDel_Handler,
		},
		{
			MethodName: "SnapdPoolList",
			Handler:    _SnapdService_SnapdPoolList_Handler,
		},
		{
			MethodName: "SnapdSnapList",
			Handler:    _SnapdService_SnapdSnapList_Handler,
		},
		{
			MethodName: "SnapdSnapAdd",
			Handler:    _SnapdService_SnapdSnapAdd_Handler,
		},
		{
			MethodName: "SnapdSnapDel",
			Handler:    _SnapdService_SnapdSnapDel_Handler,
		},
		{
			MethodName: "SnapdSnapRestore",
			Handler:    _SnapdService_SnapdSnapRestore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys/snapd.proto",
}
