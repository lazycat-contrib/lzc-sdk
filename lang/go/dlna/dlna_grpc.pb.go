// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: dlna/dlna.proto

package dlna

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteMediaPlayerServiceClient is the client API for RemoteMediaPlayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteMediaPlayerServiceClient interface {
	ScanRMP(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ScanRMPResponse, error)
	// 立刻返回选择的当前RMP状态，并在状态变动时重新发送
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (RemoteMediaPlayerService_SubscribeClient, error)
	DoAction(ctx context.Context, in *DoActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPositionInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PositionInfo, error)
}

type remoteMediaPlayerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteMediaPlayerServiceClient(cc grpc.ClientConnInterface) RemoteMediaPlayerServiceClient {
	return &remoteMediaPlayerServiceClient{cc}
}

func (c *remoteMediaPlayerServiceClient) ScanRMP(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ScanRMPResponse, error) {
	out := new(ScanRMPResponse)
	err := c.cc.Invoke(ctx, "/lzc.dlna.RemoteMediaPlayerService/ScanRMP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteMediaPlayerServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (RemoteMediaPlayerService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RemoteMediaPlayerService_ServiceDesc.Streams[0], "/lzc.dlna.RemoteMediaPlayerService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteMediaPlayerServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemoteMediaPlayerService_SubscribeClient interface {
	Recv() (*RMPStatus, error)
	grpc.ClientStream
}

type remoteMediaPlayerServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *remoteMediaPlayerServiceSubscribeClient) Recv() (*RMPStatus, error) {
	m := new(RMPStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoteMediaPlayerServiceClient) DoAction(ctx context.Context, in *DoActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/lzc.dlna.RemoteMediaPlayerService/DoAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteMediaPlayerServiceClient) GetPositionInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PositionInfo, error) {
	out := new(PositionInfo)
	err := c.cc.Invoke(ctx, "/lzc.dlna.RemoteMediaPlayerService/GetPositionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteMediaPlayerServiceServer is the server API for RemoteMediaPlayerService service.
// All implementations must embed UnimplementedRemoteMediaPlayerServiceServer
// for forward compatibility
type RemoteMediaPlayerServiceServer interface {
	ScanRMP(context.Context, *emptypb.Empty) (*ScanRMPResponse, error)
	// 立刻返回选择的当前RMP状态，并在状态变动时重新发送
	Subscribe(*SubscribeRequest, RemoteMediaPlayerService_SubscribeServer) error
	DoAction(context.Context, *DoActionRequest) (*emptypb.Empty, error)
	GetPositionInfo(context.Context, *emptypb.Empty) (*PositionInfo, error)
	mustEmbedUnimplementedRemoteMediaPlayerServiceServer()
}

// UnimplementedRemoteMediaPlayerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteMediaPlayerServiceServer struct {
}

func (UnimplementedRemoteMediaPlayerServiceServer) ScanRMP(context.Context, *emptypb.Empty) (*ScanRMPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanRMP not implemented")
}
func (UnimplementedRemoteMediaPlayerServiceServer) Subscribe(*SubscribeRequest, RemoteMediaPlayerService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedRemoteMediaPlayerServiceServer) DoAction(context.Context, *DoActionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoAction not implemented")
}
func (UnimplementedRemoteMediaPlayerServiceServer) GetPositionInfo(context.Context, *emptypb.Empty) (*PositionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionInfo not implemented")
}
func (UnimplementedRemoteMediaPlayerServiceServer) mustEmbedUnimplementedRemoteMediaPlayerServiceServer() {
}

// UnsafeRemoteMediaPlayerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteMediaPlayerServiceServer will
// result in compilation errors.
type UnsafeRemoteMediaPlayerServiceServer interface {
	mustEmbedUnimplementedRemoteMediaPlayerServiceServer()
}

func RegisterRemoteMediaPlayerServiceServer(s grpc.ServiceRegistrar, srv RemoteMediaPlayerServiceServer) {
	s.RegisterService(&RemoteMediaPlayerService_ServiceDesc, srv)
}

func _RemoteMediaPlayerService_ScanRMP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteMediaPlayerServiceServer).ScanRMP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lzc.dlna.RemoteMediaPlayerService/ScanRMP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteMediaPlayerServiceServer).ScanRMP(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteMediaPlayerService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemoteMediaPlayerServiceServer).Subscribe(m, &remoteMediaPlayerServiceSubscribeServer{stream})
}

type RemoteMediaPlayerService_SubscribeServer interface {
	Send(*RMPStatus) error
	grpc.ServerStream
}

type remoteMediaPlayerServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *remoteMediaPlayerServiceSubscribeServer) Send(m *RMPStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _RemoteMediaPlayerService_DoAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteMediaPlayerServiceServer).DoAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lzc.dlna.RemoteMediaPlayerService/DoAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteMediaPlayerServiceServer).DoAction(ctx, req.(*DoActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteMediaPlayerService_GetPositionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteMediaPlayerServiceServer).GetPositionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lzc.dlna.RemoteMediaPlayerService/GetPositionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteMediaPlayerServiceServer).GetPositionInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteMediaPlayerService_ServiceDesc is the grpc.ServiceDesc for RemoteMediaPlayerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteMediaPlayerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lzc.dlna.RemoteMediaPlayerService",
	HandlerType: (*RemoteMediaPlayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanRMP",
			Handler:    _RemoteMediaPlayerService_ScanRMP_Handler,
		},
		{
			MethodName: "DoAction",
			Handler:    _RemoteMediaPlayerService_DoAction_Handler,
		},
		{
			MethodName: "GetPositionInfo",
			Handler:    _RemoteMediaPlayerService_GetPositionInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _RemoteMediaPlayerService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dlna/dlna.proto",
}
