// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: lanforward/lanforward.proto

package lanforward

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LanForwardServiceClient is the client API for LanForwardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LanForwardServiceClient interface {
	//将特定service的特定端口上的http服务转发到局域网可直接访问的地址上，
	//返回被代理后的url. (实际使用时，需要使用此url拼接最终服务)
	//
	//请求者需要主动关闭此请求以便停止相关服务
	Forward(ctx context.Context, in *ForwardRequest, opts ...grpc.CallOption) (LanForwardService_ForwardClient, error)
}

type lanForwardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLanForwardServiceClient(cc grpc.ClientConnInterface) LanForwardServiceClient {
	return &lanForwardServiceClient{cc}
}

func (c *lanForwardServiceClient) Forward(ctx context.Context, in *ForwardRequest, opts ...grpc.CallOption) (LanForwardService_ForwardClient, error) {
	stream, err := c.cc.NewStream(ctx, &LanForwardService_ServiceDesc.Streams[0], "/lzc.lanforward.LanForwardService/Forward", opts...)
	if err != nil {
		return nil, err
	}
	x := &lanForwardServiceForwardClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LanForwardService_ForwardClient interface {
	Recv() (*ForwardResponse, error)
	grpc.ClientStream
}

type lanForwardServiceForwardClient struct {
	grpc.ClientStream
}

func (x *lanForwardServiceForwardClient) Recv() (*ForwardResponse, error) {
	m := new(ForwardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LanForwardServiceServer is the server API for LanForwardService service.
// All implementations must embed UnimplementedLanForwardServiceServer
// for forward compatibility
type LanForwardServiceServer interface {
	//将特定service的特定端口上的http服务转发到局域网可直接访问的地址上，
	//返回被代理后的url. (实际使用时，需要使用此url拼接最终服务)
	//
	//请求者需要主动关闭此请求以便停止相关服务
	Forward(*ForwardRequest, LanForwardService_ForwardServer) error
	mustEmbedUnimplementedLanForwardServiceServer()
}

// UnimplementedLanForwardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLanForwardServiceServer struct {
}

func (UnimplementedLanForwardServiceServer) Forward(*ForwardRequest, LanForwardService_ForwardServer) error {
	return status.Errorf(codes.Unimplemented, "method Forward not implemented")
}
func (UnimplementedLanForwardServiceServer) mustEmbedUnimplementedLanForwardServiceServer() {}

// UnsafeLanForwardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanForwardServiceServer will
// result in compilation errors.
type UnsafeLanForwardServiceServer interface {
	mustEmbedUnimplementedLanForwardServiceServer()
}

func RegisterLanForwardServiceServer(s grpc.ServiceRegistrar, srv LanForwardServiceServer) {
	s.RegisterService(&LanForwardService_ServiceDesc, srv)
}

func _LanForwardService_Forward_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ForwardRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LanForwardServiceServer).Forward(m, &lanForwardServiceForwardServer{stream})
}

type LanForwardService_ForwardServer interface {
	Send(*ForwardResponse) error
	grpc.ServerStream
}

type lanForwardServiceForwardServer struct {
	grpc.ServerStream
}

func (x *lanForwardServiceForwardServer) Send(m *ForwardResponse) error {
	return x.ServerStream.SendMsg(m)
}

// LanForwardService_ServiceDesc is the grpc.ServiceDesc for LanForwardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LanForwardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lzc.lanforward.LanForwardService",
	HandlerType: (*LanForwardServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Forward",
			Handler:       _LanForwardService_Forward_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lanforward/lanforward.proto",
}
