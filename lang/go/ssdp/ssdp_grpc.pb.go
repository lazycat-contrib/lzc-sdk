// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: ssdp/ssdp.proto

package ssdp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SSDPServiceClient is the client API for SSDPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSDPServiceClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (SSDPService_SearchClient, error)
}

type sSDPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSSDPServiceClient(cc grpc.ClientConnInterface) SSDPServiceClient {
	return &sSDPServiceClient{cc}
}

func (c *sSDPServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (SSDPService_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &SSDPService_ServiceDesc.Streams[0], "/lzc.ssdp.SSDPService/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &sSDPServiceSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SSDPService_SearchClient interface {
	Recv() (*Service, error)
	grpc.ClientStream
}

type sSDPServiceSearchClient struct {
	grpc.ClientStream
}

func (x *sSDPServiceSearchClient) Recv() (*Service, error) {
	m := new(Service)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SSDPServiceServer is the server API for SSDPService service.
// All implementations must embed UnimplementedSSDPServiceServer
// for forward compatibility
type SSDPServiceServer interface {
	Search(*SearchRequest, SSDPService_SearchServer) error
	mustEmbedUnimplementedSSDPServiceServer()
}

// UnimplementedSSDPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSSDPServiceServer struct {
}

func (UnimplementedSSDPServiceServer) Search(*SearchRequest, SSDPService_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSSDPServiceServer) mustEmbedUnimplementedSSDPServiceServer() {}

// UnsafeSSDPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSDPServiceServer will
// result in compilation errors.
type UnsafeSSDPServiceServer interface {
	mustEmbedUnimplementedSSDPServiceServer()
}

func RegisterSSDPServiceServer(s grpc.ServiceRegistrar, srv SSDPServiceServer) {
	s.RegisterService(&SSDPService_ServiceDesc, srv)
}

func _SSDPService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SSDPServiceServer).Search(m, &sSDPServiceSearchServer{stream})
}

type SSDPService_SearchServer interface {
	Send(*Service) error
	grpc.ServerStream
}

type sSDPServiceSearchServer struct {
	grpc.ServerStream
}

func (x *sSDPServiceSearchServer) Send(m *Service) error {
	return x.ServerStream.SendMsg(m)
}

// SSDPService_ServiceDesc is the grpc.ServiceDesc for SSDPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSDPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lzc.ssdp.SSDPService",
	HandlerType: (*SSDPServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _SSDPService_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ssdp/ssdp.proto",
}
