// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: browseronly/browseronly.proto

package browseronly

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrowserOnlyClient is the client API for BrowserOnly service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrowserOnlyClient interface {
	// 查询当前登陆用户对应信息
	QueryUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserInfo, error)
	// 查询当前访问的lzcapp对应信息
	QueryAppInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AppInfo, error)
}

type browserOnlyClient struct {
	cc grpc.ClientConnInterface
}

func NewBrowserOnlyClient(cc grpc.ClientConnInterface) BrowserOnlyClient {
	return &browserOnlyClient{cc}
}

func (c *browserOnlyClient) QueryUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.BrowserOnly/QueryUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserOnlyClient) QueryAppInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AppInfo, error) {
	out := new(AppInfo)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.BrowserOnly/QueryAppInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrowserOnlyServer is the server API for BrowserOnly service.
// All implementations must embed UnimplementedBrowserOnlyServer
// for forward compatibility
type BrowserOnlyServer interface {
	// 查询当前登陆用户对应信息
	QueryUserInfo(context.Context, *emptypb.Empty) (*UserInfo, error)
	// 查询当前访问的lzcapp对应信息
	QueryAppInfo(context.Context, *emptypb.Empty) (*AppInfo, error)
	mustEmbedUnimplementedBrowserOnlyServer()
}

// UnimplementedBrowserOnlyServer must be embedded to have forward compatible implementations.
type UnimplementedBrowserOnlyServer struct {
}

func (UnimplementedBrowserOnlyServer) QueryUserInfo(context.Context, *emptypb.Empty) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserInfo not implemented")
}
func (UnimplementedBrowserOnlyServer) QueryAppInfo(context.Context, *emptypb.Empty) (*AppInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAppInfo not implemented")
}
func (UnimplementedBrowserOnlyServer) mustEmbedUnimplementedBrowserOnlyServer() {}

// UnsafeBrowserOnlyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrowserOnlyServer will
// result in compilation errors.
type UnsafeBrowserOnlyServer interface {
	mustEmbedUnimplementedBrowserOnlyServer()
}

func RegisterBrowserOnlyServer(s grpc.ServiceRegistrar, srv BrowserOnlyServer) {
	s.RegisterService(&BrowserOnly_ServiceDesc, srv)
}

func _BrowserOnly_QueryUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserOnlyServer).QueryUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.BrowserOnly/QueryUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserOnlyServer).QueryUserInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserOnly_QueryAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserOnlyServer).QueryAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.BrowserOnly/QueryAppInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserOnlyServer).QueryAppInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BrowserOnly_ServiceDesc is the grpc.ServiceDesc for BrowserOnly service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrowserOnly_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.BrowserOnly",
	HandlerType: (*BrowserOnlyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryUserInfo",
			Handler:    _BrowserOnly_QueryUserInfo_Handler,
		},
		{
			MethodName: "QueryAppInfo",
			Handler:    _BrowserOnly_QueryAppInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "browseronly/browseronly.proto",
}
