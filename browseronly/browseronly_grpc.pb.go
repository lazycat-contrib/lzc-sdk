// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: browseronly/browseronly.proto

package browseronly

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrowserOnlyProxyClient is the client API for BrowserOnlyProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrowserOnlyProxyClient interface {
	// 查询当前登陆用户对应信息
	QueryUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserInfo, error)
	// 查询当前访问的lzcapp对应信息
	QueryAppInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AppInfo, error)
	// 对devices.proto:_PairAllDeivces的自动封装
	PairAllDevices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (BrowserOnlyProxy_PairAllDevicesClient, error)
}

type browserOnlyProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewBrowserOnlyProxyClient(cc grpc.ClientConnInterface) BrowserOnlyProxyClient {
	return &browserOnlyProxyClient{cc}
}

func (c *browserOnlyProxyClient) QueryUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.BrowserOnlyProxy/QueryUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserOnlyProxyClient) QueryAppInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AppInfo, error) {
	out := new(AppInfo)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.BrowserOnlyProxy/QueryAppInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserOnlyProxyClient) PairAllDevices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (BrowserOnlyProxy_PairAllDevicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &BrowserOnlyProxy_ServiceDesc.Streams[0], "/cloud.lazycat.apis.BrowserOnlyProxy/PairAllDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &browserOnlyProxyPairAllDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BrowserOnlyProxy_PairAllDevicesClient interface {
	Recv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type browserOnlyProxyPairAllDevicesClient struct {
	grpc.ClientStream
}

func (x *browserOnlyProxyPairAllDevicesClient) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BrowserOnlyProxyServer is the server API for BrowserOnlyProxy service.
// All implementations must embed UnimplementedBrowserOnlyProxyServer
// for forward compatibility
type BrowserOnlyProxyServer interface {
	// 查询当前登陆用户对应信息
	QueryUserInfo(context.Context, *emptypb.Empty) (*UserInfo, error)
	// 查询当前访问的lzcapp对应信息
	QueryAppInfo(context.Context, *emptypb.Empty) (*AppInfo, error)
	// 对devices.proto:_PairAllDeivces的自动封装
	PairAllDevices(*emptypb.Empty, BrowserOnlyProxy_PairAllDevicesServer) error
	mustEmbedUnimplementedBrowserOnlyProxyServer()
}

// UnimplementedBrowserOnlyProxyServer must be embedded to have forward compatible implementations.
type UnimplementedBrowserOnlyProxyServer struct {
}

func (UnimplementedBrowserOnlyProxyServer) QueryUserInfo(context.Context, *emptypb.Empty) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserInfo not implemented")
}
func (UnimplementedBrowserOnlyProxyServer) QueryAppInfo(context.Context, *emptypb.Empty) (*AppInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAppInfo not implemented")
}
func (UnimplementedBrowserOnlyProxyServer) PairAllDevices(*emptypb.Empty, BrowserOnlyProxy_PairAllDevicesServer) error {
	return status.Errorf(codes.Unimplemented, "method PairAllDevices not implemented")
}
func (UnimplementedBrowserOnlyProxyServer) mustEmbedUnimplementedBrowserOnlyProxyServer() {}

// UnsafeBrowserOnlyProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrowserOnlyProxyServer will
// result in compilation errors.
type UnsafeBrowserOnlyProxyServer interface {
	mustEmbedUnimplementedBrowserOnlyProxyServer()
}

func RegisterBrowserOnlyProxyServer(s grpc.ServiceRegistrar, srv BrowserOnlyProxyServer) {
	s.RegisterService(&BrowserOnlyProxy_ServiceDesc, srv)
}

func _BrowserOnlyProxy_QueryUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserOnlyProxyServer).QueryUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.BrowserOnlyProxy/QueryUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserOnlyProxyServer).QueryUserInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserOnlyProxy_QueryAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserOnlyProxyServer).QueryAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.BrowserOnlyProxy/QueryAppInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserOnlyProxyServer).QueryAppInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserOnlyProxy_PairAllDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrowserOnlyProxyServer).PairAllDevices(m, &browserOnlyProxyPairAllDevicesServer{stream})
}

type BrowserOnlyProxy_PairAllDevicesServer interface {
	Send(*emptypb.Empty) error
	grpc.ServerStream
}

type browserOnlyProxyPairAllDevicesServer struct {
	grpc.ServerStream
}

func (x *browserOnlyProxyPairAllDevicesServer) Send(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

// BrowserOnlyProxy_ServiceDesc is the grpc.ServiceDesc for BrowserOnlyProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrowserOnlyProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.BrowserOnlyProxy",
	HandlerType: (*BrowserOnlyProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryUserInfo",
			Handler:    _BrowserOnlyProxy_QueryUserInfo_Handler,
		},
		{
			MethodName: "QueryAppInfo",
			Handler:    _BrowserOnlyProxy_QueryAppInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PairAllDevices",
			Handler:       _BrowserOnlyProxy_PairAllDevices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "browseronly/browseronly.proto",
}
