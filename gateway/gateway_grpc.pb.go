// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: gateway/gateway.proto

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIGatewayClient is the client API for APIGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIGatewayClient interface {
	QueryGatewayInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GatewayInfo, error)
	RegisterGRPCService(ctx context.Context, in *GRPCServiceInfo, opts ...grpc.CallOption) (*RegisterReply, error)
}

type aPIGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIGatewayClient(cc grpc.ClientConnInterface) APIGatewayClient {
	return &aPIGatewayClient{cc}
}

func (c *aPIGatewayClient) QueryGatewayInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GatewayInfo, error) {
	out := new(GatewayInfo)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.APIGateway/QueryGatewayInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayClient) RegisterGRPCService(ctx context.Context, in *GRPCServiceInfo, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/cloud.lazycat.apis.APIGateway/RegisterGRPCService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIGatewayServer is the server API for APIGateway service.
// All implementations must embed UnimplementedAPIGatewayServer
// for forward compatibility
type APIGatewayServer interface {
	QueryGatewayInfo(context.Context, *emptypb.Empty) (*GatewayInfo, error)
	RegisterGRPCService(context.Context, *GRPCServiceInfo) (*RegisterReply, error)
	mustEmbedUnimplementedAPIGatewayServer()
}

// UnimplementedAPIGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedAPIGatewayServer struct {
}

func (UnimplementedAPIGatewayServer) QueryGatewayInfo(context.Context, *emptypb.Empty) (*GatewayInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGatewayInfo not implemented")
}
func (UnimplementedAPIGatewayServer) RegisterGRPCService(context.Context, *GRPCServiceInfo) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGRPCService not implemented")
}
func (UnimplementedAPIGatewayServer) mustEmbedUnimplementedAPIGatewayServer() {}

// UnsafeAPIGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIGatewayServer will
// result in compilation errors.
type UnsafeAPIGatewayServer interface {
	mustEmbedUnimplementedAPIGatewayServer()
}

func RegisterAPIGatewayServer(s grpc.ServiceRegistrar, srv APIGatewayServer) {
	s.RegisterService(&APIGateway_ServiceDesc, srv)
}

func _APIGateway_QueryGatewayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServer).QueryGatewayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.APIGateway/QueryGatewayInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServer).QueryGatewayInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGateway_RegisterGRPCService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRPCServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServer).RegisterGRPCService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lazycat.apis.APIGateway/RegisterGRPCService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServer).RegisterGRPCService(ctx, req.(*GRPCServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// APIGateway_ServiceDesc is the grpc.ServiceDesc for APIGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lazycat.apis.APIGateway",
	HandlerType: (*APIGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryGatewayInfo",
			Handler:    _APIGateway_QueryGatewayInfo_Handler,
		},
		{
			MethodName: "RegisterGRPCService",
			Handler:    _APIGateway_RegisterGRPCService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/gateway.proto",
}
